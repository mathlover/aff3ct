#ifndef DECODER_POLAR_SC_FAST_SYS_N32768_K16384_SNR18_HPP_
#define DECODER_POLAR_SC_FAST_SYS_N32768_K16384_SNR18_HPP_

#include <cassert>

#include "../Decoder_polar_SC_fast_sys.hpp"

namespace aff3ct
{
namespace module
{
static const char Frozen_bits_32768_16384_18[32768] = {
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

template <typename B, typename R, class API_polar>
class Decoder_polar_SC_fast_sys_N32768_K16384_SNR18 : public Decoder_polar_SC_fast_sys<B, R, API_polar>
{
public:
	Decoder_polar_SC_fast_sys_N32768_K16384_SNR18(const int& K, const int& N, const mipp::vector<B>& frozen_bits, const int n_frames = 1)
	: Decoder_polar_SC_fast_sys<B, R, API_polar>(K, N, frozen_bits, n_frames)
	{
		assert(N == 32768);
		assert(K == 16384);
		
		auto i = 0;
		while (i < 32768 && Frozen_bits_32768_16384_18[i] == frozen_bits[i]) i++;
		assert(i == 32768);
	}

	virtual ~Decoder_polar_SC_fast_sys_N32768_K16384_SNR18()
	{
	}

	// depth = 5, reverse depth = 10, size = 1024, calls = 2
	inline void r05(const int off_l, const int off_s)
	{
	}

	// depth = 6, reverse depth = 9, size = 512, calls = 3
	inline void r06(const int off_l, const int off_s)
	{
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 3
	inline void re7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  256>(s, l, off_l+    0,                           off_s+    0,   256);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 7
	inline void re8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  128>(s, l, off_l+    0,                           off_s+    0,   128);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 21
	inline void r010(const int off_l, const int off_s)
	{
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 27
	inline void r011(const int off_l, const int off_s)
	{
	}

	// depth = 12, reverse depth = 3, size = 8, calls = 45
	__attribute__((always_inline))
	inline void r012(const int off_l, const int off_s)
	{
	}

	// depth = 13, reverse depth = 2, size = 4, calls = 233
	__attribute__((always_inline))
	inline void re13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<    4>(s, l, off_l+    0,                           off_s+    0,     4);
	}

	// depth = 13, reverse depth = 2, size = 4, calls = 237
	__attribute__((always_inline))
	inline void s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<    4>(s, l, off_l+    0,                           off_s+    0,     4);
	}

	// depth = 12, reverse depth = 3, size = 8, calls = 213
	__attribute__((always_inline))
	inline void re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    4>(   l, off_l+    0, off_l+    4,              off_l+    8,     4);
		re13(off_l+8, off_s+0);
		API_polar::template gr <    4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,     4);
		s13(off_l+8, off_s+4);
		API_polar::template xo <    4>(s,    off_s+    0, off_s+    4,              off_s+    0,     4);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 27
	inline void r012re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r012(off_l+16, off_s+0);
		API_polar::template g0 <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		re13s13(off_l+16, off_s+8);
		API_polar::template xo0<    8>(s,    off_s+    8,                           off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 16
	inline void r011r012re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+32, off_s+0);
		API_polar::template g0 <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		r012re13s13(off_l+32, off_s+16);
		API_polar::template xo0<   16>(s,    off_s+   16,                           off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 11
	inline void r010r011r012re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+64, off_s+0);
		API_polar::template g0 <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r011r012re13s13(off_l+64, off_s+32);
		API_polar::template xo0<   32>(s,    off_s+   32,                           off_s+    0,    32);
	}

	// depth = 12, reverse depth = 3, size = 8, calls = 92
	__attribute__((always_inline))
	inline void re12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<    8>(s, l, off_l+    0,                           off_s+    0,     8);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 70
	inline void re12re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		re12(off_l+16, off_s+0);
		API_polar::template gr <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		re13s13(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 5
	inline void r011re12re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+32, off_s+0);
		API_polar::template g0 <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re12re13s13(off_l+32, off_s+16);
		API_polar::template xo0<   16>(s,    off_s+   16,                           off_s+    0,    16);
	}

	// depth = 12, reverse depth = 3, size = 8, calls = 133
	__attribute__((always_inline))
	inline void s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<    8>(s, l, off_l+    0,                           off_s+    0,     8);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 102
	inline void re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		re13s13(off_l+16, off_s+0);
		API_polar::template g  <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		s12(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 24
	inline void re12re13s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re12re13s13(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re13s13s12(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 3
	inline void r011re12re13s13re12re13s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r011re12re13s13(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re12re13s13re13s13s12(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 8
	inline void r08(const int off_l, const int off_s)
	{
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 12
	inline void r09(const int off_l, const int off_s)
	{
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 4
	inline void r09r010r011r012re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+128, off_s+0);
		API_polar::template g0 <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r010r011r012re13s13(off_l+128, off_s+64);
		API_polar::template xo0<   64>(s,    off_s+   64,                           off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 3
	inline void r08r09r010r011r012re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r08(off_l+256, off_s+0);
		API_polar::template g0 <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		r09r010r011r012re13s13(off_l+256, off_s+128);
		API_polar::template xo0<  128>(s,    off_s+  128,                           off_s+    0,   128);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 46
	inline void re11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   16>(s, l, off_l+    0,                           off_s+    0,    16);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 25
	inline void re11re12re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re11(off_l+32, off_s+0);
		API_polar::template gr <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re12re13s13(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 8
	inline void r010re11re12re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+64, off_s+0);
		API_polar::template g0 <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re11re12re13s13(off_l+64, off_s+32);
		API_polar::template xo0<   32>(s,    off_s+   32,                           off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 4
	inline void r09r010re11re12re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+128, off_s+0);
		API_polar::template g0 <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r010re11re12re13s13(off_l+128, off_s+64);
		API_polar::template xo0<   64>(s,    off_s+   64,                           off_s+    0,    64);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 18
	inline void re10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   32>(s, l, off_l+    0,                           off_s+    0,    32);
	}

	// depth = 14, reverse depth = 1, size = 2, calls = 37
	__attribute__((always_inline))
	inline void r014(const int off_l, const int off_s)
	{
	}

	// depth = 14, reverse depth = 1, size = 2, calls = 37
	__attribute__((always_inline))
	inline void r114(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <    2>(s, l, off_l+    0,                           off_s+    0,     2);
	}

	// depth = 13, reverse depth = 2, size = 4, calls = 37
	__attribute__((always_inline))
	inline void r014r114(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r014(off_l+4, off_s+0);
		API_polar::template g0 <    2>(   l, off_l+    0, off_l+    2,              off_l+    4,     2);
		r114(off_l+4, off_s+2);
		API_polar::template xo0<    2>(s,    off_s+    2,                           off_s+    0,     2);
	}

	// depth = 13, reverse depth = 2, size = 4, calls = 38
	__attribute__((always_inline))
	inline void r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <    4>(s, l, off_l+    0,                           off_s+    0,     4);
	}

	// depth = 12, reverse depth = 3, size = 8, calls = 18
	__attribute__((always_inline))
	inline void r014r114r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    4>(   l, off_l+    0, off_l+    4,              off_l+    8,     4);
		r014r114(off_l+8, off_s+0);
		API_polar::template g  <    4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,     4);
		r113(off_l+8, off_s+4);
		API_polar::template xo <    4>(s,    off_s+    0, off_s+    4,              off_s+    0,     4);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 10
	inline void re12r014r114r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		re12(off_l+16, off_s+0);
		API_polar::template gr <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		r014r114r113(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 4
	inline void re11re12r014r114r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re11(off_l+32, off_s+0);
		API_polar::template gr <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re12r014r114r113(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 13, reverse depth = 2, size = 4, calls = 43
	__attribute__((always_inline))
	inline void r013(const int off_l, const int off_s)
	{
	}

	// depth = 12, reverse depth = 3, size = 8, calls = 19
	__attribute__((always_inline))
	inline void r013r014r114(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r013(off_l+8, off_s+0);
		API_polar::template g0 <    4>(   l, off_l+    0, off_l+    4,              off_l+    8,     4);
		r014r114(off_l+8, off_s+4);
		API_polar::template xo0<    4>(s,    off_s+    4,                           off_s+    0,     4);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 11
	inline void r012r013r014r114(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r012(off_l+16, off_s+0);
		API_polar::template g0 <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		r013r014r114(off_l+16, off_s+8);
		API_polar::template xo0<    8>(s,    off_s+    8,                           off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 8
	inline void r012r013r014r114re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		r012r013r014r114(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re13s13s12(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 71
	inline void s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   16>(s, l, off_l+    0,                           off_s+    0,    16);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 45
	inline void re13s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re13s13s12(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		s11(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 5
	inline void r012r013r014r114re13s13s12re13s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r012r013r014r114re13s13s12(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re13s13s12s11(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 5
	inline void r07(const int off_l, const int off_s)
	{
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void r010r011re12re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+64, off_s+0);
		API_polar::template g0 <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r011re12re13s13(off_l+64, off_s+32);
		API_polar::template xo0<   32>(s,    off_s+   32,                           off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void r09r010r011re12re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+128, off_s+0);
		API_polar::template g0 <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r010r011re12re13s13(off_l+128, off_s+64);
		API_polar::template xo0<   64>(s,    off_s+   64,                           off_s+    0,    64);
	}

	// depth = 12, reverse depth = 3, size = 8, calls = 20
	__attribute__((always_inline))
	inline void re13r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    4>(   l, off_l+    0, off_l+    4,              off_l+    8,     4);
		re13(off_l+8, off_s+0);
		API_polar::template gr <    4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,     4);
		r113(off_l+8, off_s+4);
		API_polar::template xo <    4>(s,    off_s+    0, off_s+    4,              off_s+    0,     4);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 6
	inline void re12re13r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		re12(off_l+16, off_s+0);
		API_polar::template gr <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		re13r113(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 5
	inline void re11re12re13r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re11(off_l+32, off_s+0);
		API_polar::template gr <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re12re13r113(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 11
	inline void re9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   64>(s, l, off_l+    0,                           off_s+    0,    64);
	}

	// depth = 12, reverse depth = 3, size = 8, calls = 24
	__attribute__((always_inline))
	inline void r013s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r013(off_l+8, off_s+0);
		API_polar::template g0 <    4>(   l, off_l+    0, off_l+    4,              off_l+    8,     4);
		s13(off_l+8, off_s+4);
		API_polar::template xo0<    4>(s,    off_s+    4,                           off_s+    0,     4);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 7
	inline void r012r013s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r012(off_l+16, off_s+0);
		API_polar::template g0 <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		r013s13(off_l+16, off_s+8);
		API_polar::template xo0<    8>(s,    off_s+    8,                           off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 4
	inline void r012r013s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		r012r013s13(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re13s13s12(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void re10r012r013s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re10(off_l+64, off_s+0);
		API_polar::template gr <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r012r013s13re13s13s12(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re9re10r012r013s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re9(off_l+128, off_s+0);
		API_polar::template gr <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re10r012r013s13re13s13s12(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 5
	inline void r011r012re13s13re12re13s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r011r012re13s13(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re12re13s13re13s13s12(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 12, reverse depth = 3, size = 8, calls = 36
	__attribute__((always_inline))
	inline void r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <    8>(s, l, off_l+    0,                           off_s+    0,     8);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 14
	inline void re13r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		re13r113(off_l+16, off_s+0);
		API_polar::template g  <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		r112(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 30
	inline void r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   16>(s, l, off_l+    0,                           off_s+    0,    16);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 9
	inline void re13r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re13r113r112(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		r111(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 3
	inline void re12re13s13re13s13s12re13r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re12re13s13re13s13s12(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re13r113r112r111(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 3
	inline void r011r012re13s13re12re13s13re13s13s12re12re13s13re13s13s12re13r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r011r012re13s13re12re13s13re13s13s12(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re12re13s13re13s13s12re13r113r112r111(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re9re10r012r013s13re13s13s12r011r012re13s13re12re13s13re13s13s12re12re13s13re13s13s12re13r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re9re10r012r013s13re13s13s12(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		r011r012re13s13re12re13s13re13s13s12re12re13s13re13s13s12re13r113r112r111(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 3
	inline void r011r012r013s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+32, off_s+0);
		API_polar::template g0 <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		r012r013s13(off_l+32, off_s+16);
		API_polar::template xo0<   16>(s,    off_s+   16,                           off_s+    0,    16);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 14
	inline void re13s13r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		re13s13(off_l+16, off_s+0);
		API_polar::template g  <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		r112(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 9
	inline void re12re13s13re13s13r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re12re13s13(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re13s13r112(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 6
	inline void re11re12re13s13re12re13s13re13s13r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re11re12re13s13(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re12re13s13re13s13r112(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 5
	inline void r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r010r011r012re13s13(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re11re12re13s13re12re13s13re13s13r112(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 6
	inline void re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		re12(off_l+16, off_s+0);
		API_polar::template gr <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		s12(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 3
	inline void re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re12s12(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		s11(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void re11re12re13s13re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re11re12re13s13(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re12s12s11(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 17
	inline void r013s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		r013s13(off_l+16, off_s+0);
		API_polar::template g  <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		s12(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 10
	inline void r013s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		r013s13s12(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		s11(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 40
	inline void s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   32>(s, l, off_l+    0,                           off_s+    0,    32);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 6
	inline void r013s13s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r013s13s12s11(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		s10(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re11re12re13s13re12s12s11r013s13s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re11re12re13s13re12s12s11(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		r013s13s12s11s10(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112re11re12re13s13re12s12s11r013s13s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		re11re12re13s13re12s12s11r013s13s12s11s10(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 3
	inline void re11re12r014r114r113r013s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re11re12r014r114r113(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r013s13s12s11(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void r010re11re12re13s13re11re12r014r114r113r013s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r010re11re12re13s13(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re11re12r014r114r113r013s13s12s11(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 22
	inline void re13s13s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re13s13s12s11(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		s10(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 3
	inline void r012r013r014r114re13s13s12re13s13s12s11re13s13s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r012r013r014r114re13s13s12re13s13s12s11(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re13s13s12s11s10(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void r010re11re12re13s13re11re12r014r114r113r013s13s12s11r012r013r014r114re13s13s12re13s13s12s11re13s13s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		r010re11re12re13s13re11re12r014r114r113r013s13s12s11(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		r012r013r014r114re13s13s12re13s13s12s11re13s13s12s11s10(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 4
	inline void re12re13s13re13s13s12re13s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re12re13s13re13s13s12(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re13s13s12s11(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 18
	inline void r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   32>(s, l, off_l+    0,                           off_s+    0,    32);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void re13s13s12s11r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re13s13s12s11(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r110(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 5
	inline void re13s13r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re13s13r112(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		r111(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 3
	inline void re13s13r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re13s13r112r111(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r110(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 10
	inline void r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   64>(s, l, off_l+    0,                           off_s+    0,    64);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re13s13r112r111r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re13s13r112r111r110(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		r19(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 3
	inline void re10r012r013r014r114re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re10(off_l+64, off_s+0);
		API_polar::template gr <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r012r013r014r114re13s13s12(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re9r011r012re13s13re12re13s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re9(off_l+128, off_s+0);
		API_polar::template gr <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		r011r012re13s13re12re13s13re13s13s12(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 5
	inline void re12re13s13re13r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re12re13s13(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re13r113r112(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 4
	inline void re11re12re13s13re12re13s13re13r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re11re12re13s13(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re12re13s13re13r113r112(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 6
	inline void re12r014r114r113s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re12r014r114r113(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		s11(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 5
	inline void re12r014r114r113s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re12r014r114r113s11(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		s10(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 3
	inline void re11re12re13s13re12re13s13re13r113r112re12r014r114r113s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re11re12re13s13re12re13s13re13r113r112(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re12r014r114r113s11s10(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re9r011r012re13s13re12re13s13re13s13s12re11re12re13s13re12re13s13re13r113r112re12r014r114r113s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re9r011r012re13s13re12re13s13re13s13s12(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		re11re12re13s13re12re13s13re13r113r112re12r014r114r113s11s10(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 3
	inline void r011r012r013r014r114(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+32, off_s+0);
		API_polar::template g0 <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		r012r013r014r114(off_l+32, off_s+16);
		API_polar::template xo0<   16>(s,    off_s+   16,                           off_s+    0,    16);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 11
	inline void r012re13s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		r012re13s13(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re13s13s12(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 3
	inline void r011r012r013r014r114r012re13s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r011r012r013r014r114(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r012re13s13re13s13s12(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re9r011r012r013r014r114r012re13s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re9(off_l+128, off_s+0);
		API_polar::template gr <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		r011r012r013r014r114r012re13s13re13s13s12(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re8r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re8(off_l+256, off_s+0);
		API_polar::template gr <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 4
	inline void re10re11re12re13s13(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re10(off_l+64, off_s+0);
		API_polar::template gr <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re11re12re13s13(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 7
	inline void re11r013s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re11(off_l+32, off_s+0);
		API_polar::template gr <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		r013s13s12(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 4
	inline void re11r013s13s12re13s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re11r013s13s12(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re13s13s12s11(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 5
	inline void r012re13s13re13s13s12re13s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r012re13s13re13s13s12(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re13s13s12s11(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re10r012r013r014r114re13s13s12r012re13s13re13s13s12re13s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re10r012r013r014r114re13s13s12(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		r012re13s13re13s13s12re13s13s12s11(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 10
	inline void re13s13s12r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re13s13s12(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		r111(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 6
	inline void re12re13s13re13s13s12re13s13s12r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re12re13s13re13s13s12(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re13s13s12r111(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 6
	inline void re13r113r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re13r113r112r111(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r110(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 3
	inline void re12re13s13re13s13s12re13s13s12r111re13r113r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re12re13s13re13s13s12re13s13s12r111(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re13r113r112r111r110(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re10r012r013r014r114re13s13s12r012re13s13re13s13s12re13s13s12s11re12re13s13re13s13s12re13s13s12r111re13r113r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re10r012r013r014r114re13s13s12r012re13s13re13s13s12re13s13s12s11(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		re12re13s13re13s13s12re13s13s12r111re13r113r112r111r110(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 8
	inline void r014r114r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		r014r114r113(off_l+16, off_s+0);
		API_polar::template g  <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		r112(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 2
	inline void re12re13s13r014r114r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re12re13s13(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		r014r114r113r112(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void re12re13s13r014r114r113r112s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re12re13s13r014r114r113r112(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		s10(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 22
	inline void s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   64>(s, l, off_l+    0,                           off_s+    0,    64);
	}

	// depth = 11, reverse depth = 4, size = 16, calls = 8
	inline void r013r014r114s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <    8>(   l, off_l+    0, off_l+    8,              off_l+   16,     8);
		r013r014r114(off_l+16, off_s+0);
		API_polar::template g  <    8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,     8);
		s12(off_l+16, off_s+8);
		API_polar::template xo <    8>(s,    off_s+    0, off_s+    8,              off_s+    0,     8);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 6
	inline void r013r014r114s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		r013r014r114s12(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		s11(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void r013r014r114s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r013r014r114s12s11(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		s10(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void r013r014r114s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r013r014r114s12s11s10(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		s9(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 10
	inline void s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  128>(s, l, off_l+    0,                           off_s+    0,   128);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 4
	inline void re11re12re13r113r013r014r114s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re11re12re13r113(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r013r014r114s12s11(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void r010re11re12re13s13re11re12re13r113r013r014r114s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r010re11re12re13s13(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re11re12re13r113r013r014r114s12s11(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 3
	inline void re10re11r013s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re10(off_l+64, off_s+0);
		API_polar::template gr <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re11r013s13s12(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re10re11r013s13s12r012re13s13re13s13s12re13s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re10re11r013s13s12(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		r012re13s13re13s13s12re13s13s12s11(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void r011r012r013s13r012re13s13re13s13s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r011r012r013s13(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r012re13s13re13s13s12(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void r011r012r013s13r012re13s13re13s13s12re12re13s13re13s13s12re13s13s12r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r011r012r013s13r012re13s13re13s13s12(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re12re13s13re13s13s12re13s13s12r111(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 6
	inline void r014r114r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		r014r114r113r112(off_l+32, off_s+0);
		API_polar::template g  <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		r111(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 3
	inline void re12re13s13re13s13r112r014r114r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re12re13s13re13s13r112(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r014r114r113r112r111(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 3
	inline void re12re13s13re13s13r112r014r114r113r112r111s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re12re13s13re13s13r112r014r114r113r112r111(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		s9(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void r011r012r013s13r012re13s13re13s13s12re12re13s13re13s13s12re13s13s12r111re12re13s13re13s13r112r014r114r113r112r111s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		r011r012r013s13r012re13s13re13s13s12re12re13s13re13s13s12re13s13s12r111(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		re12re13s13re13s13r112r014r114r113r112r111s9(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 3
	inline void r013s13s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		r013s13s12s11s10(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		s9(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 10
	inline void re13s13s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re13s13s12s11s10(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		s9(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 8
	inline void r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  128>(s, l, off_l+    0,                           off_s+    0,   128);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 3
	inline void re13s13s12s11s10s9r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re13s13s12s11s10s9(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		r18(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 3
	inline void re11r013s13s12re13s13s12s11re13s13s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re11r013s13s12re13s13s12s11(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re13s13s12s11s10(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re11r013s13s12re13s13s12s11re13s13s12s11s10re13s13s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re11r013s13s12re13s13s12s11re13s13s12s11s10(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		re13s13s12s11s10s9(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 4
	inline void re13s13s12r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re13s13s12r111(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r110(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re13s13s12r111r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re13s13s12r111r110(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		r19(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 3
	inline void re13r113r112r111r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re13r113r112r111r110(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		r19(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re13r113r112r111r110r19r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re13r113r112r111r110r19(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		r18(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 3
	inline void r014r114r113r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r014r114r113r112r111(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		r110(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 6
	inline void s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  256>(s, l, off_l+    0,                           off_s+    0,   256);
	}

	// depth = 6, reverse depth = 9, size = 512, calls = 2
	inline void s6(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  512>(s, l, off_l+    0,                           off_s+    0,   512);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 3
	inline void re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re11(off_l+32, off_s+0);
		API_polar::template gr <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		re12s12(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re11re12re13r113r013r014r114s12s11re13s13s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re11re12re13r113r013r014r114s12s11(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re13s13s12s11s10(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re11re12re13r113r013r014r114s12s11re13s13s12s11s10re13s13s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re11re12re13r113r013r014r114s12s11re13s13s12s11s10(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		re13s13s12s11s10s9(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 10, reverse depth = 5, size = 32, calls = 2
	inline void re11r013r014r114s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   16>(   l, off_l+    0, off_l+   16,              off_l+   32,    16);
		re11(off_l+32, off_s+0);
		API_polar::template gr <   16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,    16);
		r013r014r114s12(off_l+32, off_s+16);
		API_polar::template xo <   16>(s,    off_s+    0, off_s+   16,              off_s+    0,    16);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void re10re11r013r014r114s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re10(off_l+64, off_s+0);
		API_polar::template gr <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re11r013r014r114s12(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void r012r013s13re13s13s12re13s13s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		r012r013s13re13s13s12(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re13s13s12s11(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re12re13s13re13s13s12re13s13s12s11re13s13s12r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re12re13s13re13s13s12re13s13s12s11(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		re13s13s12r111r110(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 9, reverse depth = 6, size = 64, calls = 2
	inline void re12re13s13re13s13s12re13s13r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   32>(   l, off_l+    0, off_l+   32,              off_l+   64,    32);
		re12re13s13re13s13s12(off_l+64, off_s+0);
		API_polar::template g  <   32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,    32);
		re13s13r112r111(off_l+64, off_s+32);
		API_polar::template xo <   32>(s,    off_s+    0, off_s+   32,              off_s+    0,    32);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re12re13s13re13s13s12re13s13r112r111r014r114r113r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re12re13s13re13s13s12re13s13r112r111(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		r014r114r113r112r111r110(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re12re13s13re13s13s12re13s13r112r111r014r114r113r112r111r110s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re12re13s13re13s13s12re13s13r112r111r014r114r113r112r111r110(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		s8(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 8, reverse depth = 7, size = 128, calls = 2
	inline void re12r014r114r113s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   64>(   l, off_l+    0, off_l+   64,              off_l+  128,    64);
		re12r014r114r113s11s10(off_l+128, off_s+0);
		API_polar::template g  <   64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,    64);
		s9(off_l+128, off_s+64);
		API_polar::template xo <   64>(s,    off_s+    0, off_s+   64,              off_s+    0,    64);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re12r014r114r113s11s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re12r014r114r113s11s10s9(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		s8(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void r013s13s12s11s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		r013s13s12s11s10s9(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		s8(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 6, reverse depth = 9, size = 512, calls = 2
	inline void r013s13s12s11s10s9s8s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  256>(   l, off_l+    0, off_l+  256,              off_l+  512,   256);
		r013s13s12s11s10s9s8(off_l+512, off_s+0);
		API_polar::template g  <  256>(s, l, off_l+    0, off_l+  256, off_s+    0, off_l+  512,   256);
		s7(off_l+512, off_s+256);
		API_polar::template xo <  256>(s,    off_s+    0, off_s+  256,              off_s+    0,   256);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 2
	inline void re13s13s12s11s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  128>(   l, off_l+    0, off_l+  128,              off_l+  256,   128);
		re13s13s12s11s10s9(off_l+256, off_s+0);
		API_polar::template g  <  128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,   128);
		s8(off_l+256, off_s+128);
		API_polar::template xo <  128>(s,    off_s+    0, off_s+  128,              off_s+    0,   128);
	}

	// depth = 7, reverse depth = 8, size = 256, calls = 4
	inline void r17(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  256>(s, l, off_l+    0,                           off_s+    0,   256);
	}

	// depth = 6, reverse depth = 9, size = 512, calls = 3
	inline void r16(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  512>(s, l, off_l+    0,                           off_s+    0,   512);
	}

	void decode()
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <16384>(   l,     0+    0,     0+16384,                  0+32768, 16384);
		API_polar::template f  < 8192>(   l, 32768+    0, 32768+ 8192,              32768+16384,  8192);
		API_polar::template f  < 4096>(   l, 49152+    0, 49152+ 4096,              49152+ 8192,  4096);
		API_polar::template g0 < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		r05(63488, 2048);
		API_polar::template g0 < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		r06(64512, 3072);
		API_polar::template g0 <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re7(65024, 3584);
		API_polar::template gr <  256>(s, l, 64512+    0, 64512+  256,  3584+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re8(65280, 3840);
		API_polar::template gr <  128>(s, l, 65024+    0, 65024+  128,  3840+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		r010r011r012re13s13(65408, 3968);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64,  3968+    0, 65280+  128,    64);
		r011re12re13s13re12re13s13re13s13s12(65408, 4032);
		API_polar::template xo <   64>(s,     3968+    0,  3968+   64,               3968+    0,    64);
		API_polar::template xo <  128>(s,     3840+    0,  3840+  128,               3840+    0,   128);
		API_polar::template xo <  256>(s,     3584+    0,  3584+  256,               3584+    0,   256);
		API_polar::template xo0<  512>(s,     3072+  512,                            3072+    0,   512);
		API_polar::template xo0< 1024>(s,     2048+ 1024,                            2048+    0,  1024);
		API_polar::template xo0< 2048>(s,        0+ 2048,                               0+    0,  2048);
		API_polar::template g  < 4096>(s, l, 49152+    0, 49152+ 4096,     0+    0, 49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		r05(63488, 4096);
		API_polar::template g0 < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template rep<  512>(s, l, 64512+    0,                            5120+    0,   512);
		API_polar::template gr <  512>(s, l, 63488+    0, 63488+  512,  5120+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r08r09r010r011r012re13s13(65024, 5632);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256,  5632+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r09r010re11re12re13s13(65280, 5888);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128,  5888+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		re10(65472, 6016);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32,  6016+    0, 65408+   64,    32);
		re11re12r014r114r113(65472, 6048);
		API_polar::template xo <   32>(s,     6016+    0,  6016+   32,               6016+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64,  6016+    0, 65280+  128,    64);
		r012r013r014r114re13s13s12re13s13s12s11(65408, 6080);
		API_polar::template xo <   64>(s,     6016+    0,  6016+   64,               6016+    0,    64);
		API_polar::template xo <  128>(s,     5888+    0,  5888+  128,               5888+    0,   128);
		API_polar::template xo <  256>(s,     5632+    0,  5632+  256,               5632+    0,   256);
		API_polar::template xo <  512>(s,     5120+    0,  5120+  512,               5120+    0,   512);
		API_polar::template xo0< 1024>(s,     4096+ 1024,                            4096+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048,  4096+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		r07(65024, 6144);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r08(65280, 6400);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r09r010r011re12re13s13(65280, 6528);
		API_polar::template xo0<  128>(s,     6400+  128,                            6400+    0,   128);
		API_polar::template xo0<  256>(s,     6144+  256,                            6144+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512,  6144+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r08(65280, 6656);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r09(65408, 6784);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		re10(65472, 6848);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32,  6848+    0, 65408+   64,    32);
		re11re12re13r113(65472, 6880);
		API_polar::template xo <   32>(s,     6848+    0,  6848+   32,               6848+    0,    32);
		API_polar::template xo0<   64>(s,     6784+   64,                            6784+    0,    64);
		API_polar::template xo0<  128>(s,     6656+  128,                            6656+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256,  6656+    0, 64512+  512,   256);
		re9re10r012r013s13re13s13s12r011r012re13s13re12re13s13re13s13s12re12re13s13re13s13s12re13r113r112r111(65024, 6912);
		API_polar::template xo <  256>(s,     6656+    0,  6656+  256,               6656+    0,   256);
		API_polar::template xo <  512>(s,     6144+    0,  6144+  512,               6144+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024,  6144+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re8(65280, 7168);
		API_polar::template gr <  128>(s, l, 65024+    0, 65024+  128,  7168+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re9(65408, 7296);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64,  7296+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		r011r012r013s13(65472, 7360);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32,  7360+    0, 65408+   64,    32);
		re12re13s13re13s13s12(65472, 7392);
		API_polar::template xo <   32>(s,     7360+    0,  7360+   32,               7360+    0,    32);
		API_polar::template xo <   64>(s,     7296+    0,  7296+   64,               7296+    0,    64);
		API_polar::template xo <  128>(s,     7168+    0,  7168+  128,               7168+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256,  7168+    0, 64512+  512,   256);
		r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112re11re12re13s13re12s12s11r013s13s12s11s10(65024, 7424);
		API_polar::template xo <  256>(s,     7168+    0,  7168+  256,               7168+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512,  7168+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r010re11re12re13s13re11re12r014r114r113r013s13s12s11r012r013r014r114re13s13s12re13s13s12s11re13s13s12s11s10(65024, 7680);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256,  7680+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re12re13s13re13s13s12re13s13s12s11(65408, 7936);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64,  7936+    0, 65280+  128,    64);
		re13s13s12s11r110(65408, 8000);
		API_polar::template xo <   64>(s,     7936+    0,  7936+   64,               7936+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128,  7936+    0, 65024+  256,   128);
		re13s13r112r111r110r19(65280, 8064);
		API_polar::template xo <  128>(s,     7936+    0,  7936+  128,               7936+    0,   128);
		API_polar::template xo <  256>(s,     7680+    0,  7680+  256,               7680+    0,   256);
		API_polar::template xo <  512>(s,     7168+    0,  7168+  512,               7168+    0,   512);
		API_polar::template xo < 1024>(s,     6144+    0,  6144+ 1024,               6144+    0,  1024);
		API_polar::template xo < 2048>(s,     4096+    0,  4096+ 2048,               4096+    0,  2048);
		API_polar::template xo < 4096>(s,        0+    0,     0+ 4096,                  0+    0,  4096);
		API_polar::template g  < 8192>(s, l, 32768+    0, 32768+ 8192,     0+    0, 32768+16384,  8192);
		API_polar::template f  < 4096>(   l, 49152+    0, 49152+ 4096,              49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		r06(64512, 8192);
		API_polar::template g0 <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		r07(65024, 8704);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r08r09r010r011r012re13s13(65024, 8960);
		API_polar::template xo0<  256>(s,     8704+  256,                            8704+    0,   256);
		API_polar::template xo0<  512>(s,     8192+  512,                            8192+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024,  8192+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		r07(65024, 9216);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r08(65280, 9472);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r09r010re11re12re13s13(65280, 9600);
		API_polar::template xo0<  128>(s,     9472+  128,                            9472+    0,   128);
		API_polar::template xo0<  256>(s,     9216+  256,                            9216+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512,  9216+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r08(65280, 9728);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re9(65408, 9856);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64,  9856+    0, 65280+  128,    64);
		re10r012r013r014r114re13s13s12(65408, 9920);
		API_polar::template xo <   64>(s,     9856+    0,  9856+   64,               9856+    0,    64);
		API_polar::template xo0<  128>(s,     9728+  128,                            9728+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256,  9728+    0, 64512+  512,   256);
		re9r011r012re13s13re12re13s13re13s13s12re11re12re13s13re12re13s13re13r113r112re12r014r114r113s11s10(65024, 9984);
		API_polar::template xo <  256>(s,     9728+    0,  9728+  256,               9728+    0,   256);
		API_polar::template xo <  512>(s,     9216+    0,  9216+  512,               9216+    0,   512);
		API_polar::template xo < 1024>(s,     8192+    0,  8192+ 1024,               8192+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048,  8192+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		r07(65024, 10240);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re8(65280, 10496);
		API_polar::template gr <  128>(s, l, 65024+    0, 65024+  128, 10496+    0, 65024+  256,   128);
		re9r011r012r013r014r114r012re13s13re13s13s12(65280, 10624);
		API_polar::template xo <  128>(s,    10496+    0, 10496+  128,              10496+    0,   128);
		API_polar::template xo0<  256>(s,    10240+  256,                           10240+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 10240+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re8r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112(65024, 10752);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 10752+    0, 64512+  512,   256);
		r010re11re12re13s13re11re12r014r114r113r013s13s12s11r012r013r014r114re13s13s12re13s13s12s11re13s13s12s11s10(65024, 11008);
		API_polar::template xo <  256>(s,    10752+    0, 10752+  256,              10752+    0,   256);
		API_polar::template xo <  512>(s,    10240+    0, 10240+  512,              10240+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 10240+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r09r010re11re12re13s13(65280, 11264);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 11264+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re10re11re12re13s13(65408, 11392);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 11392+    0, 65280+  128,    64);
		re11r013s13s12re13s13s12s11(65408, 11456);
		API_polar::template xo <   64>(s,    11392+    0, 11392+   64,              11392+    0,    64);
		API_polar::template xo <  128>(s,    11264+    0, 11264+  128,              11264+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 11264+    0, 64512+  512,   256);
		re10r012r013r014r114re13s13s12r012re13s13re13s13s12re13s13s12s11re12re13s13re13s13s12re13s13s12r111re13r113r112r111r110(65024, 11520);
		API_polar::template xo <  256>(s,    11264+    0, 11264+  256,              11264+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 11264+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r011r012re13s13re12re13s13re13s13s12re12re13s13re13s13s12re13r113r112r111(65280, 11776);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 11776+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re12re13s13r014r114r113r112s10(65408, 11904);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 11904+    0, 65280+  128,    64);
		s9(65408, 11968);
		API_polar::template xo <   64>(s,    11904+    0, 11904+   64,              11904+    0,    64);
		API_polar::template xo <  128>(s,    11776+    0, 11776+  128,              11776+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 11776+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r013r014r114s12s11s10s9(65280, 12032);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 12032+    0, 65024+  256,   128);
		s8(65280, 12160);
		API_polar::template xo <  128>(s,    12032+    0, 12032+  128,              12032+    0,   128);
		API_polar::template xo <  256>(s,    11776+    0, 11776+  256,              11776+    0,   256);
		API_polar::template xo <  512>(s,    11264+    0, 11264+  512,              11264+    0,   512);
		API_polar::template xo < 1024>(s,    10240+    0, 10240+ 1024,              10240+    0,  1024);
		API_polar::template xo < 2048>(s,     8192+    0,  8192+ 2048,               8192+    0,  2048);
		API_polar::template g  < 4096>(s, l, 49152+    0, 49152+ 4096,  8192+    0, 49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re7(65024, 12288);
		API_polar::template gr <  256>(s, l, 64512+    0, 64512+  256, 12288+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r09r010r011r012re13s13(65280, 12544);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 12544+    0, 65024+  256,   128);
		r010re11re12re13s13re11re12re13r113r013r014r114s12s11(65280, 12672);
		API_polar::template xo <  128>(s,    12544+    0, 12544+  128,              12544+    0,   128);
		API_polar::template xo <  256>(s,    12288+    0, 12288+  256,              12288+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 12288+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r09(65408, 12800);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re10re11re12re13s13(65408, 12864);
		API_polar::template xo0<   64>(s,    12800+   64,                           12800+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 12800+    0, 65024+  256,   128);
		re10re11r013s13s12r012re13s13re13s13s12re13s13s12s11(65280, 12928);
		API_polar::template xo <  128>(s,    12800+    0, 12800+  128,              12800+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 12800+    0, 64512+  512,   256);
		r011r012r013s13r012re13s13re13s13s12re12re13s13re13s13s12re13s13s12r111re12re13s13re13s13r112r014r114r113r112r111s9(65024, 13056);
		API_polar::template xo <  256>(s,    12800+    0, 12800+  256,              12800+    0,   256);
		API_polar::template xo <  512>(s,    12288+    0, 12288+  512,              12288+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 12288+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re9re10r012r013s13re13s13s12r011r012re13s13re12re13s13re13s13s12re12re13s13re13s13s12re13r113r112r111(65024, 13312);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 13312+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re11re12re13s13re12re13s13re13r113r112re12r014r114r113s11s10(65280, 13568);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 13568+    0, 65024+  256,   128);
		r013s13s12s11s10s9(65280, 13696);
		API_polar::template xo <  128>(s,    13568+    0, 13568+  128,              13568+    0,   128);
		API_polar::template xo <  256>(s,    13312+    0, 13312+  256,              13312+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 13312+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re11re12r014r114r113r013s13s12s11(65408, 13824);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 13824+    0, 65280+  128,    64);
		re13s13s12s11s10(65408, 13888);
		API_polar::template xo <   64>(s,    13824+    0, 13824+   64,              13824+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 13824+    0, 65024+  256,   128);
		re13s13s12s11s10s9(65280, 13952);
		API_polar::template xo <  128>(s,    13824+    0, 13824+  128,              13824+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 13824+    0, 64512+  512,   256);
		re13s13s12s11s10s9r18(65024, 14080);
		API_polar::template xo <  256>(s,    13824+    0, 13824+  256,              13824+    0,   256);
		API_polar::template xo <  512>(s,    13312+    0, 13312+  512,              13312+    0,   512);
		API_polar::template xo < 1024>(s,    12288+    0, 12288+ 1024,              12288+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048, 12288+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112(65280, 14336);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 14336+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		re11re12re13s13(65472, 14464);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 14464+    0, 65408+   64,    32);
		re12r014r114r113s11(65472, 14496);
		API_polar::template xo <   32>(s,    14464+    0, 14464+   32,              14464+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 14464+    0, 65280+  128,    64);
		r013s13s12s11s10(65408, 14528);
		API_polar::template xo <   64>(s,    14464+    0, 14464+   64,              14464+    0,    64);
		API_polar::template xo <  128>(s,    14336+    0, 14336+  128,              14336+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 14336+    0, 64512+  512,   256);
		re11r013s13s12re13s13s12s11re13s13s12s11s10re13s13s12s11s10s9(65024, 14592);
		API_polar::template xo <  256>(s,    14336+    0, 14336+  256,              14336+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 14336+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		r012re13s13re13s13s12re13s13s12s11(65408, 14848);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 14848+    0, 65280+  128,    64);
		re13s13s12s11s10(65408, 14912);
		API_polar::template xo <   64>(s,    14848+    0, 14848+   64,              14848+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 14848+    0, 65024+  256,   128);
		re13s13s12r111r110r19(65280, 14976);
		API_polar::template xo <  128>(s,    14848+    0, 14848+  128,              14848+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 14848+    0, 64512+  512,   256);
		re13r113r112r111r110r19r18(65024, 15104);
		API_polar::template xo <  256>(s,    14848+    0, 14848+  256,              14848+    0,   256);
		API_polar::template xo <  512>(s,    14336+    0, 14336+  512,              14336+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 14336+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re12re13s13re13s13s12re13s13s12r111re13r113r112r111r110(65280, 15360);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 15360+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		r014r114r113r112r111r110(65408, 15488);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 15488+    0, 65280+  128,    64);
		r19(65408, 15552);
		API_polar::template xo <   64>(s,    15488+    0, 15488+   64,              15488+    0,    64);
		API_polar::template xo <  128>(s,    15360+    0, 15360+  128,              15360+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 15360+    0, 64512+  512,   256);
		s7(65024, 15616);
		API_polar::template xo <  256>(s,    15360+    0, 15360+  256,              15360+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 15360+    0, 63488+ 1024,   512);
		s6(64512, 15872);
		API_polar::template xo <  512>(s,    15360+    0, 15360+  512,              15360+    0,   512);
		API_polar::template xo < 1024>(s,    14336+    0, 14336+ 1024,              14336+    0,  1024);
		API_polar::template xo < 2048>(s,    12288+    0, 12288+ 2048,              12288+    0,  2048);
		API_polar::template xo < 4096>(s,     8192+    0,  8192+ 4096,               8192+    0,  4096);
		API_polar::template xo < 8192>(s,        0+    0,     0+ 8192,                  0+    0,  8192);
		API_polar::template g  <16384>(s, l,     0+    0,     0+16384,     0+    0,     0+32768, 16384);
		API_polar::template f  < 8192>(   l, 32768+    0, 32768+ 8192,              32768+16384,  8192);
		API_polar::template f  < 4096>(   l, 49152+    0, 49152+ 4096,              49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		r06(64512, 16384);
		API_polar::template g0 <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		r07(65024, 16896);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re8(65280, 17152);
		API_polar::template gr <  128>(s, l, 65024+    0, 65024+  128, 17152+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re9(65408, 17280);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 17280+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		re10(65472, 17344);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 17344+    0, 65408+   64,    32);
		r012re13s13re13s13s12(65472, 17376);
		API_polar::template xo <   32>(s,    17344+    0, 17344+   32,              17344+    0,    32);
		API_polar::template xo <   64>(s,    17280+    0, 17280+   64,              17280+    0,    64);
		API_polar::template xo <  128>(s,    17152+    0, 17152+  128,              17152+    0,   128);
		API_polar::template xo0<  256>(s,    16896+  256,                           16896+    0,   256);
		API_polar::template xo0<  512>(s,    16384+  512,                           16384+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 16384+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re7(65024, 17408);
		API_polar::template gr <  256>(s, l, 64512+    0, 64512+  256, 17408+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re8(65280, 17664);
		API_polar::template gr <  128>(s, l, 65024+    0, 65024+  128, 17664+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		r010r011r012re13s13(65408, 17792);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 17792+    0, 65280+  128,    64);
		re11re12re13s13re12re13s13re13r113r112(65408, 17856);
		API_polar::template xo <   64>(s,    17792+    0, 17792+   64,              17792+    0,    64);
		API_polar::template xo <  128>(s,    17664+    0, 17664+  128,              17664+    0,   128);
		API_polar::template xo <  256>(s,    17408+    0, 17408+  256,              17408+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 17408+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r09r010r011re12re13s13(65280, 17920);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 17920+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re10re11re12re13s13(65408, 18048);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 18048+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		re11re12s12(65472, 18112);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 18112+    0, 65408+   64,    32);
		re13s13s12s11(65472, 18144);
		API_polar::template xo <   32>(s,    18112+    0, 18112+   32,              18112+    0,    32);
		API_polar::template xo <   64>(s,    18048+    0, 18048+   64,              18048+    0,    64);
		API_polar::template xo <  128>(s,    17920+    0, 17920+  128,              17920+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 17920+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re10re11r013s13s12r012re13s13re13s13s12re13s13s12s11(65280, 18176);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 18176+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re12re13s13re13s13s12re13s13s12s11(65408, 18304);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 18304+    0, 65280+  128,    64);
		re13s13r112r111r110(65408, 18368);
		API_polar::template xo <   64>(s,    18304+    0, 18304+   64,              18304+    0,    64);
		API_polar::template xo <  128>(s,    18176+    0, 18176+  128,              18176+    0,   128);
		API_polar::template xo <  256>(s,    17920+    0, 17920+  256,              17920+    0,   256);
		API_polar::template xo <  512>(s,    17408+    0, 17408+  512,              17408+    0,   512);
		API_polar::template xo < 1024>(s,    16384+    0, 16384+ 1024,              16384+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048, 16384+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r08r09r010r011r012re13s13(65024, 18432);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 18432+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r09r010re11re12re13s13(65280, 18688);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 18688+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		re10(65472, 18816);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 18816+    0, 65408+   64,    32);
		re11re12s12(65472, 18848);
		API_polar::template xo <   32>(s,    18816+    0, 18816+   32,              18816+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 18816+    0, 65280+  128,    64);
		r012r013r014r114re13s13s12re13s13s12s11(65408, 18880);
		API_polar::template xo <   64>(s,    18816+    0, 18816+   64,              18816+    0,    64);
		API_polar::template xo <  128>(s,    18688+    0, 18688+  128,              18688+    0,   128);
		API_polar::template xo <  256>(s,    18432+    0, 18432+  256,              18432+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 18432+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re9(65408, 18944);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 18944+    0, 65280+  128,    64);
		re10re11r013s13s12(65408, 19008);
		API_polar::template xo <   64>(s,    18944+    0, 18944+   64,              18944+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 18944+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		r011r012r013r014r114r012re13s13re13s13s12(65408, 19072);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 19072+    0, 65280+  128,    64);
		re12re13s13re13s13s12re13s13s12r111(65408, 19136);
		API_polar::template xo <   64>(s,    19072+    0, 19072+   64,              19072+    0,    64);
		API_polar::template xo <  128>(s,    18944+    0, 18944+  128,              18944+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 18944+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		r011re12re13s13re12re13s13re13s13s12(65408, 19200);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 19200+    0, 65280+  128,    64);
		re12re13s13r014r114r113r112s10(65408, 19264);
		API_polar::template xo <   64>(s,    19200+    0, 19200+   64,              19200+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 19200+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		re12s12s11(65472, 19328);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 19328+    0, 65408+   64,    32);
		s10(65472, 19360);
		API_polar::template xo <   32>(s,    19328+    0, 19328+   32,              19328+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 19328+    0, 65280+  128,    64);
		s9(65408, 19392);
		API_polar::template xo <   64>(s,    19328+    0, 19328+   64,              19328+    0,    64);
		API_polar::template xo <  128>(s,    19200+    0, 19200+  128,              19200+    0,   128);
		API_polar::template xo <  256>(s,    18944+    0, 18944+  256,              18944+    0,   256);
		API_polar::template xo <  512>(s,    18432+    0, 18432+  512,              18432+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 18432+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re9r011r012re13s13re12re13s13re13s13s12re11re12re13s13re12re13s13re13r113r112re12r014r114r113s11s10(65024, 19456);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 19456+    0, 64512+  512,   256);
		re11re12re13r113r013r014r114s12s11re13s13s12s11s10re13s13s12s11s10s9(65024, 19712);
		API_polar::template xo <  256>(s,    19456+    0, 19456+  256,              19456+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 19456+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r012r013r014r114re13s13s12re13s13s12s11re13s13s12s11s10(65280, 19968);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 19968+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re13s13s12s11s10(65408, 20096);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 20096+    0, 65280+  128,    64);
		r19(65408, 20160);
		API_polar::template xo <   64>(s,    20096+    0, 20096+   64,              20096+    0,    64);
		API_polar::template xo <  128>(s,    19968+    0, 19968+  128,              19968+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 19968+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re13s13s12r111r110r19(65280, 20224);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 20224+    0, 65024+  256,   128);
		r18(65280, 20352);
		API_polar::template xo <  128>(s,    20224+    0, 20224+  128,              20224+    0,   128);
		API_polar::template xo <  256>(s,    19968+    0, 19968+  256,              19968+    0,   256);
		API_polar::template xo <  512>(s,    19456+    0, 19456+  512,              19456+    0,   512);
		API_polar::template xo < 1024>(s,    18432+    0, 18432+ 1024,              18432+    0,  1024);
		API_polar::template xo < 2048>(s,    16384+    0, 16384+ 2048,              16384+    0,  2048);
		API_polar::template g  < 4096>(s, l, 49152+    0, 49152+ 4096, 16384+    0, 49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r08(65280, 20480);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re9(65408, 20608);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 20608+    0, 65280+  128,    64);
		re10re11r013r014r114s12(65408, 20672);
		API_polar::template xo <   64>(s,    20608+    0, 20608+   64,              20608+    0,    64);
		API_polar::template xo0<  128>(s,    20480+  128,                           20480+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 20480+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re9r011r012r013r014r114r012re13s13re13s13s12(65280, 20736);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 20736+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		r011re12re13s13re12re13s13re13s13s12(65408, 20864);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 20864+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		re12re13s13re13r113r112(65472, 20928);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 20928+    0, 65408+   64,    32);
		s10(65472, 20960);
		API_polar::template xo <   32>(s,    20928+    0, 20928+   32,              20928+    0,    32);
		API_polar::template xo <   64>(s,    20864+    0, 20864+   64,              20864+    0,    64);
		API_polar::template xo <  128>(s,    20736+    0, 20736+  128,              20736+    0,   128);
		API_polar::template xo <  256>(s,    20480+    0, 20480+  256,              20480+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 20480+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112re11re12re13s13re12s12s11r013s13s12s11s10(65024, 20992);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 20992+    0, 64512+  512,   256);
		re11r013s13s12re13s13s12s11re13s13s12s11s10re13s13s12s11s10s9(65024, 21248);
		API_polar::template xo <  256>(s,    20992+    0, 20992+  256,              20992+    0,   256);
		API_polar::template xo <  512>(s,    20480+    0, 20480+  512,              20480+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 20480+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re10re11re12re13s13(65408, 21504);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 21504+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		re11re12s12(65472, 21568);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 21568+    0, 65408+   64,    32);
		r013s13s12s11(65472, 21600);
		API_polar::template xo <   32>(s,    21568+    0, 21568+   32,              21568+    0,    32);
		API_polar::template xo <   64>(s,    21504+    0, 21504+   64,              21504+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 21504+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		r012r013s13re13s13s12re13s13s12s11(65408, 21632);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 21632+    0, 65280+  128,    64);
		re13s13s12s11s10(65408, 21696);
		API_polar::template xo <   64>(s,    21632+    0, 21632+   64,              21632+    0,    64);
		API_polar::template xo <  128>(s,    21504+    0, 21504+  128,              21504+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 21504+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re12re13s13re13s13s12re13s13s12s11re13s13s12r111r110(65280, 21760);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 21760+    0, 65024+  256,   128);
		re13r113r112r111r110r19(65280, 21888);
		API_polar::template xo <  128>(s,    21760+    0, 21760+  128,              21760+    0,   128);
		API_polar::template xo <  256>(s,    21504+    0, 21504+  256,              21504+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 21504+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re12re13s13re13s13s12re13s13r112r111r014r114r113r112r111r110s8(65024, 22016);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 22016+    0, 64512+  512,   256);
		s7(65024, 22272);
		API_polar::template xo <  256>(s,    22016+    0, 22016+  256,              22016+    0,   256);
		API_polar::template xo <  512>(s,    21504+    0, 21504+  512,              21504+    0,   512);
		API_polar::template xo < 1024>(s,    20480+    0, 20480+ 1024,              20480+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048, 20480+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re10r012r013r014r114re13s13s12r012re13s13re13s13s12re13s13s12s11re12re13s13re13s13s12re13s13s12r111re13r113r112r111r110(65024, 22528);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 22528+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re12re13s13re13s13r112r014r114r113r112r111s9(65280, 22784);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 22784+    0, 65024+  256,   128);
		s8(65280, 22912);
		API_polar::template xo <  128>(s,    22784+    0, 22784+  128,              22784+    0,   128);
		API_polar::template xo <  256>(s,    22528+    0, 22528+  256,              22528+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 22528+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re12r014r114r113s11s10s9s8(65024, 23040);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 23040+    0, 64512+  512,   256);
		s7(65024, 23296);
		API_polar::template xo <  256>(s,    23040+    0, 23040+  256,              23040+    0,   256);
		API_polar::template xo <  512>(s,    22528+    0, 22528+  512,              22528+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 22528+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		r013s13s12s11s10s9s8s7(64512, 23552);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 23552+    0, 63488+ 1024,   512);
		s6(64512, 24064);
		API_polar::template xo <  512>(s,    23552+    0, 23552+  512,              23552+    0,   512);
		API_polar::template xo < 1024>(s,    22528+    0, 22528+ 1024,              22528+    0,  1024);
		API_polar::template xo < 2048>(s,    20480+    0, 20480+ 2048,              20480+    0,  2048);
		API_polar::template xo < 4096>(s,    16384+    0, 16384+ 4096,              16384+    0,  4096);
		API_polar::template g  < 8192>(s, l, 32768+    0, 32768+ 8192, 16384+    0, 32768+16384,  8192);
		API_polar::template f  < 4096>(   l, 49152+    0, 49152+ 4096,              49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re8r010r011r012re13s13re11re12re13s13re12re13s13re13s13r112(65024, 24576);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 24576+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		r010re11re12re13s13re11re12re13r113r013r014r114s12s11(65280, 24832);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 24832+    0, 65024+  256,   128);
		re11r013s13s12re13s13s12s11re13s13s12s11s10(65280, 24960);
		API_polar::template xo <  128>(s,    24832+    0, 24832+  128,              24832+    0,   128);
		API_polar::template xo <  256>(s,    24576+    0, 24576+  256,              24576+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 24576+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re10re11r013r014r114s12(65408, 25088);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 25088+    0, 65280+  128,    64);
		r012r013s13re13s13s12re13s13s12s11(65408, 25152);
		API_polar::template xo <   64>(s,    25088+    0, 25088+   64,              25088+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 25088+    0, 65024+  256,   128);
		re12re13s13re13s13s12re13s13s12s11re13s13s12r111r110(65280, 25216);
		API_polar::template xo <  128>(s,    25088+    0, 25088+  128,              25088+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 25088+    0, 64512+  512,   256);
		re12re13s13re13s13s12re13s13r112r111r014r114r113r112r111r110s8(65024, 25344);
		API_polar::template xo <  256>(s,    25088+    0, 25088+  256,              25088+    0,   256);
		API_polar::template xo <  512>(s,    24576+    0, 24576+  512,              24576+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 24576+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		r011r012r013s13r012re13s13re13s13s12re12re13s13re13s13s12re13s13s12r111re12re13s13re13s13r112r014r114r113r112r111s9(65024, 25600);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 25600+    0, 64512+  512,   256);
		re12r014r114r113s11s10s9s8(65024, 25856);
		API_polar::template xo <  256>(s,    25600+    0, 25600+  256,              25600+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 25600+    0, 63488+ 1024,   512);
		r013s13s12s11s10s9s8s7(64512, 26112);
		API_polar::template xo <  512>(s,    25600+    0, 25600+  512,              25600+    0,   512);
		API_polar::template xo < 1024>(s,    24576+    0, 24576+ 1024,              24576+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048, 24576+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re11re12re13s13re12re13s13re13s13r112(65408, 26624);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 26624+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		re12re13r113(65504, 26688);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 26688+    0, 65472+   32,    16);
		s11(65504, 26704);
		API_polar::template xo <   16>(s,    26688+    0, 26688+   16,              26688+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 26688+    0, 65408+   64,    32);
		s10(65472, 26720);
		API_polar::template xo <   32>(s,    26688+    0, 26688+   32,              26688+    0,    32);
		API_polar::template xo <   64>(s,    26624+    0, 26624+   64,              26624+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 26624+    0, 65024+  256,   128);
		r013r014r114s12s11s10s9(65280, 26752);
		API_polar::template xo <  128>(s,    26624+    0, 26624+  128,              26624+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 26624+    0, 64512+  512,   256);
		re13s13s12s11s10s9s8(65024, 26880);
		API_polar::template xo <  256>(s,    26624+    0, 26624+  256,              26624+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 26624+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re13s13s12s11s10s9s8(65024, 27136);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 27136+    0, 64512+  512,   256);
		s7(65024, 27392);
		API_polar::template xo <  256>(s,    27136+    0, 27136+  256,              27136+    0,   256);
		API_polar::template xo <  512>(s,    26624+    0, 26624+  512,              26624+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 26624+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re13s13s12s11s10s9r18(65024, 27648);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 27648+    0, 64512+  512,   256);
		r17(65024, 27904);
		API_polar::template xo <  256>(s,    27648+    0, 27648+  256,              27648+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 27648+    0, 63488+ 1024,   512);
		r16(64512, 28160);
		API_polar::template xo <  512>(s,    27648+    0, 27648+  512,              27648+    0,   512);
		API_polar::template xo < 1024>(s,    26624+    0, 26624+ 1024,              26624+    0,  1024);
		API_polar::template xo < 2048>(s,    24576+    0, 24576+ 2048,              24576+    0,  2048);
		API_polar::template g  < 4096>(s, l, 49152+    0, 49152+ 4096, 24576+    0, 49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re11re12re13r113r013r014r114s12s11re13s13s12s11s10re13s13s12s11s10s9(65024, 28672);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 28672+    0, 64512+  512,   256);
		re13s13s12s11s10s9r18(65024, 28928);
		API_polar::template xo <  256>(s,    28672+    0, 28672+  256,              28672+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 28672+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		re13s13s12s11r110(65408, 29184);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 29184+    0, 65280+  128,    64);
		r19(65408, 29248);
		API_polar::template xo <   64>(s,    29184+    0, 29184+   64,              29184+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 29184+    0, 65024+  256,   128);
		r18(65280, 29312);
		API_polar::template xo <  128>(s,    29184+    0, 29184+  128,              29184+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 29184+    0, 64512+  512,   256);
		r17(65024, 29440);
		API_polar::template xo <  256>(s,    29184+    0, 29184+  256,              29184+    0,   256);
		API_polar::template xo <  512>(s,    28672+    0, 28672+  512,              28672+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 28672+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		re13s13r112r111r110r19(65280, 29696);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 29696+    0, 65024+  256,   128);
		r18(65280, 29824);
		API_polar::template xo <  128>(s,    29696+    0, 29696+  128,              29696+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 29696+    0, 64512+  512,   256);
		r17(65024, 29952);
		API_polar::template xo <  256>(s,    29696+    0, 29696+  256,              29696+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 29696+    0, 63488+ 1024,   512);
		r16(64512, 30208);
		API_polar::template xo <  512>(s,    29696+    0, 29696+  512,              29696+    0,   512);
		API_polar::template xo < 1024>(s,    28672+    0, 28672+ 1024,              28672+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048, 28672+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		re13r113r112r111r110r19r18(65024, 30720);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 30720+    0, 64512+  512,   256);
		r17(65024, 30976);
		API_polar::template xo <  256>(s,    30720+    0, 30720+  256,              30720+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 30720+    0, 63488+ 1024,   512);
		r16(64512, 31232);
		API_polar::template xo <  512>(s,    30720+    0, 30720+  512,              30720+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 30720+    0, 61440+ 2048,  1024);
		API_polar::template h  < 1024>(s, l, 63488+    0,                           31744+    0,  1024);
		API_polar::template xo < 1024>(s,    30720+    0, 30720+ 1024,              30720+    0,  1024);
		API_polar::template xo < 2048>(s,    28672+    0, 28672+ 2048,              28672+    0,  2048);
		API_polar::template xo < 4096>(s,    24576+    0, 24576+ 4096,              24576+    0,  4096);
		API_polar::template xo < 8192>(s,    16384+    0, 16384+ 8192,              16384+    0,  8192);
		API_polar::template xo <16384>(s,        0+    0,     0+16384,                  0+    0, 16384);
	}
};
}
}
#endif
