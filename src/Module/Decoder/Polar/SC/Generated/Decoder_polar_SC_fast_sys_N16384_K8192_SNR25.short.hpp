#ifndef DECODER_POLAR_SC_FAST_SYS_N16384_K8192_SNR25_HPP_
#define DECODER_POLAR_SC_FAST_SYS_N16384_K8192_SNR25_HPP_

#include <cassert>

#include "../Decoder_polar_SC_fast_sys.hpp"

namespace aff3ct
{
namespace module
{
static const char Frozen_bits_16384_8192_25[16384] = {
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

template <typename B, typename R, class API_polar>
class Decoder_polar_SC_fast_sys_N16384_K8192_SNR25 : public Decoder_polar_SC_fast_sys<B, R, API_polar>
{
public:
	Decoder_polar_SC_fast_sys_N16384_K8192_SNR25(const int& K, const int& N, const mipp::vector<B>& frozen_bits, const int n_frames = 1)
	: Decoder_polar_SC_fast_sys<B, R, API_polar>(K, N, frozen_bits, n_frames)
	{
		assert(N == 16384);
		assert(K == 8192);
		
		auto i = 0;
		while (i < 16384 && Frozen_bits_16384_8192_25[i] == frozen_bits[i]) i++;
		assert(i == 16384);
	}

	virtual ~Decoder_polar_SC_fast_sys_N16384_K8192_SNR25()
	{
	}

	// depth = 5, reverse depth = 9, size = 512, calls = 2
	inline void r05(const int off_l, const int off_s)
	{
	}

	// depth = 6, reverse depth = 8, size = 256, calls = 2
	inline void r06(const int off_l, const int off_s)
	{
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 3
	inline void re7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep< 128>(s, l, off_l+    0,                           off_s+    0,  128);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 7
	inline void re8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 15
	inline void re9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 22
	__attribute__((always_inline))
	inline void r011(const int off_l, const int off_s)
	{
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 154
	__attribute__((always_inline))
	inline void re12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 162
	__attribute__((always_inline))
	inline void s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 147
	__attribute__((always_inline))
	inline void re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		re12(off_l+8, off_s+0);
		API_polar::template gr <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		s12(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 11
	inline void r011re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re12s12(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 89
	__attribute__((always_inline))
	inline void s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 75
	inline void re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re12s12(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 7
	inline void r011re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011re12s12(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re12s12s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re9r011re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re9(off_l+64, off_s+0);
		API_polar::template gr <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r011re12s12re12s12s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 7
	inline void r08(const int off_l, const int off_s)
	{
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 11
	inline void r09(const int off_l, const int off_s)
	{
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 16
	inline void r010(const int off_l, const int off_s)
	{
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 23
	__attribute__((always_inline))
	inline void r012(const int off_l, const int off_s)
	{
	}

	// depth = 13, reverse depth = 1, size = 2, calls = 20
	__attribute__((always_inline))
	inline void r013(const int off_l, const int off_s)
	{
	}

	// depth = 13, reverse depth = 1, size = 2, calls = 20
	__attribute__((always_inline))
	inline void r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   2>(s, l, off_l+    0,                           off_s+    0,    2);
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 20
	__attribute__((always_inline))
	inline void r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r013(off_l+4, off_s+0);
		API_polar::template g0 <   2>(   l, off_l+    0, off_l+    2,              off_l+    4,    2);
		r113(off_l+4, off_s+2);
		API_polar::template xo0<   2>(s,    off_s+    2,                           off_s+    0,    2);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 8
	__attribute__((always_inline))
	inline void r012r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r012(off_l+8, off_s+0);
		API_polar::template g0 <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		r013r113(off_l+8, off_s+4);
		API_polar::template xo0<   4>(s,    off_s+    4,                           off_s+    0,    4);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 5
	inline void r011r012r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012r013r113(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void r010r011r012r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011r012r013r113(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void r09r010r011r012r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+64, off_s+0);
		API_polar::template g0 <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r010r011r012r013r113(off_l+64, off_s+32);
		API_polar::template xo0<  32>(s,    off_s+   32,                           off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r08r09r010r011r012r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r08(off_l+128, off_s+0);
		API_polar::template g0 <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		r09r010r011r012r013r113(off_l+128, off_s+64);
		API_polar::template xo0<  64>(s,    off_s+   64,                           off_s+    0,   64);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 65
	__attribute__((always_inline))
	inline void re11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 55
	inline void re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		re12s12(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 6
	inline void r010re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11re12s12(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void r09r010re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+64, off_s+0);
		API_polar::template g0 <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r010re11re12s12(off_l+64, off_s+32);
		API_polar::template xo0<  32>(s,    off_s+   32,                           off_s+    0,   32);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 29
	inline void re10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 17
	inline void re10re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11re12s12(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 17
	__attribute__((always_inline))
	inline void r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 6
	inline void re12s12r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re12s12(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r111(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void re11re12s12re12s12r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11re12s12(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re12s12r111(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void re10re11re12s12re11re12s12re12s12r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11re12s12(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11re12s12re12s12r111(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r09r010re11re12s12re10re11re12s12re11re12s12re12s12r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		r09r010re11re12s12(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re10re11re12s12re11re12s12re12s12r111(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 6, reverse depth = 8, size = 256, calls = 2
	inline void r08r09r010r011r012r013r113r09r010re11re12s12re10re11re12s12re11re12s12re12s12r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  < 128>(   l, off_l+    0, off_l+  128,              off_l+  256,  128);
		r08r09r010r011r012r013r113(off_l+256, off_s+0);
		API_polar::template g  < 128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,  128);
		r09r010re11re12s12re10re11re12s12re11re12s12re12s12r111(off_l+256, off_s+128);
		API_polar::template xo < 128>(s,    off_s+    0, off_s+  128,              off_s+    0,  128);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 4
	inline void r07(const int off_l, const int off_s)
	{
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 4
	inline void r010r011re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011re12s12(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void r09r010r011re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+64, off_s+0);
		API_polar::template g0 <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r010r011re12s12(off_l+64, off_s+32);
		API_polar::template xo0<  32>(s,    off_s+   32,                           off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void r09re10re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+64, off_s+0);
		API_polar::template g0 <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11re12s12(off_l+64, off_s+32);
		API_polar::template xo0<  32>(s,    off_s+   32,                           off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r08r09re10re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r08(off_l+128, off_s+0);
		API_polar::template g0 <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		r09re10re11re12s12(off_l+128, off_s+64);
		API_polar::template xo0<  64>(s,    off_s+   64,                           off_s+    0,   64);
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 19
	__attribute__((always_inline))
	inline void r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 7
	__attribute__((always_inline))
	inline void re12r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		re12(off_l+8, off_s+0);
		API_polar::template gr <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		r112(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 2
	inline void re11re12r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		re12r112(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 46
	inline void s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 35
	inline void re12s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re12s12s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 15
	__attribute__((always_inline))
	inline void r012s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r012(off_l+8, off_s+0);
		API_polar::template g0 <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		s12(off_l+8, off_s+4);
		API_polar::template xo0<   4>(s,    off_s+    4,                           off_s+    0,    4);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 9
	inline void r012s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012s12(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 4
	inline void re10r012s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r012s12s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re9re10r012s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re9(off_l+64, off_s+0);
		API_polar::template gr <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re10r012s12s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 23
	inline void re11re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11re12s12(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re12s12s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 7
	inline void re11re12s12re12s12s11re12s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re12s12s11s10(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 4
	inline void r010re11re12s12re11re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r010re11re12s12(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 5
	inline void re12r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re12r112(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r111(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 12
	inline void r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 4
	inline void re12r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re12r112r111(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r110(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void re11re12s12re12s12s11re12r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re12r112r111r110(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r010re11re12s12re11re12s12re12s12s11re11re12s12re12s12s11re12r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		r010re11re12s12re11re12s12re12s12s11(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re11re12s12re12s12s11re12r112r111r110(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 12
	__attribute__((always_inline))
	inline void r013r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		r013r113(off_l+8, off_s+0);
		API_polar::template g  <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		r112(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 6
	inline void r013r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r013r113r112(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r111(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 5
	inline void re11re12s12r013r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11re12s12(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r013r113r112r111(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 28
	inline void s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void re11re12s12r013r113r112r111s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11re12s12r013r113r112r111(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 16
	inline void s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void re11re12s12r013r113r112r111s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re11re12s12r013r113r112r111s9(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		s8(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 4
	inline void re9re10re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re9(off_l+64, off_s+0);
		API_polar::template gr <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re10re11re12s12(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r08re9re10re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r08(off_l+128, off_s+0);
		API_polar::template g0 <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re9re10re11re12s12(off_l+128, off_s+64);
		API_polar::template xo0<  64>(s,    off_s+   64,                           off_s+    0,   64);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void r011r012r013r113re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011r012r013r113(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re12s12s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 4
	inline void r011re12s12re12s12s11re12s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r011re12s12re12s12s11(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re12s12s11s10(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 3
	inline void r012r013r113s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012r013r113(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void re10r012r013r113s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r012r013r113s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 6
	inline void r011r012s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012s12(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void r010r011r012s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011r012s12(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void r010r011r012s12re11re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r010r011r012s12(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void re8r010r011r012s12re11re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re8(off_l+128, off_s+0);
		API_polar::template gr <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		r010r011r012s12re11re12s12re12s12s11(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void re10re11re12s12re11re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11re12s12(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r09r010r011re12s12re10re11re12s12re11re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		r09r010r011re12s12(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re10re11re12s12re11re12s12re12s12s11(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 5
	inline void r012s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r012s12s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void r012s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r012s12s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 17
	inline void re12s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re12s12s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 9
	inline void re12s12s11s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re12s12s11s10s9(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		s8(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re10re11re12s12re11re12s12r013r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11re12s12(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11re12s12r013r113r112r111(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 6
	inline void re11r013r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r013r113r112(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 4
	inline void re10re11r013r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11r013r113r112(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re10re11r013r113r112r012s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11r013r113r112(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r012s12s11s10(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re10r012s12s11re12s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10r012s12s11(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re12s12s11s10(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r011re12s12re12s12s11re12s12s11s10re12s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		r011re12s12re12s12s11re12s12s11s10(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re12s12s11s10s9(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void re11re12s12re12s12s11re12s12s11s10re12s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re12s12s11s10s9(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 4
	inline void re12s12s11r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re12s12s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r110(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 7
	inline void r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re12s12s11r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re12s12s11r110(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r19(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 4
	inline void r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void r011r012s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011r012s12(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re12s12s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re9r011r012s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re9(off_l+64, off_s+0);
		API_polar::template gr <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r011r012s12re12s12s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 8
	inline void s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 128>(s, l, off_l+    0,                           off_s+    0,  128);
	}

	// depth = 6, reverse depth = 8, size = 256, calls = 2
	inline void s6(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 256>(s, l, off_l+    0,                           off_s+    0,  256);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re9re10re11r013r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re9(off_l+64, off_s+0);
		API_polar::template gr <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re10re11r013r113r112(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re11re12s12re12s12s11re12s12s11r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re12s12s11r110(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void re12s12r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re12s12r111(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r110(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re12s12r111r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re12s12r111r110(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r19(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 2
	inline void re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re11s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void re11s11s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re11s11s10s9(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		s8(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void re11r013r113r112s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11r013r113r112(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 6, reverse depth = 8, size = 256, calls = 4
	inline void re12s12s11s10s9s8s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  < 128>(   l, off_l+    0, off_l+  128,              off_l+  256,  128);
		re12s12s11s10s9s8(off_l+256, off_s+0);
		API_polar::template g  < 128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,  128);
		s7(off_l+256, off_s+128);
		API_polar::template xo < 128>(s,    off_s+    0, off_s+  128,              off_s+    0,  128);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 4
	inline void r17(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  < 128>(s, l, off_l+    0,                           off_s+    0,  128);
	}

	// depth = 6, reverse depth = 8, size = 256, calls = 3
	inline void r16(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  < 256>(s, l, off_l+    0,                           off_s+    0,  256);
	}

	void decode()
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <8192>(   l,     0+    0,     0+ 8192,                  0+16384, 8192);
		API_polar::template f  <4096>(   l, 16384+    0, 16384+ 4096,              16384+ 8192, 4096);
		API_polar::template f  <2048>(   l, 24576+    0, 24576+ 2048,              24576+ 4096, 2048);
		API_polar::template g0 <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		r05(31744, 1024);
		API_polar::template g0 < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		r06(32256, 1536);
		API_polar::template g0 < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re7(32512, 1792);
		API_polar::template gr < 128>(s, l, 32256+    0, 32256+  128,  1792+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re8(32640, 1920);
		API_polar::template gr <  64>(s, l, 32512+    0, 32512+   64,  1920+    0, 32512+  128,   64);
		re9r011re12s12re12s12s11(32640, 1984);
		API_polar::template xo <  64>(s,     1920+    0,  1920+   64,               1920+    0,   64);
		API_polar::template xo < 128>(s,     1792+    0,  1792+  128,               1792+    0,  128);
		API_polar::template xo0< 256>(s,     1536+  256,                            1536+    0,  256);
		API_polar::template xo0< 512>(s,     1024+  512,                            1024+    0,  512);
		API_polar::template xo0<1024>(s,        0+ 1024,                               0+    0, 1024);
		API_polar::template g  <2048>(s, l, 24576+    0, 24576+ 2048,     0+    0, 24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		r05(31744, 2048);
		API_polar::template g0 < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template rep< 256>(s, l, 32256+    0,                            2560+    0,  256);
		API_polar::template gr < 256>(s, l, 31744+    0, 31744+  256,  2560+    0, 31744+  512,  256);
		r08r09r010r011r012r013r113r09r010re11re12s12re10re11re12s12re11re12s12re12s12r111(32256, 2816);
		API_polar::template xo < 256>(s,     2560+    0,  2560+  256,               2560+    0,  256);
		API_polar::template xo0< 512>(s,     2048+  512,                            2048+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024,  2048+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		r07(32512, 3072);
		API_polar::template g0 < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r08(32640, 3200);
		API_polar::template g0 <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r09r010r011re12s12(32640, 3264);
		API_polar::template xo0<  64>(s,     3200+   64,                            3200+    0,   64);
		API_polar::template xo0< 128>(s,     3072+  128,                            3072+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  3072+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r08r09re10re11re12s12(32512, 3328);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  3328+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re9(32704, 3456);
		API_polar::template gr <  32>(s, l, 32640+    0, 32640+   32,  3456+    0, 32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		re10(32736, 3488);
		API_polar::template gr <  16>(s, l, 32704+    0, 32704+   16,  3488+    0, 32704+   32,   16);
		re11re12r112(32736, 3504);
		API_polar::template xo <  16>(s,     3488+    0,  3488+   16,               3488+    0,   16);
		API_polar::template xo <  32>(s,     3456+    0,  3456+   32,               3456+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  3456+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		re10(32736, 3520);
		API_polar::template gr <  16>(s, l, 32704+    0, 32704+   16,  3520+    0, 32704+   32,   16);
		re12s12s11(32736, 3536);
		API_polar::template xo <  16>(s,     3520+    0,  3520+   16,               3520+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  3520+    0, 32640+   64,   32);
		re12s12s11s10(32704, 3552);
		API_polar::template xo <  32>(s,     3520+    0,  3520+   32,               3520+    0,   32);
		API_polar::template xo <  64>(s,     3456+    0,  3456+   64,               3456+    0,   64);
		API_polar::template xo < 128>(s,     3328+    0,  3328+  128,               3328+    0,  128);
		API_polar::template xo < 256>(s,     3072+    0,  3072+  256,               3072+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  3072+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re8(32640, 3584);
		API_polar::template gr <  64>(s, l, 32512+    0, 32512+   64,  3584+    0, 32512+  128,   64);
		re9re10r012s12s11(32640, 3648);
		API_polar::template xo <  64>(s,     3584+    0,  3584+   64,               3584+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  3584+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		r010r011r012r013r113(32704, 3712);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  3712+    0, 32640+   64,   32);
		r011re12s12re12s12s11(32704, 3744);
		API_polar::template xo <  32>(s,     3712+    0,  3712+   32,               3712+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  3712+    0, 32512+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(32640, 3776);
		API_polar::template xo <  64>(s,     3712+    0,  3712+   64,               3712+    0,   64);
		API_polar::template xo < 128>(s,     3584+    0,  3584+  128,               3584+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  3584+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r010re11re12s12re11re12s12re12s12s11re11re12s12re12s12s11re12r112r111r110(32512, 3840);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  3840+    0, 32256+  256,  128);
		re11re12s12r013r113r112r111s9s8(32512, 3968);
		API_polar::template xo < 128>(s,     3840+    0,  3840+  128,               3840+    0,  128);
		API_polar::template xo < 256>(s,     3584+    0,  3584+  256,               3584+    0,  256);
		API_polar::template xo < 512>(s,     3072+    0,  3072+  512,               3072+    0,  512);
		API_polar::template xo <1024>(s,     2048+    0,  2048+ 1024,               2048+    0, 1024);
		API_polar::template xo <2048>(s,        0+    0,     0+ 2048,                  0+    0, 2048);
		API_polar::template g  <4096>(s, l, 16384+    0, 16384+ 4096,     0+    0, 16384+ 8192, 4096);
		API_polar::template f  <2048>(   l, 24576+    0, 24576+ 2048,              24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template rep< 512>(s, l, 31744+    0,                            4096+    0,  512);
		API_polar::template gr < 512>(s, l, 30720+    0, 30720+  512,  4096+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		r07(32512, 4608);
		API_polar::template g0 < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r08r09re10re11re12s12(32512, 4736);
		API_polar::template xo0< 128>(s,     4608+  128,                            4608+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  4608+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r08re9re10re11re12s12(32512, 4864);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  4864+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re9(32704, 4992);
		API_polar::template gr <  32>(s, l, 32640+    0, 32640+   32,  4992+    0, 32640+   64,   32);
		r011r012r013r113re12s12s11(32704, 5024);
		API_polar::template xo <  32>(s,     4992+    0,  4992+   32,               4992+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  4992+    0, 32512+  128,   64);
		r011re12s12re12s12s11re12s12s11s10(32640, 5056);
		API_polar::template xo <  64>(s,     4992+    0,  4992+   64,               4992+    0,   64);
		API_polar::template xo < 128>(s,     4864+    0,  4864+  128,               4864+    0,  128);
		API_polar::template xo < 256>(s,     4608+    0,  4608+  256,               4608+    0,  256);
		API_polar::template xo < 512>(s,     4096+    0,  4096+  512,               4096+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024,  4096+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		r07(32512, 5120);
		API_polar::template g0 < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re8(32640, 5248);
		API_polar::template gr <  64>(s, l, 32512+    0, 32512+   64,  5248+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re9(32704, 5312);
		API_polar::template gr <  32>(s, l, 32640+    0, 32640+   32,  5312+    0, 32640+   64,   32);
		re10r012r013r113s11(32704, 5344);
		API_polar::template xo <  32>(s,     5312+    0,  5312+   32,               5312+    0,   32);
		API_polar::template xo <  64>(s,     5248+    0,  5248+   64,               5248+    0,   64);
		API_polar::template xo0< 128>(s,     5120+  128,                            5120+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  5120+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re8r010r011r012s12re11re12s12re12s12s11(32512, 5376);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  5376+    0, 32256+  256,  128);
		r010re11re12s12re11re12s12re12s12s11re11re12s12re12s12s11re12r112r111r110(32512, 5504);
		API_polar::template xo < 128>(s,     5376+    0,  5376+  128,               5376+    0,  128);
		API_polar::template xo < 256>(s,     5120+    0,  5120+  256,               5120+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  5120+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r09r010r011re12s12re10re11re12s12re11re12s12re12s12s11(32512, 5632);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  5632+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re10re11re12s12(32704, 5760);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  5760+    0, 32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		re11re12r112(32736, 5792);
		API_polar::template g  <  16>(s, l, 32704+    0, 32704+   16,  5792+    0, 32704+   32,   16);
		s10(32736, 5808);
		API_polar::template xo <  16>(s,     5792+    0,  5792+   16,               5792+    0,   16);
		API_polar::template xo <  32>(s,     5760+    0,  5760+   32,               5760+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  5760+    0, 32512+  128,   64);
		r012s12s11s10s9(32640, 5824);
		API_polar::template xo <  64>(s,     5760+    0,  5760+   64,               5760+    0,   64);
		API_polar::template xo < 128>(s,     5632+    0,  5632+  128,               5632+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  5632+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re10r012r013r113s11(32704, 5888);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  5888+    0, 32640+   64,   32);
		re12s12s11s10(32704, 5920);
		API_polar::template xo <  32>(s,     5888+    0,  5888+   32,               5888+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  5888+    0, 32512+  128,   64);
		re12s12s11s10s9(32640, 5952);
		API_polar::template xo <  64>(s,     5888+    0,  5888+   64,               5888+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  5888+    0, 32256+  256,  128);
		re12s12s11s10s9s8(32512, 6016);
		API_polar::template xo < 128>(s,     5888+    0,  5888+  128,               5888+    0,  128);
		API_polar::template xo < 256>(s,     5632+    0,  5632+  256,               5632+    0,  256);
		API_polar::template xo < 512>(s,     5120+    0,  5120+  512,               5120+    0,  512);
		API_polar::template xo <1024>(s,     4096+    0,  4096+ 1024,               4096+    0, 1024);
		API_polar::template g  <2048>(s, l, 24576+    0, 24576+ 2048,  4096+    0, 24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re7(32512, 6144);
		API_polar::template gr < 128>(s, l, 32256+    0, 32256+  128,  6144+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r09(32704, 6272);
		API_polar::template g0 <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		r010r011r012s12(32704, 6304);
		API_polar::template xo0<  32>(s,     6272+   32,                            6272+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  6272+    0, 32512+  128,   64);
		r010re11re12s12re11re12s12re12s12s11(32640, 6336);
		API_polar::template xo <  64>(s,     6272+    0,  6272+   64,               6272+    0,   64);
		API_polar::template xo < 128>(s,     6144+    0,  6144+  128,               6144+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  6144+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r09re10re11re12s12(32640, 6400);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  6400+    0, 32512+  128,   64);
		re10re11re12s12re11re12s12r013r113r112r111(32640, 6464);
		API_polar::template xo <  64>(s,     6400+    0,  6400+   64,               6400+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  6400+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re10re11r013r113r112r012s12s11s10(32640, 6528);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  6528+    0, 32512+  128,   64);
		re12s12s11s10s9(32640, 6592);
		API_polar::template xo <  64>(s,     6528+    0,  6528+   64,               6528+    0,   64);
		API_polar::template xo < 128>(s,     6400+    0,  6400+  128,               6400+    0,  128);
		API_polar::template xo < 256>(s,     6144+    0,  6144+  256,               6144+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  6144+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re9re10re11re12s12(32640, 6656);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  6656+    0, 32512+  128,   64);
		re10r012s12s11re12s12s11s10(32640, 6720);
		API_polar::template xo <  64>(s,     6656+    0,  6656+   64,               6656+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  6656+    0, 32256+  256,  128);
		r011re12s12re12s12s11re12s12s11s10re12s12s11s10s9(32512, 6784);
		API_polar::template xo < 128>(s,     6656+    0,  6656+  128,               6656+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  6656+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re11re12s12re12s12s11re12s12s11s10re12s12s11s10s9(32512, 6912);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  6912+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re12s12s11r110r19(32640, 7040);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  7040+    0, 32512+  128,   64);
		r18(32640, 7104);
		API_polar::template xo <  64>(s,     7040+    0,  7040+   64,               7040+    0,   64);
		API_polar::template xo < 128>(s,     6912+    0,  6912+  128,               6912+    0,  128);
		API_polar::template xo < 256>(s,     6656+    0,  6656+  256,               6656+    0,  256);
		API_polar::template xo < 512>(s,     6144+    0,  6144+  512,               6144+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024,  6144+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re9r011r012s12re12s12s11(32640, 7168);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  7168+    0, 32512+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(32640, 7232);
		API_polar::template xo <  64>(s,     7168+    0,  7168+   64,               7168+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  7168+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(32640, 7296);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  7296+    0, 32512+  128,   64);
		re12s12s11r110r19(32640, 7360);
		API_polar::template xo <  64>(s,     7296+    0,  7296+   64,               7296+    0,   64);
		API_polar::template xo < 128>(s,     7168+    0,  7168+  128,               7168+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  7168+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re11re12s12re12s12s11re12r112r111r110(32640, 7424);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  7424+    0, 32512+  128,   64);
		s8(32640, 7488);
		API_polar::template xo <  64>(s,     7424+    0,  7424+   64,               7424+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  7424+    0, 32256+  256,  128);
		s7(32512, 7552);
		API_polar::template xo < 128>(s,     7424+    0,  7424+  128,               7424+    0,  128);
		API_polar::template xo < 256>(s,     7168+    0,  7168+  256,               7168+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  7168+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re11re12s12r013r113r112r111s9s8(32512, 7680);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  7680+    0, 32256+  256,  128);
		s7(32512, 7808);
		API_polar::template xo < 128>(s,     7680+    0,  7680+  128,               7680+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  7680+    0, 31744+  512,  256);
		s6(32256, 7936);
		API_polar::template xo < 256>(s,     7680+    0,  7680+  256,               7680+    0,  256);
		API_polar::template xo < 512>(s,     7168+    0,  7168+  512,               7168+    0,  512);
		API_polar::template xo <1024>(s,     6144+    0,  6144+ 1024,               6144+    0, 1024);
		API_polar::template xo <2048>(s,     4096+    0,  4096+ 2048,               4096+    0, 2048);
		API_polar::template xo <4096>(s,        0+    0,     0+ 4096,                  0+    0, 4096);
		API_polar::template g  <8192>(s, l,     0+    0,     0+ 8192,     0+    0,     0+16384, 8192);
		API_polar::template f  <4096>(   l, 16384+    0, 16384+ 4096,              16384+ 8192, 4096);
		API_polar::template f  <2048>(   l, 24576+    0, 24576+ 2048,              24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		r06(32256, 8192);
		API_polar::template g0 < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		r07(32512, 8448);
		API_polar::template g0 < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re8(32640, 8576);
		API_polar::template gr <  64>(s, l, 32512+    0, 32512+   64,  8576+    0, 32512+  128,   64);
		re9re10re11r013r113r112(32640, 8640);
		API_polar::template xo <  64>(s,     8576+    0,  8576+   64,               8576+    0,   64);
		API_polar::template xo0< 128>(s,     8448+  128,                            8448+    0,  128);
		API_polar::template xo0< 256>(s,     8192+  256,                            8192+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  8192+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re7(32512, 8704);
		API_polar::template gr < 128>(s, l, 32256+    0, 32256+  128,  8704+    0, 32256+  256,  128);
		re8r010r011r012s12re11re12s12re12s12s11(32512, 8832);
		API_polar::template xo < 128>(s,     8704+    0,  8704+  128,               8704+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  8704+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r09r010r011re12s12re10re11re12s12re11re12s12re12s12s11(32512, 8960);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  8960+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re10re11re12s12re11re12s12r013r113r112r111(32640, 9088);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  9088+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		r012r013r113s11(32736, 9152);
		API_polar::template g  <  16>(s, l, 32704+    0, 32704+   16,  9152+    0, 32704+   32,   16);
		s10(32736, 9168);
		API_polar::template xo <  16>(s,     9152+    0,  9152+   16,               9152+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  9152+    0, 32640+   64,   32);
		s9(32704, 9184);
		API_polar::template xo <  32>(s,     9152+    0,  9152+   32,               9152+    0,   32);
		API_polar::template xo <  64>(s,     9088+    0,  9088+   64,               9088+    0,   64);
		API_polar::template xo < 128>(s,     8960+    0,  8960+  128,               8960+    0,  128);
		API_polar::template xo < 256>(s,     8704+    0,  8704+  256,               8704+    0,  256);
		API_polar::template xo < 512>(s,     8192+    0,  8192+  512,               8192+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024,  8192+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		r08r09r010r011r012r013r113r09r010re11re12s12re10re11re12s12re11re12s12re12s12r111(32256, 9216);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  9216+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re9re10re11re12s12(32640, 9472);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  9472+    0, 32512+  128,   64);
		re10re11r013r113r112r012s12s11s10(32640, 9536);
		API_polar::template xo <  64>(s,     9472+    0,  9472+   64,               9472+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  9472+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		r011r012s12re12s12s11(32704, 9600);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  9600+    0, 32640+   64,   32);
		re12s12s11s10(32704, 9632);
		API_polar::template xo <  32>(s,     9600+    0,  9600+   32,               9600+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  9600+    0, 32512+  128,   64);
		re12s12s11s10s9(32640, 9664);
		API_polar::template xo <  64>(s,     9600+    0,  9600+   64,               9600+    0,   64);
		API_polar::template xo < 128>(s,     9472+    0,  9472+  128,               9472+    0,  128);
		API_polar::template xo < 256>(s,     9216+    0,  9216+  256,               9216+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  9216+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re9re10r012s12s11(32640, 9728);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  9728+    0, 32512+  128,   64);
		r011re12s12re12s12s11re12s12s11s10(32640, 9792);
		API_polar::template xo <  64>(s,     9728+    0,  9728+   64,               9728+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  9728+    0, 32256+  256,  128);
		re11re12s12re12s12s11re12s12s11s10re12s12s11s10s9(32512, 9856);
		API_polar::template xo < 128>(s,     9728+    0,  9728+  128,               9728+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  9728+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re11re12s12re12s12s11re12s12s11r110(32640, 9984);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  9984+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re12r112r111r110(32704, 10048);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 10048+    0, 32640+   64,   32);
		r19(32704, 10080);
		API_polar::template xo <  32>(s,    10048+    0, 10048+   32,              10048+    0,   32);
		API_polar::template xo <  64>(s,     9984+    0,  9984+   64,               9984+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  9984+    0, 32256+  256,  128);
		s7(32512, 10112);
		API_polar::template xo < 128>(s,     9984+    0,  9984+  128,               9984+    0,  128);
		API_polar::template xo < 256>(s,     9728+    0,  9728+  256,               9728+    0,  256);
		API_polar::template xo < 512>(s,     9216+    0,  9216+  512,               9216+    0,  512);
		API_polar::template xo <1024>(s,     8192+    0,  8192+ 1024,               8192+    0, 1024);
		API_polar::template g  <2048>(s, l, 24576+    0, 24576+ 2048,  8192+    0, 24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r08re9re10re11re12s12(32512, 10240);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 10240+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re9re10re11r013r113r112(32640, 10368);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 10368+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		r011r012r013r113re12s12s11(32704, 10432);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 10432+    0, 32640+   64,   32);
		re12s12s11s10(32704, 10464);
		API_polar::template xo <  32>(s,    10432+    0, 10432+   32,              10432+    0,   32);
		API_polar::template xo <  64>(s,    10368+    0, 10368+   64,              10368+    0,   64);
		API_polar::template xo < 128>(s,    10240+    0, 10240+  128,              10240+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 10240+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re9r011re12s12re12s12s11(32640, 10496);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 10496+    0, 32512+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(32640, 10560);
		API_polar::template xo <  64>(s,    10496+    0, 10496+   64,              10496+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 10496+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(32640, 10624);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 10624+    0, 32512+  128,   64);
		re12s12r111r110r19(32640, 10688);
		API_polar::template xo <  64>(s,    10624+    0, 10624+   64,              10624+    0,   64);
		API_polar::template xo < 128>(s,    10496+    0, 10496+  128,              10496+    0,  128);
		API_polar::template xo < 256>(s,    10240+    0, 10240+  256,              10240+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512, 10240+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r010re11re12s12re11re12s12re12s12s11(32640, 10752);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 10752+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re11re12s12re12s12s11(32704, 10816);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 10816+    0, 32640+   64,   32);
		re12s12r111r110(32704, 10848);
		API_polar::template xo <  32>(s,    10816+    0, 10816+   32,              10816+    0,   32);
		API_polar::template xo <  64>(s,    10752+    0, 10752+   64,              10752+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 10752+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		re11re12s12(32736, 10880);
		API_polar::template g  <  16>(s, l, 32704+    0, 32704+   16, 10880+    0, 32704+   32,   16);
		re12r112r111(32736, 10896);
		API_polar::template xo <  16>(s,    10880+    0, 10880+   16,              10880+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 10880+    0, 32640+   64,   32);
		s9(32704, 10912);
		API_polar::template xo <  32>(s,    10880+    0, 10880+   32,              10880+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 10880+    0, 32512+  128,   64);
		s8(32640, 10944);
		API_polar::template xo <  64>(s,    10880+    0, 10880+   64,              10880+    0,   64);
		API_polar::template xo < 128>(s,    10752+    0, 10752+  128,              10752+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 10752+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re11s11s10s9s8(32512, 11008);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 11008+    0, 32256+  256,  128);
		s7(32512, 11136);
		API_polar::template xo < 128>(s,    11008+    0, 11008+  128,              11008+    0,  128);
		API_polar::template xo < 256>(s,    10752+    0, 10752+  256,              10752+    0,  256);
		API_polar::template xo < 512>(s,    10240+    0, 10240+  512,              10240+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024, 10240+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re10re11re12s12re11re12s12re12s12r111(32640, 11264);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 11264+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re11r013r113r112s10(32704, 11328);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 11328+    0, 32640+   64,   32);
		s9(32704, 11360);
		API_polar::template xo <  32>(s,    11328+    0, 11328+   32,              11328+    0,   32);
		API_polar::template xo <  64>(s,    11264+    0, 11264+   64,              11264+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 11264+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r012s12s11s10s9(32640, 11392);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 11392+    0, 32512+  128,   64);
		s8(32640, 11456);
		API_polar::template xo <  64>(s,    11392+    0, 11392+   64,              11392+    0,   64);
		API_polar::template xo < 128>(s,    11264+    0, 11264+  128,              11264+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 11264+    0, 31744+  512,  256);
		re12s12s11s10s9s8s7(32256, 11520);
		API_polar::template xo < 256>(s,    11264+    0, 11264+  256,              11264+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512, 11264+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		re12s12s11s10s9s8s7(32256, 11776);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 11776+    0, 31744+  512,  256);
		s6(32256, 12032);
		API_polar::template xo < 256>(s,    11776+    0, 11776+  256,              11776+    0,  256);
		API_polar::template xo < 512>(s,    11264+    0, 11264+  512,              11264+    0,  512);
		API_polar::template xo <1024>(s,    10240+    0, 10240+ 1024,              10240+    0, 1024);
		API_polar::template xo <2048>(s,     8192+    0,  8192+ 2048,               8192+    0, 2048);
		API_polar::template g  <4096>(s, l, 16384+    0, 16384+ 4096,  8192+    0, 16384+ 8192, 4096);
		API_polar::template f  <2048>(   l, 24576+    0, 24576+ 2048,              24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re8(32640, 12288);
		API_polar::template gr <  64>(s, l, 32512+    0, 32512+   64, 12288+    0, 32512+  128,   64);
		re9r011r012s12re12s12s11(32640, 12352);
		API_polar::template xo <  64>(s,    12288+    0, 12288+   64,              12288+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 12288+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		r010r011re12s12(32704, 12416);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 12416+    0, 32640+   64,   32);
		re11re12s12re12s12s11(32704, 12448);
		API_polar::template xo <  32>(s,    12416+    0, 12416+   32,              12416+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 12416+    0, 32512+  128,   64);
		re11re12s12re12s12s11re12s12s11r110(32640, 12480);
		API_polar::template xo <  64>(s,    12416+    0, 12416+   64,              12416+    0,   64);
		API_polar::template xo < 128>(s,    12288+    0, 12288+  128,              12288+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 12288+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re10re11re12s12re11re12s12re12s12s11(32640, 12544);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 12544+    0, 32512+  128,   64);
		re11re12s12r013r113r112r111s9(32640, 12608);
		API_polar::template xo <  64>(s,    12544+    0, 12544+   64,              12544+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 12544+    0, 32256+  256,  128);
		re11s11s10s9s8(32512, 12672);
		API_polar::template xo < 128>(s,    12544+    0, 12544+  128,              12544+    0,  128);
		API_polar::template xo < 256>(s,    12288+    0, 12288+  256,              12288+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512, 12288+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re10re11re12s12(32704, 12800);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 12800+    0, 32640+   64,   32);
		re11r013r113r112s10(32704, 12832);
		API_polar::template xo <  32>(s,    12800+    0, 12800+   32,              12800+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 12800+    0, 32512+  128,   64);
		r012s12s11s10s9(32640, 12864);
		API_polar::template xo <  64>(s,    12800+    0, 12800+   64,              12800+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 12800+    0, 32256+  256,  128);
		re12s12s11s10s9s8(32512, 12928);
		API_polar::template xo < 128>(s,    12800+    0, 12800+  128,              12800+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 12800+    0, 31744+  512,  256);
		re12s12s11s10s9s8s7(32256, 13056);
		API_polar::template xo < 256>(s,    12800+    0, 12800+  256,              12800+    0,  256);
		API_polar::template xo < 512>(s,    12288+    0, 12288+  512,              12288+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024, 12288+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re10r012s12s11re12s12s11s10(32640, 13312);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 13312+    0, 32512+  128,   64);
		re12s12s11s10s9(32640, 13376);
		API_polar::template xo <  64>(s,    13312+    0, 13312+   64,              13312+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 13312+    0, 32256+  256,  128);
		re12s12s11s10s9s8(32512, 13440);
		API_polar::template xo < 128>(s,    13312+    0, 13312+  128,              13312+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 13312+    0, 31744+  512,  256);
		re12s12s11s10s9s8s7(32256, 13568);
		API_polar::template xo < 256>(s,    13312+    0, 13312+  256,              13312+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512, 13312+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re12s12s11s10s9s8(32512, 13824);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 13824+    0, 32256+  256,  128);
		r17(32512, 13952);
		API_polar::template xo < 128>(s,    13824+    0, 13824+  128,              13824+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 13824+    0, 31744+  512,  256);
		r16(32256, 14080);
		API_polar::template xo < 256>(s,    13824+    0, 13824+  256,              13824+    0,  256);
		API_polar::template xo < 512>(s,    13312+    0, 13312+  512,              13312+    0,  512);
		API_polar::template xo <1024>(s,    12288+    0, 12288+ 1024,              12288+    0, 1024);
		API_polar::template g  <2048>(s, l, 24576+    0, 24576+ 2048, 12288+    0, 24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r011re12s12re12s12s11re12s12s11s10re12s12s11s10s9(32512, 14336);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 14336+    0, 32256+  256,  128);
		re12s12s11s10s9s8(32512, 14464);
		API_polar::template xo < 128>(s,    14336+    0, 14336+  128,              14336+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 14336+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re12s12s11s10(32704, 14592);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 14592+    0, 32640+   64,   32);
		r19(32704, 14624);
		API_polar::template xo <  32>(s,    14592+    0, 14592+   32,              14592+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 14592+    0, 32512+  128,   64);
		r18(32640, 14656);
		API_polar::template xo <  64>(s,    14592+    0, 14592+   64,              14592+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 14592+    0, 32256+  256,  128);
		r17(32512, 14720);
		API_polar::template xo < 128>(s,    14592+    0, 14592+  128,              14592+    0,  128);
		API_polar::template xo < 256>(s,    14336+    0, 14336+  256,              14336+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512, 14336+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re12s12r111r110r19(32640, 14848);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 14848+    0, 32512+  128,   64);
		r18(32640, 14912);
		API_polar::template xo <  64>(s,    14848+    0, 14848+   64,              14848+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 14848+    0, 32256+  256,  128);
		r17(32512, 14976);
		API_polar::template xo < 128>(s,    14848+    0, 14848+  128,              14848+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 14848+    0, 31744+  512,  256);
		r16(32256, 15104);
		API_polar::template xo < 256>(s,    14848+    0, 14848+  256,              14848+    0,  256);
		API_polar::template xo < 512>(s,    14336+    0, 14336+  512,              14336+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024, 14336+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		r013r113r112r111(32736, 15360);
		API_polar::template g  <  16>(s, l, 32704+    0, 32704+   16, 15360+    0, 32704+   32,   16);
		r110(32736, 15376);
		API_polar::template xo <  16>(s,    15360+    0, 15360+   16,              15360+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 15360+    0, 32640+   64,   32);
		r19(32704, 15392);
		API_polar::template xo <  32>(s,    15360+    0, 15360+   32,              15360+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 15360+    0, 32512+  128,   64);
		r18(32640, 15424);
		API_polar::template xo <  64>(s,    15360+    0, 15360+   64,              15360+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 15360+    0, 32256+  256,  128);
		r17(32512, 15488);
		API_polar::template xo < 128>(s,    15360+    0, 15360+  128,              15360+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 15360+    0, 31744+  512,  256);
		r16(32256, 15616);
		API_polar::template xo < 256>(s,    15360+    0, 15360+  256,              15360+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512, 15360+    0, 30720+ 1024,  512);
		API_polar::template h  < 512>(s, l, 31744+    0,                           15872+    0,  512);
		API_polar::template xo < 512>(s,    15360+    0, 15360+  512,              15360+    0,  512);
		API_polar::template xo <1024>(s,    14336+    0, 14336+ 1024,              14336+    0, 1024);
		API_polar::template xo <2048>(s,    12288+    0, 12288+ 2048,              12288+    0, 2048);
		API_polar::template xo <4096>(s,     8192+    0,  8192+ 4096,               8192+    0, 4096);
		API_polar::template xo <8192>(s,        0+    0,     0+ 8192,                  0+    0, 8192);
	}
};
}
}
#endif
