#ifndef DECODER_POLAR_SC_FAST_SYS_N8192_K4096_SNR25_HPP_
#define DECODER_POLAR_SC_FAST_SYS_N8192_K4096_SNR25_HPP_

#include <cassert>

#include "../Decoder_polar_SC_fast_sys.hpp"

namespace aff3ct
{
namespace module
{
static const char Frozen_bits_8192_4096_25[8192] = {
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

template <typename B, typename R, class API_polar>
class Decoder_polar_SC_fast_sys_N8192_K4096_SNR25 : public Decoder_polar_SC_fast_sys<B, R, API_polar>
{
public:
	Decoder_polar_SC_fast_sys_N8192_K4096_SNR25(const int& K, const int& N, const mipp::vector<B>& frozen_bits, const int n_frames = 1)
	: Decoder_polar_SC_fast_sys<B, R, API_polar>(K, N, frozen_bits, n_frames)
	{
		assert(N == 8192);
		assert(K == 4096);
		
		auto i = 0;
		while (i < 8192 && Frozen_bits_8192_4096_25[i] == frozen_bits[i]) i++;
		assert(i == 8192);
	}

	virtual ~Decoder_polar_SC_fast_sys_N8192_K4096_SNR25()
	{
	}

	// depth = 5, reverse depth = 8, size = 256, calls = 2
	inline void r05(const int off_l, const int off_s)
	{
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 3
	inline void r06(const int off_l, const int off_s)
	{
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 4
	inline void r07(const int off_l, const int off_s)
	{
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 10
	inline void re8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 17
	inline void re9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 36
	__attribute__((always_inline))
	inline void re10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 81
	__attribute__((always_inline))
	inline void re11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 83
	__attribute__((always_inline))
	inline void s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 75
	__attribute__((always_inline))
	inline void re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		re11(off_l+8, off_s+0);
		API_polar::template gr <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		s11(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 30
	inline void re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re10(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		re11s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 11
	inline void re9re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re9(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re10re11s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 4
	inline void re8re9re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re8(off_l+64, off_s+0);
		API_polar::template gr <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re9re10re11s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 2
	inline void r07re8re9re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r07(off_l+128, off_s+0);
		API_polar::template g0 <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re8re9re10re11s11(off_l+128, off_s+64);
		API_polar::template xo0<  64>(s,    off_s+   64,                           off_s+    0,   64);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 3
	inline void re7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 11
	__attribute__((always_inline))
	inline void r010(const int off_l, const int off_s)
	{
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 15
	__attribute__((always_inline))
	inline void r011(const int off_l, const int off_s)
	{
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 8
	__attribute__((always_inline))
	inline void r011s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+8, off_s+0);
		API_polar::template g0 <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		s11(off_l+8, off_s+4);
		API_polar::template xo0<   4>(s,    off_s+    4,                           off_s+    0,    4);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 4
	inline void r010r011s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r011s11(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 46
	__attribute__((always_inline))
	inline void s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 36
	inline void re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11s11(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s10(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void r010r011s11re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r010r011s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11s11s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re8r010r011s11re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re8(off_l+64, off_s+0);
		API_polar::template gr <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r010r011s11re11s11s10(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 2
	inline void re7re8r010r011s11re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re7(off_l+128, off_s+0);
		API_polar::template gr <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re8r010r011s11re11s11s10(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 2
	inline void re6(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep< 128>(s, l, off_l+    0,                           off_s+    0,  128);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 6
	inline void r08(const int off_l, const int off_s)
	{
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 8
	inline void r09(const int off_l, const int off_s)
	{
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 5
	inline void r09re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10re11s11(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 9
	inline void re10re11s11re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10re11s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11s11s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 3
	inline void r09re10re11s11re10re11s11re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r09re10re11s11(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re10re11s11re11s11s10(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void r08re9re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r08(off_l+64, off_s+0);
		API_polar::template g0 <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re9re10re11s11(off_l+64, off_s+32);
		API_polar::template xo0<  32>(s,    off_s+   32,                           off_s+    0,   32);
	}

	// depth = 12, reverse depth = 1, size = 2, calls = 13
	__attribute__((always_inline))
	inline void r012(const int off_l, const int off_s)
	{
	}

	// depth = 12, reverse depth = 1, size = 2, calls = 13
	__attribute__((always_inline))
	inline void r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   2>(s, l, off_l+    0,                           off_s+    0,    2);
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 13
	__attribute__((always_inline))
	inline void r012r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r012(off_l+4, off_s+0);
		API_polar::template g0 <   2>(   l, off_l+    0, off_l+    2,              off_l+    4,    2);
		r112(off_l+4, off_s+2);
		API_polar::template xo0<   2>(s,    off_s+    2,                           off_s+    0,    2);
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 12
	__attribute__((always_inline))
	inline void r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 6
	__attribute__((always_inline))
	inline void r012r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		r012r112(off_l+8, off_s+0);
		API_polar::template g  <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		r111(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 4
	inline void re10r012r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re10(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r012r112r111(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 26
	inline void s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void re10r012r112r111s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10r012r112r111(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s9(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 7
	__attribute__((always_inline))
	inline void r011r012r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+8, off_s+0);
		API_polar::template g0 <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		r012r112(off_l+8, off_s+4);
		API_polar::template xo0<   4>(s,    off_s+    4,                           off_s+    0,    4);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 5
	inline void r011r012r112s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r011r012r112(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s10(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void re9r011r012r112s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re9(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r011r012r112s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 17
	inline void re11s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11s11s10(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s9(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re9r011r012r112s10re11s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re9r011r012r112s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11s11s10s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 13
	inline void s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 7
	inline void re11s11s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11s11s10s9(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s8(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void r08r09re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r08(off_l+64, off_s+0);
		API_polar::template g0 <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r09re10re11s11(off_l+64, off_s+32);
		API_polar::template xo0<  32>(s,    off_s+   32,                           off_s+    0,   32);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 6
	__attribute__((always_inline))
	inline void re11r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		re11(off_l+8, off_s+0);
		API_polar::template gr <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		r111(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 11
	__attribute__((always_inline))
	inline void r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 5
	inline void re11r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11r111(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r110(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void re10re11s11re11r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10re11s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11r111r110(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 2
	inline void r010r011r012r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r011r012r112(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void r010r011r012r112re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r010r011r012r112(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11s11s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 5
	inline void r010re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11s11(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void r010re11s11re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r010re11s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11s11s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void r010re11s11re11s11s10re11s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r010re11s11re11s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11s11s10s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 8
	inline void r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void re11s11s10r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11s11s10(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r19(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re10re11s11re11s11s10re11s11s10r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11s11re11s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11s11s10r19(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void re11r111r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11r111r110(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r19(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 6
	inline void r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re11r111r110r19r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11r111r110r19(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r18(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 2
	inline void re10re11s11re11s11s10re11s11s10r19re11r111r110r19r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re10re11s11re11s11s10re11s11s10r19(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re11r111r110r19r18(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re10re11s11re11s11s10re11s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11s11re11s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11s11s10s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 4
	inline void re11s11r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11s11(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r110(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void re10re11s11re11s11r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10re11s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11s11r110(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 2
	inline void r012r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012r112r111(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r110(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re10r012r112r111s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10r012r112r111s9(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s8(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 6
	inline void s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void r011r012r112s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011r012r112s10(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s9(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void r011r012r112s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r011r012r112s10s9(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s8(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 3
	inline void re11s11s10s9s8s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re11s11s10s9s8(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		s7(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 3
	inline void s6(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 128>(s, l, off_l+    0,                           off_s+    0,  128);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 4
	inline void r011s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r011s11(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s10(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void r09r010re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r010re11s11(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void r011s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011s11s10(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s9(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re11s11s10s9r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11s11s10s9(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r18(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 3
	inline void r17(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void re11s11r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11s11r110(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r19(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re11s11r110r19r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11s11r110r19(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r18(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 2
	inline void re11s11r110r19r18r17(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re11s11r110r19r18(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		r17(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 5, reverse depth = 8, size = 256, calls = 2
	inline void s5(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 256>(s, l, off_l+    0,                           off_s+    0,  256);
	}

	void decode()
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <4096>(   l,     0+    0,     0+ 4096,                  0+ 8192, 4096);
		API_polar::template f  <2048>(   l,  8192+    0,  8192+ 2048,               8192+ 4096, 2048);
		API_polar::template f  <1024>(   l, 12288+    0, 12288+ 1024,              12288+ 2048, 1024);
		API_polar::template g0 < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		r05(15872, 512);
		API_polar::template g0 < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		r06(16128, 768);
		API_polar::template g0 < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		r07re8re9re10re11s11(16128, 896);
		API_polar::template xo0< 128>(s,      768+  128,                             768+    0,  128);
		API_polar::template xo0< 256>(s,      512+  256,                             512+    0,  256);
		API_polar::template xo0< 512>(s,        0+  512,                               0+    0,  512);
		API_polar::template g  <1024>(s, l, 12288+    0, 12288+ 1024,     0+    0, 12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		r05(15872, 1024);
		API_polar::template g0 < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		r06(16128, 1280);
		API_polar::template g0 < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		re7re8r010r011s11re11s11s10(16128, 1408);
		API_polar::template xo0< 128>(s,     1280+  128,                            1280+    0,  128);
		API_polar::template xo0< 256>(s,     1024+  256,                            1024+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  1024+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		re6(16128, 1536);
		API_polar::template gr < 128>(s, l, 15872+    0, 15872+  128,  1536+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r08(16320, 1664);
		API_polar::template g0 <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r09(16352, 1696);
		API_polar::template g0 <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		r010r011s11(16352, 1712);
		API_polar::template xo0<  16>(s,     1696+   16,                            1696+    0,   16);
		API_polar::template xo0<  32>(s,     1664+   32,                            1664+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  1664+    0, 16128+  128,   64);
		r09re10re11s11re10re11s11re11s11s10(16256, 1728);
		API_polar::template xo <  64>(s,     1664+    0,  1664+   64,               1664+    0,   64);
		API_polar::template xo < 128>(s,     1536+    0,  1536+  128,               1536+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  1536+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r08re9re10re11s11(16256, 1792);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  1792+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re9re10re11s11(16320, 1856);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  1856+    0, 16256+   64,   32);
		re10r012r112r111s9(16320, 1888);
		API_polar::template xo <  32>(s,     1856+    0,  1856+   32,               1856+    0,   32);
		API_polar::template xo <  64>(s,     1792+    0,  1792+   64,               1792+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  1792+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		re9r011r012r112s10re11s11s10s9(16256, 1920);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  1920+    0, 16128+  128,   64);
		re11s11s10s9s8(16256, 1984);
		API_polar::template xo <  64>(s,     1920+    0,  1920+   64,               1920+    0,   64);
		API_polar::template xo < 128>(s,     1792+    0,  1792+  128,               1792+    0,  128);
		API_polar::template xo < 256>(s,     1536+    0,  1536+  256,               1536+    0,  256);
		API_polar::template xo < 512>(s,     1024+    0,  1024+  512,               1024+    0,  512);
		API_polar::template xo <1024>(s,        0+    0,     0+ 1024,                  0+    0, 1024);
		API_polar::template g  <2048>(s, l,  8192+    0,  8192+ 2048,     0+    0,  8192+ 4096, 2048);
		API_polar::template f  <1024>(   l, 12288+    0, 12288+ 1024,              12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template rep< 256>(s, l, 15872+    0,                            2048+    0,  256);
		API_polar::template gr < 256>(s, l, 15360+    0, 15360+  256,  2048+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		re6(16128, 2304);
		API_polar::template gr < 128>(s, l, 15872+    0, 15872+  128,  2304+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r08r09re10re11s11(16256, 2432);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  2432+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re9re10re11s11(16320, 2496);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  2496+    0, 16256+   64,   32);
		re10re11s11re11r111r110(16320, 2528);
		API_polar::template xo <  32>(s,     2496+    0,  2496+   32,               2496+    0,   32);
		API_polar::template xo <  64>(s,     2432+    0,  2432+   64,               2432+    0,   64);
		API_polar::template xo < 128>(s,     2304+    0,  2304+  128,               2304+    0,  128);
		API_polar::template xo < 256>(s,     2048+    0,  2048+  256,               2048+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  2048+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		r07(16256, 2560);
		API_polar::template g0 <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r08re9re10re11s11(16256, 2624);
		API_polar::template xo0<  64>(s,     2560+   64,                            2560+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  2560+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		re8re9re10re11s11(16256, 2688);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  2688+    0, 16128+  128,   64);
		re9r011r012r112s10re11s11s10s9(16256, 2752);
		API_polar::template xo <  64>(s,     2688+    0,  2688+   64,               2688+    0,   64);
		API_polar::template xo < 128>(s,     2560+    0,  2560+  128,               2560+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  2560+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re8(16320, 2816);
		API_polar::template gr <  32>(s, l, 16256+    0, 16256+   32,  2816+    0, 16256+   64,   32);
		r010r011r012r112re11s11s10(16320, 2848);
		API_polar::template xo <  32>(s,     2816+    0,  2816+   32,               2816+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  2816+    0, 16128+  128,   64);
		r010re11s11re11s11s10re11s11s10s9(16256, 2880);
		API_polar::template xo <  64>(s,     2816+    0,  2816+   64,               2816+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  2816+    0, 15872+  256,  128);
		re10re11s11re11s11s10re11s11s10r19re11r111r110r19r18(16128, 2944);
		API_polar::template xo < 128>(s,     2816+    0,  2816+  128,               2816+    0,  128);
		API_polar::template xo < 256>(s,     2560+    0,  2560+  256,               2560+    0,  256);
		API_polar::template xo < 512>(s,     2048+    0,  2048+  512,               2048+    0,  512);
		API_polar::template g  <1024>(s, l, 12288+    0, 12288+ 1024,  2048+    0, 12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		re7(16256, 3072);
		API_polar::template gr <  64>(s, l, 16128+    0, 16128+   64,  3072+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re8(16320, 3136);
		API_polar::template gr <  32>(s, l, 16256+    0, 16256+   32,  3136+    0, 16256+   64,   32);
		re9r011r012r112s10(16320, 3168);
		API_polar::template xo <  32>(s,     3136+    0,  3136+   32,               3136+    0,   32);
		API_polar::template xo <  64>(s,     3072+    0,  3072+   64,               3072+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  3072+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re8(16320, 3200);
		API_polar::template gr <  32>(s, l, 16256+    0, 16256+   32,  3200+    0, 16256+   64,   32);
		r010re11s11re11s11s10(16320, 3232);
		API_polar::template xo <  32>(s,     3200+    0,  3200+   32,               3200+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  3200+    0, 16128+  128,   64);
		re10re11s11re11s11s10re11s11s10s9(16256, 3264);
		API_polar::template xo <  64>(s,     3200+    0,  3200+   64,               3200+    0,   64);
		API_polar::template xo < 128>(s,     3072+    0,  3072+  128,               3072+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  3072+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r09re10re11s11re10re11s11re11s11s10(16256, 3328);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  3328+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re10re11s11re11s11r110(16320, 3392);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  3392+    0, 16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		r012r112r111r110(16352, 3424);
		API_polar::template g  <  16>(s, l, 16320+    0, 16320+   16,  3424+    0, 16320+   32,   16);
		r19(16352, 3440);
		API_polar::template xo <  16>(s,     3424+    0,  3424+   16,               3424+    0,   16);
		API_polar::template xo <  32>(s,     3392+    0,  3392+   32,               3392+    0,   32);
		API_polar::template xo <  64>(s,     3328+    0,  3328+   64,               3328+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  3328+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		re10r012r112r111s9s8(16256, 3456);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  3456+    0, 16128+  128,   64);
		s7(16256, 3520);
		API_polar::template xo <  64>(s,     3456+    0,  3456+   64,               3456+    0,   64);
		API_polar::template xo < 128>(s,     3328+    0,  3328+  128,               3328+    0,  128);
		API_polar::template xo < 256>(s,     3072+    0,  3072+  256,               3072+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  3072+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re9re10re11s11(16320, 3584);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  3584+    0, 16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re10re11s11(16352, 3616);
		API_polar::template g  <  16>(s, l, 16320+    0, 16320+   16,  3616+    0, 16320+   32,   16);
		r012r112r111r110(16352, 3632);
		API_polar::template xo <  16>(s,     3616+    0,  3616+   16,               3616+    0,   16);
		API_polar::template xo <  32>(s,     3584+    0,  3584+   32,               3584+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  3584+    0, 16128+  128,   64);
		r011r012r112s10s9s8(16256, 3648);
		API_polar::template xo <  64>(s,     3584+    0,  3584+   64,               3584+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  3584+    0, 15872+  256,  128);
		re11s11s10s9s8s7(16128, 3712);
		API_polar::template xo < 128>(s,     3584+    0,  3584+  128,               3584+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  3584+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		re11s11s10s9s8s7(16128, 3840);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  3840+    0, 15872+  256,  128);
		s6(16128, 3968);
		API_polar::template xo < 128>(s,     3840+    0,  3840+  128,               3840+    0,  128);
		API_polar::template xo < 256>(s,     3584+    0,  3584+  256,               3584+    0,  256);
		API_polar::template xo < 512>(s,     3072+    0,  3072+  512,               3072+    0,  512);
		API_polar::template xo <1024>(s,     2048+    0,  2048+ 1024,               2048+    0, 1024);
		API_polar::template xo <2048>(s,        0+    0,     0+ 2048,                  0+    0, 2048);
		API_polar::template g  <4096>(s, l,     0+    0,     0+ 4096,     0+    0,     0+ 8192, 4096);
		API_polar::template f  <2048>(   l,  8192+    0,  8192+ 2048,               8192+ 4096, 2048);
		API_polar::template f  <1024>(   l, 12288+    0, 12288+ 1024,              12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		r06(16128, 4096);
		API_polar::template g0 < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		r07(16256, 4224);
		API_polar::template g0 <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r08r09re10re11s11(16256, 4288);
		API_polar::template xo0<  64>(s,     4224+   64,                            4224+    0,   64);
		API_polar::template xo0< 128>(s,     4096+  128,                            4096+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  4096+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		r07re8re9re10re11s11(16128, 4352);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  4352+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re8(16320, 4480);
		API_polar::template gr <  32>(s, l, 16256+    0, 16256+   32,  4480+    0, 16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re9(16352, 4512);
		API_polar::template gr <  16>(s, l, 16320+    0, 16320+   16,  4512+    0, 16320+   32,   16);
		r011s11s10(16352, 4528);
		API_polar::template xo <  16>(s,     4512+    0,  4512+   16,               4512+    0,   16);
		API_polar::template xo <  32>(s,     4480+    0,  4480+   32,               4480+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  4480+    0, 16128+  128,   64);
		r010re11s11re11s11s10re11s11s10s9(16256, 4544);
		API_polar::template xo <  64>(s,     4480+    0,  4480+   64,               4480+    0,   64);
		API_polar::template xo < 128>(s,     4352+    0,  4352+  128,               4352+    0,  128);
		API_polar::template xo < 256>(s,     4096+    0,  4096+  256,               4096+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  4096+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		re7re8r010r011s11re11s11s10(16128, 4608);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  4608+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r09r010re11s11(16320, 4736);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  4736+    0, 16256+   64,   32);
		re10re11s11re11s11s10(16320, 4768);
		API_polar::template xo <  32>(s,     4736+    0,  4736+   32,               4736+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  4736+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re10re11s11re11s11s10(16320, 4800);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  4800+    0, 16256+   64,   32);
		re11r111r110r19(16320, 4832);
		API_polar::template xo <  32>(s,     4800+    0,  4800+   32,               4800+    0,   32);
		API_polar::template xo <  64>(s,     4736+    0,  4736+   64,               4736+    0,   64);
		API_polar::template xo < 128>(s,     4608+    0,  4608+  128,               4608+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  4608+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re9re10re11s11(16320, 4864);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  4864+    0, 16256+   64,   32);
		re10re11s11re11s11r110(16320, 4896);
		API_polar::template xo <  32>(s,     4864+    0,  4864+   32,               4864+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  4864+    0, 16128+  128,   64);
		re10r012r112r111s9s8(16256, 4928);
		API_polar::template xo <  64>(s,     4864+    0,  4864+   64,               4864+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  4864+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r011s11s10s9(16320, 4992);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  4992+    0, 16256+   64,   32);
		s8(16320, 5024);
		API_polar::template xo <  32>(s,     4992+    0,  4992+   32,               4992+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  4992+    0, 16128+  128,   64);
		s7(16256, 5056);
		API_polar::template xo <  64>(s,     4992+    0,  4992+   64,               4992+    0,   64);
		API_polar::template xo < 128>(s,     4864+    0,  4864+  128,               4864+    0,  128);
		API_polar::template xo < 256>(s,     4608+    0,  4608+  256,               4608+    0,  256);
		API_polar::template xo < 512>(s,     4096+    0,  4096+  512,               4096+    0,  512);
		API_polar::template g  <1024>(s, l, 12288+    0, 12288+ 1024,  4096+    0, 12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r08(16320, 5120);
		API_polar::template g0 <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r09r010re11s11(16320, 5152);
		API_polar::template xo0<  32>(s,     5120+   32,                            5120+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  5120+    0, 16128+  128,   64);
		r09re10re11s11re10re11s11re11s11s10(16256, 5184);
		API_polar::template xo <  64>(s,     5120+    0,  5120+   64,               5120+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  5120+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re9re10re11s11(16320, 5248);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  5248+    0, 16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		API_polar::template f  <   8>(   l, 16352+    0, 16352+    8,              16352+   16,    8);
		re10(16368, 5280);
		API_polar::template gr <   8>(s, l, 16352+    0, 16352+    8,  5280+    0, 16352+   16,    8);
		re11r111(16368, 5288);
		API_polar::template xo <   8>(s,     5280+    0,  5280+    8,               5280+    0,    8);
		API_polar::template g  <  16>(s, l, 16320+    0, 16320+   16,  5280+    0, 16320+   32,   16);
		s9(16352, 5296);
		API_polar::template xo <  16>(s,     5280+    0,  5280+   16,               5280+    0,   16);
		API_polar::template xo <  32>(s,     5248+    0,  5248+   32,               5248+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  5248+    0, 16128+  128,   64);
		r011r012r112s10s9s8(16256, 5312);
		API_polar::template xo <  64>(s,     5248+    0,  5248+   64,               5248+    0,   64);
		API_polar::template xo < 128>(s,     5120+    0,  5120+  128,               5120+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  5120+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re9(16352, 5376);
		API_polar::template gr <  16>(s, l, 16320+    0, 16320+   16,  5376+    0, 16320+   32,   16);
		API_polar::template f  <   8>(   l, 16352+    0, 16352+    8,              16352+   16,    8);
		re10(16368, 5392);
		API_polar::template gr <   8>(s, l, 16352+    0, 16352+    8,  5392+    0, 16352+   16,    8);
		s10(16368, 5400);
		API_polar::template xo <   8>(s,     5392+    0,  5392+    8,               5392+    0,    8);
		API_polar::template xo <  16>(s,     5376+    0,  5376+   16,               5376+    0,   16);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  5376+    0, 16256+   64,   32);
		r011s11s10s9(16320, 5408);
		API_polar::template xo <  32>(s,     5376+    0,  5376+   32,               5376+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  5376+    0, 16128+  128,   64);
		re11s11s10s9s8(16256, 5440);
		API_polar::template xo <  64>(s,     5376+    0,  5376+   64,               5376+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  5376+    0, 15872+  256,  128);
		re11s11s10s9s8s7(16128, 5504);
		API_polar::template xo < 128>(s,     5376+    0,  5376+  128,               5376+    0,  128);
		API_polar::template xo < 256>(s,     5120+    0,  5120+  256,               5120+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  5120+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r010r011s11re11s11s10(16320, 5632);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  5632+    0, 16256+   64,   32);
		re11s11s10s9(16320, 5664);
		API_polar::template xo <  32>(s,     5632+    0,  5632+   32,               5632+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  5632+    0, 16128+  128,   64);
		re11s11s10s9s8(16256, 5696);
		API_polar::template xo <  64>(s,     5632+    0,  5632+   64,               5632+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  5632+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		re11s11s10s9r18(16256, 5760);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  5760+    0, 16128+  128,   64);
		r17(16256, 5824);
		API_polar::template xo <  64>(s,     5760+    0,  5760+   64,               5760+    0,   64);
		API_polar::template xo < 128>(s,     5632+    0,  5632+  128,               5632+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  5632+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		re11s11r110r19r18r17(16128, 5888);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  5888+    0, 15872+  256,  128);
		API_polar::template h  < 128>(s, l, 16128+    0,                            6016+    0,  128);
		API_polar::template xo < 128>(s,     5888+    0,  5888+  128,               5888+    0,  128);
		API_polar::template xo < 256>(s,     5632+    0,  5632+  256,               5632+    0,  256);
		API_polar::template xo < 512>(s,     5120+    0,  5120+  512,               5120+    0,  512);
		API_polar::template xo <1024>(s,     4096+    0,  4096+ 1024,               4096+    0, 1024);
		API_polar::template g  <2048>(s, l,  8192+    0,  8192+ 2048,  4096+    0,  8192+ 4096, 2048);
		API_polar::template f  <1024>(   l, 12288+    0, 12288+ 1024,              12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		re8re9re10re11s11(16256, 6144);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  6144+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re9(16352, 6208);
		API_polar::template gr <  16>(s, l, 16320+    0, 16320+   16,  6208+    0, 16320+   32,   16);
		re10r012r112r111(16352, 6224);
		API_polar::template xo <  16>(s,     6208+    0,  6208+   16,               6208+    0,   16);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  6208+    0, 16256+   64,   32);
		r011s11s10s9(16320, 6240);
		API_polar::template xo <  32>(s,     6208+    0,  6208+   32,               6208+    0,   32);
		API_polar::template xo <  64>(s,     6144+    0,  6144+   64,               6144+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  6144+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r010r011r012r112re11s11s10(16320, 6272);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  6272+    0, 16256+   64,   32);
		re11s11s10s9(16320, 6304);
		API_polar::template xo <  32>(s,     6272+    0,  6272+   32,               6272+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  6272+    0, 16128+  128,   64);
		re11s11s10s9s8(16256, 6336);
		API_polar::template xo <  64>(s,     6272+    0,  6272+   64,               6272+    0,   64);
		API_polar::template xo < 128>(s,     6144+    0,  6144+  128,               6144+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  6144+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		re10re11s11re11s11s10re11s11s10s9(16256, 6400);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  6400+    0, 16128+  128,   64);
		re11s11s10s9r18(16256, 6464);
		API_polar::template xo <  64>(s,     6400+    0,  6400+   64,               6400+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  6400+    0, 15872+  256,  128);
		re11s11r110r19r18r17(16128, 6528);
		API_polar::template xo < 128>(s,     6400+    0,  6400+  128,               6400+    0,  128);
		API_polar::template xo < 256>(s,     6144+    0,  6144+  256,               6144+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  6144+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		re10re11s11re11s11s10re11s11s10r19re11r111r110r19r18(16128, 6656);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  6656+    0, 15872+  256,  128);
		s6(16128, 6784);
		API_polar::template xo < 128>(s,     6656+    0,  6656+  128,               6656+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  6656+    0, 15360+  512,  256);
		s5(15872, 6912);
		API_polar::template xo < 256>(s,     6656+    0,  6656+  256,               6656+    0,  256);
		API_polar::template xo < 512>(s,     6144+    0,  6144+  512,               6144+    0,  512);
		API_polar::template g  <1024>(s, l, 12288+    0, 12288+ 1024,  6144+    0, 12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re10re11s11re11r111r110(16320, 7168);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  7168+    0, 16256+   64,   32);
		s8(16320, 7200);
		API_polar::template xo <  32>(s,     7168+    0,  7168+   32,               7168+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  7168+    0, 16128+  128,   64);
		s7(16256, 7232);
		API_polar::template xo <  64>(s,     7168+    0,  7168+   64,               7168+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  7168+    0, 15872+  256,  128);
		s6(16128, 7296);
		API_polar::template xo < 128>(s,     7168+    0,  7168+  128,               7168+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  7168+    0, 15360+  512,  256);
		s5(15872, 7424);
		API_polar::template xo < 256>(s,     7168+    0,  7168+  256,               7168+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  7168+    0, 14336+ 1024,  512);
		API_polar::template spc< 512>(s, l, 15360+    0,                            7680+    0,  512);
		API_polar::template xo < 512>(s,     7168+    0,  7168+  512,               7168+    0,  512);
		API_polar::template xo <1024>(s,     6144+    0,  6144+ 1024,               6144+    0, 1024);
		API_polar::template xo <2048>(s,     4096+    0,  4096+ 2048,               4096+    0, 2048);
		API_polar::template xo <4096>(s,        0+    0,     0+ 4096,                  0+    0, 4096);
	}
};
}
}
#endif
