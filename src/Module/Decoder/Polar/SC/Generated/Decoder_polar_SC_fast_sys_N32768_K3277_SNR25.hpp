#ifndef DECODER_POLAR_SC_FAST_SYS_N32768_K3277_SNR25_HPP_
#define DECODER_POLAR_SC_FAST_SYS_N32768_K3277_SNR25_HPP_

#include <cassert>

#include "../Decoder_polar_SC_fast_sys.hpp"

namespace aff3ct
{
namespace module
{
static const char Frozen_bits_32768_3277_25[32768] = {
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

template <typename B, typename R, class API_polar>
class Decoder_polar_SC_fast_sys_N32768_K3277_SNR25 : public Decoder_polar_SC_fast_sys<B, R, API_polar>
{
public:
	Decoder_polar_SC_fast_sys_N32768_K3277_SNR25(const int& K, const int& N, const mipp::vector<B>& frozen_bits, const int n_frames = 1)
	: Decoder_polar_SC_fast_sys<B, R, API_polar>(K, N, frozen_bits, n_frames)
	{
		assert(N == 32768);
		assert(K == 3277);
		
		auto i = 0;
		while (i < 32768 && Frozen_bits_32768_3277_25[i] == frozen_bits[i]) i++;
		assert(i == 32768);
	}

	virtual ~Decoder_polar_SC_fast_sys_N32768_K3277_SNR25()
	{
	}

	void decode()
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <16384>(   l,     0+    0,     0+16384,                  0+32768, 16384);
		API_polar::template g0 < 8192>(   l, 32768+    0, 32768+ 8192,              32768+16384,  8192);
		API_polar::template f  < 4096>(   l, 49152+    0, 49152+ 4096,              49152+ 8192,  4096);
		API_polar::template rep< 4096>(s, l, 57344+    0,                            8192+    0,  4096);
		API_polar::template gr < 4096>(s, l, 49152+    0, 49152+ 4096,  8192+    0, 49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template g0 < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template g0 <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           14320+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 14320+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           14328+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 14328+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           14332+    0,     4);
		API_polar::template xo <    4>(s,    14328+    0, 14328+    4,              14328+    0,     4);
		API_polar::template xo <    8>(s,    14320+    0, 14320+    8,              14320+    0,     8);
		API_polar::template xo0<   16>(s,    14304+   16,                           14304+    0,    16);
		API_polar::template xo0<   32>(s,    14272+   32,                           14272+    0,    32);
		API_polar::template xo0<   64>(s,    14208+   64,                           14208+    0,    64);
		API_polar::template xo0<  128>(s,    14080+  128,                           14080+    0,   128);
		API_polar::template xo0<  256>(s,    13824+  256,                           13824+    0,   256);
		API_polar::template xo0<  512>(s,    13312+  512,                           13312+    0,   512);
		API_polar::template xo0< 1024>(s,    12288+ 1024,                           12288+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048, 12288+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template g0 <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template rep<   64>(s, l, 65408+    0,                           15232+    0,    64);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 15232+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           15296+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 15296+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           15328+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 15328+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           15344+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 15344+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           15352+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 15352+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           15356+    0,     4);
		API_polar::template xo <    4>(s,    15352+    0, 15352+    4,              15352+    0,     4);
		API_polar::template xo <    8>(s,    15344+    0, 15344+    8,              15344+    0,     8);
		API_polar::template xo <   16>(s,    15328+    0, 15328+   16,              15328+    0,    16);
		API_polar::template xo <   32>(s,    15296+    0, 15296+   32,              15296+    0,    32);
		API_polar::template xo <   64>(s,    15232+    0, 15232+   64,              15232+    0,    64);
		API_polar::template xo0<  128>(s,    15104+  128,                           15104+    0,   128);
		API_polar::template xo0<  256>(s,    14848+  256,                           14848+    0,   256);
		API_polar::template xo0<  512>(s,    14336+  512,                           14336+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 14336+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template rep<  128>(s, l, 65280+    0,                           15616+    0,   128);
		API_polar::template gr <  128>(s, l, 65024+    0, 65024+  128, 15616+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template rep<   64>(s, l, 65408+    0,                           15744+    0,    64);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 15744+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           15832+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 15832+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           15836+    0,     4);
		API_polar::template xo <    4>(s,    15832+    0, 15832+    4,              15832+    0,     4);
		API_polar::template xo0<    8>(s,    15824+    8,                           15824+    0,     8);
		API_polar::template xo0<   16>(s,    15808+   16,                           15808+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 15808+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           15840+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 15840+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           15848+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 15848+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           15852+    0,     4);
		API_polar::template xo <    4>(s,    15848+    0, 15848+    4,              15848+    0,     4);
		API_polar::template xo <    8>(s,    15840+    0, 15840+    8,              15840+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 15840+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           15856+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 15856+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           15860+    0,     4);
		API_polar::template xo <    4>(s,    15856+    0, 15856+    4,              15856+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 15856+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           15864+    0,     8);
		API_polar::template xo <    8>(s,    15856+    0, 15856+    8,              15856+    0,     8);
		API_polar::template xo <   16>(s,    15840+    0, 15840+   16,              15840+    0,    16);
		API_polar::template xo <   32>(s,    15808+    0, 15808+   32,              15808+    0,    32);
		API_polar::template xo <   64>(s,    15744+    0, 15744+   64,              15744+    0,    64);
		API_polar::template xo <  128>(s,    15616+    0, 15616+  128,              15616+    0,   128);
		API_polar::template xo0<  256>(s,    15360+  256,                           15360+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 15360+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           15996+    0,     4);
		API_polar::template xo0<    4>(s,    15992+    4,                           15992+    0,     4);
		API_polar::template xo0<    8>(s,    15984+    8,                           15984+    0,     8);
		API_polar::template xo0<   16>(s,    15968+   16,                           15968+    0,    16);
		API_polar::template xo0<   32>(s,    15936+   32,                           15936+    0,    32);
		API_polar::template xo0<   64>(s,    15872+   64,                           15872+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 15872+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           16032+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 16032+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           16048+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 16048+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           16056+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 16056+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           16060+    0,     4);
		API_polar::template xo <    4>(s,    16056+    0, 16056+    4,              16056+    0,     4);
		API_polar::template xo <    8>(s,    16048+    0, 16048+    8,              16048+    0,     8);
		API_polar::template xo <   16>(s,    16032+    0, 16032+   16,              16032+    0,    16);
		API_polar::template xo0<   32>(s,    16000+   32,                           16000+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 16000+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           16064+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 16064+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           16080+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 16080+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           16088+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 16088+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           16092+    0,     4);
		API_polar::template xo <    4>(s,    16088+    0, 16088+    4,              16088+    0,     4);
		API_polar::template xo <    8>(s,    16080+    0, 16080+    8,              16080+    0,     8);
		API_polar::template xo <   16>(s,    16064+    0, 16064+   16,              16064+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 16064+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           16096+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 16096+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           16104+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 16104+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           16108+    0,     4);
		API_polar::template xo <    4>(s,    16104+    0, 16104+    4,              16104+    0,     4);
		API_polar::template xo <    8>(s,    16096+    0, 16096+    8,              16096+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 16096+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           16112+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 16112+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           16116+    0,     4);
		API_polar::template xo <    4>(s,    16112+    0, 16112+    4,              16112+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 16112+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           16120+    0,     8);
		API_polar::template xo <    8>(s,    16112+    0, 16112+    8,              16112+    0,     8);
		API_polar::template xo <   16>(s,    16096+    0, 16096+   16,              16096+    0,    16);
		API_polar::template xo <   32>(s,    16064+    0, 16064+   32,              16064+    0,    32);
		API_polar::template xo <   64>(s,    16000+    0, 16000+   64,              16000+    0,    64);
		API_polar::template xo <  128>(s,    15872+    0, 15872+  128,              15872+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 15872+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           16128+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 16128+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           16160+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 16160+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           16176+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 16176+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           16184+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 16184+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           16188+    0,     4);
		API_polar::template xo <    4>(s,    16184+    0, 16184+    4,              16184+    0,     4);
		API_polar::template xo <    8>(s,    16176+    0, 16176+    8,              16176+    0,     8);
		API_polar::template xo <   16>(s,    16160+    0, 16160+   16,              16160+    0,    16);
		API_polar::template xo <   32>(s,    16128+    0, 16128+   32,              16128+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 16128+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           16192+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 16192+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           16208+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 16208+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           16216+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 16216+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           16220+    0,     4);
		API_polar::template xo <    4>(s,    16216+    0, 16216+    4,              16216+    0,     4);
		API_polar::template xo <    8>(s,    16208+    0, 16208+    8,              16208+    0,     8);
		API_polar::template xo <   16>(s,    16192+    0, 16192+   16,              16192+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 16192+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           16224+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 16224+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           16232+    0,     8);
		API_polar::template xo <    8>(s,    16224+    0, 16224+    8,              16224+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 16224+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           16240+    0,    16);
		API_polar::template xo <   16>(s,    16224+    0, 16224+   16,              16224+    0,    16);
		API_polar::template xo <   32>(s,    16192+    0, 16192+   32,              16192+    0,    32);
		API_polar::template xo <   64>(s,    16128+    0, 16128+   64,              16128+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 16128+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           16256+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 16256+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           16276+    0,     4);
		API_polar::template xo0<    4>(s,    16272+    4,                           16272+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 16272+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           16280+    0,     8);
		API_polar::template xo <    8>(s,    16272+    0, 16272+    8,              16272+    0,     8);
		API_polar::template xo <   16>(s,    16256+    0, 16256+   16,              16256+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 16256+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           16288+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 16288+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           16292+    0,     4);
		API_polar::template xo <    4>(s,    16288+    0, 16288+    4,              16288+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 16288+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           16296+    0,     8);
		API_polar::template xo <    8>(s,    16288+    0, 16288+    8,              16288+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 16288+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           16304+    0,    16);
		API_polar::template xo <   16>(s,    16288+    0, 16288+   16,              16288+    0,    16);
		API_polar::template xo <   32>(s,    16256+    0, 16256+   32,              16256+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 16256+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           16320+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 16320+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           16324+    0,     4);
		API_polar::template xo <    4>(s,    16320+    0, 16320+    4,              16320+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 16320+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           16328+    0,     8);
		API_polar::template xo <    8>(s,    16320+    0, 16320+    8,              16320+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 16320+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           16336+    0,    16);
		API_polar::template xo <   16>(s,    16320+    0, 16320+   16,              16320+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 16320+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           16352+    0,    32);
		API_polar::template xo <   32>(s,    16320+    0, 16320+   32,              16320+    0,    32);
		API_polar::template xo <   64>(s,    16256+    0, 16256+   64,              16256+    0,    64);
		API_polar::template xo <  128>(s,    16128+    0, 16128+  128,              16128+    0,   128);
		API_polar::template xo <  256>(s,    15872+    0, 15872+  256,              15872+    0,   256);
		API_polar::template xo <  512>(s,    15360+    0, 15360+  512,              15360+    0,   512);
		API_polar::template xo < 1024>(s,    14336+    0, 14336+ 1024,              14336+    0,  1024);
		API_polar::template xo < 2048>(s,    12288+    0, 12288+ 2048,              12288+    0,  2048);
		API_polar::template xo < 4096>(s,     8192+    0,  8192+ 4096,               8192+    0,  4096);
		API_polar::template xo0< 8192>(s,        0+ 8192,                               0+    0,  8192);
		API_polar::template g  <16384>(s, l,     0+    0,     0+16384,     0+    0,     0+32768, 16384);
		API_polar::template f  < 8192>(   l, 32768+    0, 32768+ 8192,              32768+16384,  8192);
		API_polar::template f  < 4096>(   l, 49152+    0, 49152+ 4096,              49152+ 8192,  4096);
		API_polar::template g0 < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template g0 < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template g0 <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           20416+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 20416+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           20448+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 20448+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           20464+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 20464+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           20472+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 20472+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           20476+    0,     4);
		API_polar::template xo <    4>(s,    20472+    0, 20472+    4,              20472+    0,     4);
		API_polar::template xo <    8>(s,    20464+    0, 20464+    8,              20464+    0,     8);
		API_polar::template xo <   16>(s,    20448+    0, 20448+   16,              20448+    0,    16);
		API_polar::template xo <   32>(s,    20416+    0, 20416+   32,              20416+    0,    32);
		API_polar::template xo0<   64>(s,    20352+   64,                           20352+    0,    64);
		API_polar::template xo0<  128>(s,    20224+  128,                           20224+    0,   128);
		API_polar::template xo0<  256>(s,    19968+  256,                           19968+    0,   256);
		API_polar::template xo0<  512>(s,    19456+  512,                           19456+    0,   512);
		API_polar::template xo0< 1024>(s,    18432+ 1024,                           18432+    0,  1024);
		API_polar::template xo0< 2048>(s,    16384+ 2048,                           16384+    0,  2048);
		API_polar::template g  < 4096>(s, l, 49152+    0, 49152+ 4096, 16384+    0, 49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template g0 < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template g0 <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template rep<  128>(s, l, 65280+    0,                           22272+    0,   128);
		API_polar::template gr <  128>(s, l, 65024+    0, 65024+  128, 22272+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template rep<   64>(s, l, 65408+    0,                           22400+    0,    64);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 22400+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           22464+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 22464+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           22504+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 22504+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           22508+    0,     4);
		API_polar::template xo <    4>(s,    22504+    0, 22504+    4,              22504+    0,     4);
		API_polar::template xo0<    8>(s,    22496+    8,                           22496+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 22496+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           22512+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 22512+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           22516+    0,     4);
		API_polar::template xo <    4>(s,    22512+    0, 22512+    4,              22512+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 22512+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           22520+    0,     8);
		API_polar::template xo <    8>(s,    22512+    0, 22512+    8,              22512+    0,     8);
		API_polar::template xo <   16>(s,    22496+    0, 22496+   16,              22496+    0,    16);
		API_polar::template xo <   32>(s,    22464+    0, 22464+   32,              22464+    0,    32);
		API_polar::template xo <   64>(s,    22400+    0, 22400+   64,              22400+    0,    64);
		API_polar::template xo <  128>(s,    22272+    0, 22272+  128,              22272+    0,   128);
		API_polar::template xo0<  256>(s,    22016+  256,                           22016+    0,   256);
		API_polar::template xo0<  512>(s,    21504+  512,                           21504+    0,   512);
		API_polar::template xo0< 1024>(s,    20480+ 1024,                           20480+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048, 20480+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template rep<  512>(s, l, 64512+    0,                           22528+    0,   512);
		API_polar::template gr <  512>(s, l, 63488+    0, 63488+  512, 22528+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template rep<  256>(s, l, 65024+    0,                           23040+    0,   256);
		API_polar::template gr <  256>(s, l, 64512+    0, 64512+  256, 23040+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           23420+    0,     4);
		API_polar::template xo0<    4>(s,    23416+    4,                           23416+    0,     4);
		API_polar::template xo0<    8>(s,    23408+    8,                           23408+    0,     8);
		API_polar::template xo0<   16>(s,    23392+   16,                           23392+    0,    16);
		API_polar::template xo0<   32>(s,    23360+   32,                           23360+    0,    32);
		API_polar::template xo0<   64>(s,    23296+   64,                           23296+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 23296+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           23456+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 23456+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           23472+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 23472+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           23480+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 23480+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           23484+    0,     4);
		API_polar::template xo <    4>(s,    23480+    0, 23480+    4,              23480+    0,     4);
		API_polar::template xo <    8>(s,    23472+    0, 23472+    8,              23472+    0,     8);
		API_polar::template xo <   16>(s,    23456+    0, 23456+   16,              23456+    0,    16);
		API_polar::template xo0<   32>(s,    23424+   32,                           23424+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 23424+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           23488+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 23488+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           23504+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 23504+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           23512+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 23512+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           23516+    0,     4);
		API_polar::template xo <    4>(s,    23512+    0, 23512+    4,              23512+    0,     4);
		API_polar::template xo <    8>(s,    23504+    0, 23504+    8,              23504+    0,     8);
		API_polar::template xo <   16>(s,    23488+    0, 23488+   16,              23488+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 23488+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           23520+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 23520+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           23528+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 23528+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           23532+    0,     4);
		API_polar::template xo <    4>(s,    23528+    0, 23528+    4,              23528+    0,     4);
		API_polar::template xo <    8>(s,    23520+    0, 23520+    8,              23520+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 23520+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           23536+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 23536+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           23540+    0,     4);
		API_polar::template xo <    4>(s,    23536+    0, 23536+    4,              23536+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 23536+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           23544+    0,     8);
		API_polar::template xo <    8>(s,    23536+    0, 23536+    8,              23536+    0,     8);
		API_polar::template xo <   16>(s,    23520+    0, 23520+   16,              23520+    0,    16);
		API_polar::template xo <   32>(s,    23488+    0, 23488+   32,              23488+    0,    32);
		API_polar::template xo <   64>(s,    23424+    0, 23424+   64,              23424+    0,    64);
		API_polar::template xo <  128>(s,    23296+    0, 23296+  128,              23296+    0,   128);
		API_polar::template xo <  256>(s,    23040+    0, 23040+  256,              23040+    0,   256);
		API_polar::template xo <  512>(s,    22528+    0, 22528+  512,              22528+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 22528+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           23792+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 23792+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           23800+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 23800+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           23804+    0,     4);
		API_polar::template xo <    4>(s,    23800+    0, 23800+    4,              23800+    0,     4);
		API_polar::template xo <    8>(s,    23792+    0, 23792+    8,              23792+    0,     8);
		API_polar::template xo0<   16>(s,    23776+   16,                           23776+    0,    16);
		API_polar::template xo0<   32>(s,    23744+   32,                           23744+    0,    32);
		API_polar::template xo0<   64>(s,    23680+   64,                           23680+    0,    64);
		API_polar::template xo0<  128>(s,    23552+  128,                           23552+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 23552+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           23872+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 23872+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           23904+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 23904+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           23920+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 23920+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           23928+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 23928+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           23932+    0,     4);
		API_polar::template xo <    4>(s,    23928+    0, 23928+    4,              23928+    0,     4);
		API_polar::template xo <    8>(s,    23920+    0, 23920+    8,              23920+    0,     8);
		API_polar::template xo <   16>(s,    23904+    0, 23904+   16,              23904+    0,    16);
		API_polar::template xo <   32>(s,    23872+    0, 23872+   32,              23872+    0,    32);
		API_polar::template xo0<   64>(s,    23808+   64,                           23808+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 23808+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           23936+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 23936+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           23968+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 23968+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           23984+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 23984+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           23992+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 23992+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           23996+    0,     4);
		API_polar::template xo <    4>(s,    23992+    0, 23992+    4,              23992+    0,     4);
		API_polar::template xo <    8>(s,    23984+    0, 23984+    8,              23984+    0,     8);
		API_polar::template xo <   16>(s,    23968+    0, 23968+   16,              23968+    0,    16);
		API_polar::template xo <   32>(s,    23936+    0, 23936+   32,              23936+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 23936+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           24000+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 24000+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24016+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24016+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24020+    0,     4);
		API_polar::template xo <    4>(s,    24016+    0, 24016+    4,              24016+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24016+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24024+    0,     8);
		API_polar::template xo <    8>(s,    24016+    0, 24016+    8,              24016+    0,     8);
		API_polar::template xo <   16>(s,    24000+    0, 24000+   16,              24000+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 24000+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24032+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24032+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24036+    0,     4);
		API_polar::template xo <    4>(s,    24032+    0, 24032+    4,              24032+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24032+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24040+    0,     8);
		API_polar::template xo <    8>(s,    24032+    0, 24032+    8,              24032+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24032+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           24048+    0,    16);
		API_polar::template xo <   16>(s,    24032+    0, 24032+   16,              24032+    0,    16);
		API_polar::template xo <   32>(s,    24000+    0, 24000+   32,              24000+    0,    32);
		API_polar::template xo <   64>(s,    23936+    0, 23936+   64,              23936+    0,    64);
		API_polar::template xo <  128>(s,    23808+    0, 23808+  128,              23808+    0,   128);
		API_polar::template xo <  256>(s,    23552+    0, 23552+  256,              23552+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 23552+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template rep<   64>(s, l, 65408+    0,                           24064+    0,    64);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 24064+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           24128+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 24128+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           24160+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 24160+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           24176+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 24176+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24184+    0,     8);
		API_polar::template xo <    8>(s,    24176+    0, 24176+    8,              24176+    0,     8);
		API_polar::template xo <   16>(s,    24160+    0, 24160+   16,              24160+    0,    16);
		API_polar::template xo <   32>(s,    24128+    0, 24128+   32,              24128+    0,    32);
		API_polar::template xo <   64>(s,    24064+    0, 24064+   64,              24064+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 24064+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24220+    0,     4);
		API_polar::template xo0<    4>(s,    24216+    4,                           24216+    0,     4);
		API_polar::template xo0<    8>(s,    24208+    8,                           24208+    0,     8);
		API_polar::template xo0<   16>(s,    24192+   16,                           24192+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 24192+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24232+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24232+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24236+    0,     4);
		API_polar::template xo <    4>(s,    24232+    0, 24232+    4,              24232+    0,     4);
		API_polar::template xo0<    8>(s,    24224+    8,                           24224+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24224+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24240+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24240+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24244+    0,     4);
		API_polar::template xo <    4>(s,    24240+    0, 24240+    4,              24240+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24240+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24248+    0,     8);
		API_polar::template xo <    8>(s,    24240+    0, 24240+    8,              24240+    0,     8);
		API_polar::template xo <   16>(s,    24224+    0, 24224+   16,              24224+    0,    16);
		API_polar::template xo <   32>(s,    24192+    0, 24192+   32,              24192+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 24192+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           24256+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 24256+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24264+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24264+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24268+    0,     4);
		API_polar::template xo <    4>(s,    24264+    0, 24264+    4,              24264+    0,     4);
		API_polar::template xo <    8>(s,    24256+    0, 24256+    8,              24256+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24256+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24272+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24272+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24276+    0,     4);
		API_polar::template xo <    4>(s,    24272+    0, 24272+    4,              24272+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24272+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24280+    0,     8);
		API_polar::template xo <    8>(s,    24272+    0, 24272+    8,              24272+    0,     8);
		API_polar::template xo <   16>(s,    24256+    0, 24256+   16,              24256+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 24256+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24288+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24288+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24292+    0,     4);
		API_polar::template xo <    4>(s,    24288+    0, 24288+    4,              24288+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24288+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24296+    0,     8);
		API_polar::template xo <    8>(s,    24288+    0, 24288+    8,              24288+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24288+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           24304+    0,    16);
		API_polar::template xo <   16>(s,    24288+    0, 24288+   16,              24288+    0,    16);
		API_polar::template xo <   32>(s,    24256+    0, 24256+   32,              24256+    0,    32);
		API_polar::template xo <   64>(s,    24192+    0, 24192+   64,              24192+    0,    64);
		API_polar::template xo <  128>(s,    24064+    0, 24064+  128,              24064+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 24064+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           24336+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 24336+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24344+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24344+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24348+    0,     4);
		API_polar::template xo <    4>(s,    24344+    0, 24344+    4,              24344+    0,     4);
		API_polar::template xo <    8>(s,    24336+    0, 24336+    8,              24336+    0,     8);
		API_polar::template xo0<   16>(s,    24320+   16,                           24320+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 24320+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           24352+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 24352+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24360+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24360+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24364+    0,     4);
		API_polar::template xo <    4>(s,    24360+    0, 24360+    4,              24360+    0,     4);
		API_polar::template xo <    8>(s,    24352+    0, 24352+    8,              24352+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24352+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24368+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24368+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24372+    0,     4);
		API_polar::template xo <    4>(s,    24368+    0, 24368+    4,              24368+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24368+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24376+    0,     8);
		API_polar::template xo <    8>(s,    24368+    0, 24368+    8,              24368+    0,     8);
		API_polar::template xo <   16>(s,    24352+    0, 24352+   16,              24352+    0,    16);
		API_polar::template xo <   32>(s,    24320+    0, 24320+   32,              24320+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 24320+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           24384+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 24384+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24392+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24392+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24396+    0,     4);
		API_polar::template xo <    4>(s,    24392+    0, 24392+    4,              24392+    0,     4);
		API_polar::template xo <    8>(s,    24384+    0, 24384+    8,              24384+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24384+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24400+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24400+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24404+    0,     4);
		API_polar::template xo <    4>(s,    24400+    0, 24400+    4,              24400+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24400+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24408+    0,     8);
		API_polar::template xo <    8>(s,    24400+    0, 24400+    8,              24400+    0,     8);
		API_polar::template xo <   16>(s,    24384+    0, 24384+   16,              24384+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 24384+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24416+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24416+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24420+    0,     4);
		API_polar::template xo <    4>(s,    24416+    0, 24416+    4,              24416+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24416+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24424+    0,     8);
		API_polar::template xo <    8>(s,    24416+    0, 24416+    8,              24416+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24416+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           24432+    0,    16);
		API_polar::template xo <   16>(s,    24416+    0, 24416+   16,              24416+    0,    16);
		API_polar::template xo <   32>(s,    24384+    0, 24384+   32,              24384+    0,    32);
		API_polar::template xo <   64>(s,    24320+    0, 24320+   64,              24320+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 24320+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           24448+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 24448+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24456+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24456+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24460+    0,     4);
		API_polar::template xo <    4>(s,    24456+    0, 24456+    4,              24456+    0,     4);
		API_polar::template xo <    8>(s,    24448+    0, 24448+    8,              24448+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24448+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24464+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24464+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24468+    0,     4);
		API_polar::template xo <    4>(s,    24464+    0, 24464+    4,              24464+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24464+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24472+    0,     8);
		API_polar::template xo <    8>(s,    24464+    0, 24464+    8,              24464+    0,     8);
		API_polar::template xo <   16>(s,    24448+    0, 24448+   16,              24448+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 24448+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24480+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24480+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24484+    0,     4);
		API_polar::template xo <    4>(s,    24480+    0, 24480+    4,              24480+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24480+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24488+    0,     8);
		API_polar::template xo <    8>(s,    24480+    0, 24480+    8,              24480+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24480+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           24496+    0,    16);
		API_polar::template xo <   16>(s,    24480+    0, 24480+   16,              24480+    0,    16);
		API_polar::template xo <   32>(s,    24448+    0, 24448+   32,              24448+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 24448+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           24512+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 24512+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           24516+    0,     4);
		API_polar::template xo <    4>(s,    24512+    0, 24512+    4,              24512+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 24512+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           24520+    0,     8);
		API_polar::template xo <    8>(s,    24512+    0, 24512+    8,              24512+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 24512+    0, 65472+   32,    16);
		API_polar::template h  <   16>(s, l, 65504+    0,                           24528+    0,    16);
		API_polar::template xo <   16>(s,    24512+    0, 24512+   16,              24512+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 24512+    0, 65408+   64,    32);
		API_polar::template h  <   32>(s, l, 65472+    0,                           24544+    0,    32);
		API_polar::template xo <   32>(s,    24512+    0, 24512+   32,              24512+    0,    32);
		API_polar::template xo <   64>(s,    24448+    0, 24448+   64,              24448+    0,    64);
		API_polar::template xo <  128>(s,    24320+    0, 24320+  128,              24320+    0,   128);
		API_polar::template xo <  256>(s,    24064+    0, 24064+  256,              24064+    0,   256);
		API_polar::template xo <  512>(s,    23552+    0, 23552+  512,              23552+    0,   512);
		API_polar::template xo < 1024>(s,    22528+    0, 22528+ 1024,              22528+    0,  1024);
		API_polar::template xo < 2048>(s,    20480+    0, 20480+ 2048,              20480+    0,  2048);
		API_polar::template xo < 4096>(s,    16384+    0, 16384+ 4096,              16384+    0,  4096);
		API_polar::template g  < 8192>(s, l, 32768+    0, 32768+ 8192, 16384+    0, 32768+16384,  8192);
		API_polar::template f  < 4096>(   l, 49152+    0, 49152+ 4096,              49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template g0 < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template rep<  512>(s, l, 64512+    0,                           25600+    0,   512);
		API_polar::template gr <  512>(s, l, 63488+    0, 63488+  512, 25600+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template rep<  256>(s, l, 65024+    0,                           26112+    0,   256);
		API_polar::template gr <  256>(s, l, 64512+    0, 64512+  256, 26112+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           26480+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 26480+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           26488+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 26488+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           26492+    0,     4);
		API_polar::template xo <    4>(s,    26488+    0, 26488+    4,              26488+    0,     4);
		API_polar::template xo <    8>(s,    26480+    0, 26480+    8,              26480+    0,     8);
		API_polar::template xo0<   16>(s,    26464+   16,                           26464+    0,    16);
		API_polar::template xo0<   32>(s,    26432+   32,                           26432+    0,    32);
		API_polar::template xo0<   64>(s,    26368+   64,                           26368+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 26368+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           26496+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 26496+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           26528+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 26528+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           26544+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 26544+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           26552+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 26552+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           26556+    0,     4);
		API_polar::template xo <    4>(s,    26552+    0, 26552+    4,              26552+    0,     4);
		API_polar::template xo <    8>(s,    26544+    0, 26544+    8,              26544+    0,     8);
		API_polar::template xo <   16>(s,    26528+    0, 26528+   16,              26528+    0,    16);
		API_polar::template xo <   32>(s,    26496+    0, 26496+   32,              26496+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 26496+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           26560+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 26560+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           26576+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 26576+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           26584+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 26584+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           26588+    0,     4);
		API_polar::template xo <    4>(s,    26584+    0, 26584+    4,              26584+    0,     4);
		API_polar::template xo <    8>(s,    26576+    0, 26576+    8,              26576+    0,     8);
		API_polar::template xo <   16>(s,    26560+    0, 26560+   16,              26560+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 26560+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           26592+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 26592+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           26600+    0,     8);
		API_polar::template xo <    8>(s,    26592+    0, 26592+    8,              26592+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 26592+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           26608+    0,    16);
		API_polar::template xo <   16>(s,    26592+    0, 26592+   16,              26592+    0,    16);
		API_polar::template xo <   32>(s,    26560+    0, 26560+   32,              26560+    0,    32);
		API_polar::template xo <   64>(s,    26496+    0, 26496+   64,              26496+    0,    64);
		API_polar::template xo <  128>(s,    26368+    0, 26368+  128,              26368+    0,   128);
		API_polar::template xo <  256>(s,    26112+    0, 26112+  256,              26112+    0,   256);
		API_polar::template xo <  512>(s,    25600+    0, 25600+  512,              25600+    0,   512);
		API_polar::template xo0< 1024>(s,    24576+ 1024,                           24576+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048, 24576+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           27120+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 27120+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           27128+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 27128+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27132+    0,     4);
		API_polar::template xo <    4>(s,    27128+    0, 27128+    4,              27128+    0,     4);
		API_polar::template xo <    8>(s,    27120+    0, 27120+    8,              27120+    0,     8);
		API_polar::template xo0<   16>(s,    27104+   16,                           27104+    0,    16);
		API_polar::template xo0<   32>(s,    27072+   32,                           27072+    0,    32);
		API_polar::template xo0<   64>(s,    27008+   64,                           27008+    0,    64);
		API_polar::template xo0<  128>(s,    26880+  128,                           26880+    0,   128);
		API_polar::template xo0<  256>(s,    26624+  256,                           26624+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 26624+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           27328+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 27328+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           27360+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 27360+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           27376+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 27376+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           27384+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 27384+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27388+    0,     4);
		API_polar::template xo <    4>(s,    27384+    0, 27384+    4,              27384+    0,     4);
		API_polar::template xo <    8>(s,    27376+    0, 27376+    8,              27376+    0,     8);
		API_polar::template xo <   16>(s,    27360+    0, 27360+   16,              27360+    0,    16);
		API_polar::template xo <   32>(s,    27328+    0, 27328+   32,              27328+    0,    32);
		API_polar::template xo0<   64>(s,    27264+   64,                           27264+    0,    64);
		API_polar::template xo0<  128>(s,    27136+  128,                           27136+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 27136+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template rep<   64>(s, l, 65408+    0,                           27392+    0,    64);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 27392+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           27456+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 27456+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           27488+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 27488+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           27504+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 27504+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           27512+    0,     8);
		API_polar::template xo <    8>(s,    27504+    0, 27504+    8,              27504+    0,     8);
		API_polar::template xo <   16>(s,    27488+    0, 27488+   16,              27488+    0,    16);
		API_polar::template xo <   32>(s,    27456+    0, 27456+   32,              27456+    0,    32);
		API_polar::template xo <   64>(s,    27392+    0, 27392+   64,              27392+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 27392+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           27520+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 27520+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           27560+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 27560+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27564+    0,     4);
		API_polar::template xo <    4>(s,    27560+    0, 27560+    4,              27560+    0,     4);
		API_polar::template xo0<    8>(s,    27552+    8,                           27552+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 27552+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           27568+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 27568+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27572+    0,     4);
		API_polar::template xo <    4>(s,    27568+    0, 27568+    4,              27568+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 27568+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           27576+    0,     8);
		API_polar::template xo <    8>(s,    27568+    0, 27568+    8,              27568+    0,     8);
		API_polar::template xo <   16>(s,    27552+    0, 27552+   16,              27552+    0,    16);
		API_polar::template xo <   32>(s,    27520+    0, 27520+   32,              27520+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 27520+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           27584+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 27584+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           27592+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 27592+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27596+    0,     4);
		API_polar::template xo <    4>(s,    27592+    0, 27592+    4,              27592+    0,     4);
		API_polar::template xo <    8>(s,    27584+    0, 27584+    8,              27584+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 27584+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           27600+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 27600+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27604+    0,     4);
		API_polar::template xo <    4>(s,    27600+    0, 27600+    4,              27600+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 27600+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           27608+    0,     8);
		API_polar::template xo <    8>(s,    27600+    0, 27600+    8,              27600+    0,     8);
		API_polar::template xo <   16>(s,    27584+    0, 27584+   16,              27584+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 27584+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           27616+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 27616+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27620+    0,     4);
		API_polar::template xo <    4>(s,    27616+    0, 27616+    4,              27616+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 27616+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           27624+    0,     8);
		API_polar::template xo <    8>(s,    27616+    0, 27616+    8,              27616+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 27616+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           27632+    0,    16);
		API_polar::template xo <   16>(s,    27616+    0, 27616+   16,              27616+    0,    16);
		API_polar::template xo <   32>(s,    27584+    0, 27584+   32,              27584+    0,    32);
		API_polar::template xo <   64>(s,    27520+    0, 27520+   64,              27520+    0,    64);
		API_polar::template xo <  128>(s,    27392+    0, 27392+  128,              27392+    0,   128);
		API_polar::template xo <  256>(s,    27136+    0, 27136+  256,              27136+    0,   256);
		API_polar::template xo <  512>(s,    26624+    0, 26624+  512,              26624+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 26624+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template rep<  128>(s, l, 65280+    0,                           27648+    0,   128);
		API_polar::template gr <  128>(s, l, 65024+    0, 65024+  128, 27648+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template rep<   64>(s, l, 65408+    0,                           27776+    0,    64);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 27776+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           27840+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 27840+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27884+    0,     4);
		API_polar::template xo0<    4>(s,    27880+    4,                           27880+    0,     4);
		API_polar::template xo0<    8>(s,    27872+    8,                           27872+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 27872+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           27888+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 27888+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27892+    0,     4);
		API_polar::template xo <    4>(s,    27888+    0, 27888+    4,              27888+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 27888+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           27896+    0,     8);
		API_polar::template xo <    8>(s,    27888+    0, 27888+    8,              27888+    0,     8);
		API_polar::template xo <   16>(s,    27872+    0, 27872+   16,              27872+    0,    16);
		API_polar::template xo <   32>(s,    27840+    0, 27840+   32,              27840+    0,    32);
		API_polar::template xo <   64>(s,    27776+    0, 27776+   64,              27776+    0,    64);
		API_polar::template xo <  128>(s,    27648+    0, 27648+  128,              27648+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 27648+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template rep<   64>(s, l, 65408+    0,                           27904+    0,    64);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 27904+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           27984+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 27984+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           27992+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 27992+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           27996+    0,     4);
		API_polar::template xo <    4>(s,    27992+    0, 27992+    4,              27992+    0,     4);
		API_polar::template xo <    8>(s,    27984+    0, 27984+    8,              27984+    0,     8);
		API_polar::template xo0<   16>(s,    27968+   16,                           27968+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 27968+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           28000+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 28000+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28008+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28008+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28012+    0,     4);
		API_polar::template xo <    4>(s,    28008+    0, 28008+    4,              28008+    0,     4);
		API_polar::template xo <    8>(s,    28000+    0, 28000+    8,              28000+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28000+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28016+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28016+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28020+    0,     4);
		API_polar::template xo <    4>(s,    28016+    0, 28016+    4,              28016+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28016+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28024+    0,     8);
		API_polar::template xo <    8>(s,    28016+    0, 28016+    8,              28016+    0,     8);
		API_polar::template xo <   16>(s,    28000+    0, 28000+   16,              28000+    0,    16);
		API_polar::template xo <   32>(s,    27968+    0, 27968+   32,              27968+    0,    32);
		API_polar::template xo <   64>(s,    27904+    0, 27904+   64,              27904+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 27904+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           28032+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 28032+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           28048+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 28048+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28056+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28056+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28060+    0,     4);
		API_polar::template xo <    4>(s,    28056+    0, 28056+    4,              28056+    0,     4);
		API_polar::template xo <    8>(s,    28048+    0, 28048+    8,              28048+    0,     8);
		API_polar::template xo <   16>(s,    28032+    0, 28032+   16,              28032+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 28032+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           28064+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 28064+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28072+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28072+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28076+    0,     4);
		API_polar::template xo <    4>(s,    28072+    0, 28072+    4,              28072+    0,     4);
		API_polar::template xo <    8>(s,    28064+    0, 28064+    8,              28064+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28064+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28080+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28080+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28084+    0,     4);
		API_polar::template xo <    4>(s,    28080+    0, 28080+    4,              28080+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28080+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28088+    0,     8);
		API_polar::template xo <    8>(s,    28080+    0, 28080+    8,              28080+    0,     8);
		API_polar::template xo <   16>(s,    28064+    0, 28064+   16,              28064+    0,    16);
		API_polar::template xo <   32>(s,    28032+    0, 28032+   32,              28032+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 28032+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           28096+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 28096+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28104+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28104+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28108+    0,     4);
		API_polar::template xo <    4>(s,    28104+    0, 28104+    4,              28104+    0,     4);
		API_polar::template xo <    8>(s,    28096+    0, 28096+    8,              28096+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28096+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28112+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28112+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28116+    0,     4);
		API_polar::template xo <    4>(s,    28112+    0, 28112+    4,              28112+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28112+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28120+    0,     8);
		API_polar::template xo <    8>(s,    28112+    0, 28112+    8,              28112+    0,     8);
		API_polar::template xo <   16>(s,    28096+    0, 28096+   16,              28096+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 28096+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28128+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28128+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28132+    0,     4);
		API_polar::template xo <    4>(s,    28128+    0, 28128+    4,              28128+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28128+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28136+    0,     8);
		API_polar::template xo <    8>(s,    28128+    0, 28128+    8,              28128+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28128+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           28144+    0,    16);
		API_polar::template xo <   16>(s,    28128+    0, 28128+   16,              28128+    0,    16);
		API_polar::template xo <   32>(s,    28096+    0, 28096+   32,              28096+    0,    32);
		API_polar::template xo <   64>(s,    28032+    0, 28032+   64,              28032+    0,    64);
		API_polar::template xo <  128>(s,    27904+    0, 27904+  128,              27904+    0,   128);
		API_polar::template xo <  256>(s,    27648+    0, 27648+  256,              27648+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 27648+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           28192+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 28192+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           28208+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 28208+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28216+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28216+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28220+    0,     4);
		API_polar::template xo <    4>(s,    28216+    0, 28216+    4,              28216+    0,     4);
		API_polar::template xo <    8>(s,    28208+    0, 28208+    8,              28208+    0,     8);
		API_polar::template xo <   16>(s,    28192+    0, 28192+   16,              28192+    0,    16);
		API_polar::template xo0<   32>(s,    28160+   32,                           28160+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 28160+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           28224+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 28224+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           28240+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 28240+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28248+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28248+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28252+    0,     4);
		API_polar::template xo <    4>(s,    28248+    0, 28248+    4,              28248+    0,     4);
		API_polar::template xo <    8>(s,    28240+    0, 28240+    8,              28240+    0,     8);
		API_polar::template xo <   16>(s,    28224+    0, 28224+   16,              28224+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 28224+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           28256+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 28256+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28264+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28264+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28268+    0,     4);
		API_polar::template xo <    4>(s,    28264+    0, 28264+    4,              28264+    0,     4);
		API_polar::template xo <    8>(s,    28256+    0, 28256+    8,              28256+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28256+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28272+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28272+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28276+    0,     4);
		API_polar::template xo <    4>(s,    28272+    0, 28272+    4,              28272+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28272+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28280+    0,     8);
		API_polar::template xo <    8>(s,    28272+    0, 28272+    8,              28272+    0,     8);
		API_polar::template xo <   16>(s,    28256+    0, 28256+   16,              28256+    0,    16);
		API_polar::template xo <   32>(s,    28224+    0, 28224+   32,              28224+    0,    32);
		API_polar::template xo <   64>(s,    28160+    0, 28160+   64,              28160+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 28160+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           28288+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 28288+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           28304+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 28304+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28312+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28312+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28316+    0,     4);
		API_polar::template xo <    4>(s,    28312+    0, 28312+    4,              28312+    0,     4);
		API_polar::template xo <    8>(s,    28304+    0, 28304+    8,              28304+    0,     8);
		API_polar::template xo <   16>(s,    28288+    0, 28288+   16,              28288+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 28288+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           28320+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 28320+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28328+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28328+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28332+    0,     4);
		API_polar::template xo <    4>(s,    28328+    0, 28328+    4,              28328+    0,     4);
		API_polar::template xo <    8>(s,    28320+    0, 28320+    8,              28320+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28320+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28336+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28336+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28340+    0,     4);
		API_polar::template xo <    4>(s,    28336+    0, 28336+    4,              28336+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28336+    0, 65504+   16,     8);
		API_polar::template h  <    8>(s, l, 65520+    0,                           28344+    0,     8);
		API_polar::template xo <    8>(s,    28336+    0, 28336+    8,              28336+    0,     8);
		API_polar::template xo <   16>(s,    28320+    0, 28320+   16,              28320+    0,    16);
		API_polar::template xo <   32>(s,    28288+    0, 28288+   32,              28288+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 28288+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28356+    0,     4);
		API_polar::template xo0<    4>(s,    28352+    4,                           28352+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28352+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28360+    0,     8);
		API_polar::template xo <    8>(s,    28352+    0, 28352+    8,              28352+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28352+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           28368+    0,    16);
		API_polar::template xo <   16>(s,    28352+    0, 28352+   16,              28352+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 28352+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           28384+    0,    32);
		API_polar::template xo <   32>(s,    28352+    0, 28352+   32,              28352+    0,    32);
		API_polar::template xo <   64>(s,    28288+    0, 28288+   64,              28288+    0,    64);
		API_polar::template xo <  128>(s,    28160+    0, 28160+  128,              28160+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 28160+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           28416+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 28416+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template g0 <    2>(   l, 65528+    0, 65528+    2,              65528+    4,     2);
		API_polar::template h  <    2>(s, l, 65532+    0,                           28438+    0,     2);
		API_polar::template xo0<    2>(s,    28436+    2,                           28436+    0,     2);
		API_polar::template xo0<    4>(s,    28432+    4,                           28432+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28432+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28440+    0,     8);
		API_polar::template xo <    8>(s,    28432+    0, 28432+    8,              28432+    0,     8);
		API_polar::template xo <   16>(s,    28416+    0, 28416+   16,              28416+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 28416+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28448+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28448+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28452+    0,     4);
		API_polar::template xo <    4>(s,    28448+    0, 28448+    4,              28448+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28448+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28456+    0,     8);
		API_polar::template xo <    8>(s,    28448+    0, 28448+    8,              28448+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28448+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           28464+    0,    16);
		API_polar::template xo <   16>(s,    28448+    0, 28448+   16,              28448+    0,    16);
		API_polar::template xo <   32>(s,    28416+    0, 28416+   32,              28416+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 28416+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28480+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28480+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28484+    0,     4);
		API_polar::template xo <    4>(s,    28480+    0, 28480+    4,              28480+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28480+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28488+    0,     8);
		API_polar::template xo <    8>(s,    28480+    0, 28480+    8,              28480+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28480+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           28496+    0,    16);
		API_polar::template xo <   16>(s,    28480+    0, 28480+   16,              28480+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 28480+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           28512+    0,    32);
		API_polar::template xo <   32>(s,    28480+    0, 28480+   32,              28480+    0,    32);
		API_polar::template xo <   64>(s,    28416+    0, 28416+   64,              28416+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 28416+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           28544+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 28544+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           28548+    0,     4);
		API_polar::template xo <    4>(s,    28544+    0, 28544+    4,              28544+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 28544+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           28552+    0,     8);
		API_polar::template xo <    8>(s,    28544+    0, 28544+    8,              28544+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 28544+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           28560+    0,    16);
		API_polar::template xo <   16>(s,    28544+    0, 28544+   16,              28544+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 28544+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           28576+    0,    32);
		API_polar::template xo <   32>(s,    28544+    0, 28544+   32,              28544+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 28544+    0, 65280+  128,    64);
		API_polar::template spc<   64>(s, l, 65408+    0,                           28608+    0,    64);
		API_polar::template xo <   64>(s,    28544+    0, 28544+   64,              28544+    0,    64);
		API_polar::template xo <  128>(s,    28416+    0, 28416+  128,              28416+    0,   128);
		API_polar::template xo <  256>(s,    28160+    0, 28160+  256,              28160+    0,   256);
		API_polar::template xo <  512>(s,    27648+    0, 27648+  512,              27648+    0,   512);
		API_polar::template xo < 1024>(s,    26624+    0, 26624+ 1024,              26624+    0,  1024);
		API_polar::template xo < 2048>(s,    24576+    0, 24576+ 2048,              24576+    0,  2048);
		API_polar::template g  < 4096>(s, l, 49152+    0, 49152+ 4096, 24576+    0, 49152+ 8192,  4096);
		API_polar::template f  < 2048>(   l, 57344+    0, 57344+ 2048,              57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template g0 <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template g0 <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template rep<   64>(s, l, 65408+    0,                           29056+    0,    64);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 29056+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           29120+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 29120+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           29152+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 29152+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29168+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29168+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29176+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29176+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29180+    0,     4);
		API_polar::template xo <    4>(s,    29176+    0, 29176+    4,              29176+    0,     4);
		API_polar::template xo <    8>(s,    29168+    0, 29168+    8,              29168+    0,     8);
		API_polar::template xo <   16>(s,    29152+    0, 29152+   16,              29152+    0,    16);
		API_polar::template xo <   32>(s,    29120+    0, 29120+   32,              29120+    0,    32);
		API_polar::template xo <   64>(s,    29056+    0, 29056+   64,              29056+    0,    64);
		API_polar::template xo0<  128>(s,    28928+  128,                           28928+    0,   128);
		API_polar::template xo0<  256>(s,    28672+  256,                           28672+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 28672+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template rep<  128>(s, l, 65280+    0,                           29184+    0,   128);
		API_polar::template gr <  128>(s, l, 65024+    0, 65024+  128, 29184+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template rep<   64>(s, l, 65408+    0,                           29312+    0,    64);
		API_polar::template gr <   64>(s, l, 65280+    0, 65280+   64, 29312+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29400+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29400+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29404+    0,     4);
		API_polar::template xo <    4>(s,    29400+    0, 29400+    4,              29400+    0,     4);
		API_polar::template xo0<    8>(s,    29392+    8,                           29392+    0,     8);
		API_polar::template xo0<   16>(s,    29376+   16,                           29376+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 29376+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29408+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29408+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29416+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29416+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29420+    0,     4);
		API_polar::template xo <    4>(s,    29416+    0, 29416+    4,              29416+    0,     4);
		API_polar::template xo <    8>(s,    29408+    0, 29408+    8,              29408+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 29408+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29424+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29424+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29428+    0,     4);
		API_polar::template xo <    4>(s,    29424+    0, 29424+    4,              29424+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 29424+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           29432+    0,     8);
		API_polar::template xo <    8>(s,    29424+    0, 29424+    8,              29424+    0,     8);
		API_polar::template xo <   16>(s,    29408+    0, 29408+   16,              29408+    0,    16);
		API_polar::template xo <   32>(s,    29376+    0, 29376+   32,              29376+    0,    32);
		API_polar::template xo <   64>(s,    29312+    0, 29312+   64,              29312+    0,    64);
		API_polar::template xo <  128>(s,    29184+    0, 29184+  128,              29184+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 29184+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29488+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29488+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29496+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29496+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29500+    0,     4);
		API_polar::template xo <    4>(s,    29496+    0, 29496+    4,              29496+    0,     4);
		API_polar::template xo <    8>(s,    29488+    0, 29488+    8,              29488+    0,     8);
		API_polar::template xo0<   16>(s,    29472+   16,                           29472+    0,    16);
		API_polar::template xo0<   32>(s,    29440+   32,                           29440+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 29440+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           29504+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 29504+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29520+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29520+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29528+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29528+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29532+    0,     4);
		API_polar::template xo <    4>(s,    29528+    0, 29528+    4,              29528+    0,     4);
		API_polar::template xo <    8>(s,    29520+    0, 29520+    8,              29520+    0,     8);
		API_polar::template xo <   16>(s,    29504+    0, 29504+   16,              29504+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 29504+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29536+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29536+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29544+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29544+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29548+    0,     4);
		API_polar::template xo <    4>(s,    29544+    0, 29544+    4,              29544+    0,     4);
		API_polar::template xo <    8>(s,    29536+    0, 29536+    8,              29536+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 29536+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29552+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29552+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29556+    0,     4);
		API_polar::template xo <    4>(s,    29552+    0, 29552+    4,              29552+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 29552+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           29560+    0,     8);
		API_polar::template xo <    8>(s,    29552+    0, 29552+    8,              29552+    0,     8);
		API_polar::template xo <   16>(s,    29536+    0, 29536+   16,              29536+    0,    16);
		API_polar::template xo <   32>(s,    29504+    0, 29504+   32,              29504+    0,    32);
		API_polar::template xo <   64>(s,    29440+    0, 29440+   64,              29440+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 29440+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           29568+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 29568+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29584+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29584+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29592+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29592+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29596+    0,     4);
		API_polar::template xo <    4>(s,    29592+    0, 29592+    4,              29592+    0,     4);
		API_polar::template xo <    8>(s,    29584+    0, 29584+    8,              29584+    0,     8);
		API_polar::template xo <   16>(s,    29568+    0, 29568+   16,              29568+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 29568+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29600+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29600+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29608+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29608+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29612+    0,     4);
		API_polar::template xo <    4>(s,    29608+    0, 29608+    4,              29608+    0,     4);
		API_polar::template xo <    8>(s,    29600+    0, 29600+    8,              29600+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 29600+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29616+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29616+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29620+    0,     4);
		API_polar::template xo <    4>(s,    29616+    0, 29616+    4,              29616+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 29616+    0, 65504+   16,     8);
		API_polar::template h  <    8>(s, l, 65520+    0,                           29624+    0,     8);
		API_polar::template xo <    8>(s,    29616+    0, 29616+    8,              29616+    0,     8);
		API_polar::template xo <   16>(s,    29600+    0, 29600+   16,              29600+    0,    16);
		API_polar::template xo <   32>(s,    29568+    0, 29568+   32,              29568+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 29568+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29632+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29632+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29640+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29640+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29644+    0,     4);
		API_polar::template xo <    4>(s,    29640+    0, 29640+    4,              29640+    0,     4);
		API_polar::template xo <    8>(s,    29632+    0, 29632+    8,              29632+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 29632+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29648+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29648+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29652+    0,     4);
		API_polar::template xo <    4>(s,    29648+    0, 29648+    4,              29648+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 29648+    0, 65504+   16,     8);
		API_polar::template h  <    8>(s, l, 65520+    0,                           29656+    0,     8);
		API_polar::template xo <    8>(s,    29648+    0, 29648+    8,              29648+    0,     8);
		API_polar::template xo <   16>(s,    29632+    0, 29632+   16,              29632+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 29632+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           29664+    0,    32);
		API_polar::template xo <   32>(s,    29632+    0, 29632+   32,              29632+    0,    32);
		API_polar::template xo <   64>(s,    29568+    0, 29568+   64,              29568+    0,    64);
		API_polar::template xo <  128>(s,    29440+    0, 29440+  128,              29440+    0,   128);
		API_polar::template xo <  256>(s,    29184+    0, 29184+  256,              29184+    0,   256);
		API_polar::template xo <  512>(s,    28672+    0, 28672+  512,              28672+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 28672+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29816+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29816+    0, 65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29820+    0,     4);
		API_polar::template xo <    4>(s,    29816+    0, 29816+    4,              29816+    0,     4);
		API_polar::template xo0<    8>(s,    29808+    8,                           29808+    0,     8);
		API_polar::template xo0<   16>(s,    29792+   16,                           29792+    0,    16);
		API_polar::template xo0<   32>(s,    29760+   32,                           29760+    0,    32);
		API_polar::template xo0<   64>(s,    29696+   64,                           29696+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 29696+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template g0 <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           29856+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 29856+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29872+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29872+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29880+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29880+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29884+    0,     4);
		API_polar::template xo <    4>(s,    29880+    0, 29880+    4,              29880+    0,     4);
		API_polar::template xo <    8>(s,    29872+    0, 29872+    8,              29872+    0,     8);
		API_polar::template xo <   16>(s,    29856+    0, 29856+   16,              29856+    0,    16);
		API_polar::template xo0<   32>(s,    29824+   32,                           29824+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 29824+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           29888+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 29888+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29904+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29904+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29912+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29912+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29916+    0,     4);
		API_polar::template xo <    4>(s,    29912+    0, 29912+    4,              29912+    0,     4);
		API_polar::template xo <    8>(s,    29904+    0, 29904+    8,              29904+    0,     8);
		API_polar::template xo <   16>(s,    29888+    0, 29888+   16,              29888+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 29888+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           29920+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 29920+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29928+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29928+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29932+    0,     4);
		API_polar::template xo <    4>(s,    29928+    0, 29928+    4,              29928+    0,     4);
		API_polar::template xo <    8>(s,    29920+    0, 29920+    8,              29920+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 29920+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           29936+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 29936+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           29940+    0,     4);
		API_polar::template xo <    4>(s,    29936+    0, 29936+    4,              29936+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 29936+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           29944+    0,     8);
		API_polar::template xo <    8>(s,    29936+    0, 29936+    8,              29936+    0,     8);
		API_polar::template xo <   16>(s,    29920+    0, 29920+   16,              29920+    0,    16);
		API_polar::template xo <   32>(s,    29888+    0, 29888+   32,              29888+    0,    32);
		API_polar::template xo <   64>(s,    29824+    0, 29824+   64,              29824+    0,    64);
		API_polar::template xo <  128>(s,    29696+    0, 29696+  128,              29696+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 29696+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           29952+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 29952+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           29984+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 29984+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           30000+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 30000+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30008+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30008+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30012+    0,     4);
		API_polar::template xo <    4>(s,    30008+    0, 30008+    4,              30008+    0,     4);
		API_polar::template xo <    8>(s,    30000+    0, 30000+    8,              30000+    0,     8);
		API_polar::template xo <   16>(s,    29984+    0, 29984+   16,              29984+    0,    16);
		API_polar::template xo <   32>(s,    29952+    0, 29952+   32,              29952+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 29952+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           30016+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 30016+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           30032+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 30032+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30040+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30040+    0, 65520+    8,     4);
		API_polar::template h  <    4>(s, l, 65528+    0,                           30044+    0,     4);
		API_polar::template xo <    4>(s,    30040+    0, 30040+    4,              30040+    0,     4);
		API_polar::template xo <    8>(s,    30032+    0, 30032+    8,              30032+    0,     8);
		API_polar::template xo <   16>(s,    30016+    0, 30016+   16,              30016+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30016+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           30048+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 30048+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30056+    0,     8);
		API_polar::template xo <    8>(s,    30048+    0, 30048+    8,              30048+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30048+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30064+    0,    16);
		API_polar::template xo <   16>(s,    30048+    0, 30048+   16,              30048+    0,    16);
		API_polar::template xo <   32>(s,    30016+    0, 30016+   32,              30016+    0,    32);
		API_polar::template xo <   64>(s,    29952+    0, 29952+   64,              29952+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 29952+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           30080+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 30080+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30096+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30096+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30100+    0,     4);
		API_polar::template xo <    4>(s,    30096+    0, 30096+    4,              30096+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30096+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30104+    0,     8);
		API_polar::template xo <    8>(s,    30096+    0, 30096+    8,              30096+    0,     8);
		API_polar::template xo <   16>(s,    30080+    0, 30080+   16,              30080+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30080+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30112+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30112+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30116+    0,     4);
		API_polar::template xo <    4>(s,    30112+    0, 30112+    4,              30112+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30112+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30120+    0,     8);
		API_polar::template xo <    8>(s,    30112+    0, 30112+    8,              30112+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30112+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30128+    0,    16);
		API_polar::template xo <   16>(s,    30112+    0, 30112+   16,              30112+    0,    16);
		API_polar::template xo <   32>(s,    30080+    0, 30080+   32,              30080+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 30080+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30144+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30144+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30148+    0,     4);
		API_polar::template xo <    4>(s,    30144+    0, 30144+    4,              30144+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30144+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30152+    0,     8);
		API_polar::template xo <    8>(s,    30144+    0, 30144+    8,              30144+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30144+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30160+    0,    16);
		API_polar::template xo <   16>(s,    30144+    0, 30144+   16,              30144+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30144+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           30176+    0,    32);
		API_polar::template xo <   32>(s,    30144+    0, 30144+   32,              30144+    0,    32);
		API_polar::template xo <   64>(s,    30080+    0, 30080+   64,              30080+    0,    64);
		API_polar::template xo <  128>(s,    29952+    0, 29952+  128,              29952+    0,   128);
		API_polar::template xo <  256>(s,    29696+    0, 29696+  256,              29696+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 29696+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           30208+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 30208+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           30240+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 30240+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template g0 <    2>(   l, 65528+    0, 65528+    2,              65528+    4,     2);
		API_polar::template h  <    2>(s, l, 65532+    0,                           30262+    0,     2);
		API_polar::template xo0<    2>(s,    30260+    2,                           30260+    0,     2);
		API_polar::template xo0<    4>(s,    30256+    4,                           30256+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30256+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30264+    0,     8);
		API_polar::template xo <    8>(s,    30256+    0, 30256+    8,              30256+    0,     8);
		API_polar::template xo <   16>(s,    30240+    0, 30240+   16,              30240+    0,    16);
		API_polar::template xo <   32>(s,    30208+    0, 30208+   32,              30208+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 30208+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30280+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30280+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30284+    0,     4);
		API_polar::template xo <    4>(s,    30280+    0, 30280+    4,              30280+    0,     4);
		API_polar::template xo0<    8>(s,    30272+    8,                           30272+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30272+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30288+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30288+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30292+    0,     4);
		API_polar::template xo <    4>(s,    30288+    0, 30288+    4,              30288+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30288+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30296+    0,     8);
		API_polar::template xo <    8>(s,    30288+    0, 30288+    8,              30288+    0,     8);
		API_polar::template xo <   16>(s,    30272+    0, 30272+   16,              30272+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30272+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30304+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30304+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30308+    0,     4);
		API_polar::template xo <    4>(s,    30304+    0, 30304+    4,              30304+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30304+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30312+    0,     8);
		API_polar::template xo <    8>(s,    30304+    0, 30304+    8,              30304+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30304+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30320+    0,    16);
		API_polar::template xo <   16>(s,    30304+    0, 30304+   16,              30304+    0,    16);
		API_polar::template xo <   32>(s,    30272+    0, 30272+   32,              30272+    0,    32);
		API_polar::template xo <   64>(s,    30208+    0, 30208+   64,              30208+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 30208+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           30336+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 30336+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30344+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30344+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30348+    0,     4);
		API_polar::template xo <    4>(s,    30344+    0, 30344+    4,              30344+    0,     4);
		API_polar::template xo <    8>(s,    30336+    0, 30336+    8,              30336+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30336+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30352+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30352+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30356+    0,     4);
		API_polar::template xo <    4>(s,    30352+    0, 30352+    4,              30352+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30352+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30360+    0,     8);
		API_polar::template xo <    8>(s,    30352+    0, 30352+    8,              30352+    0,     8);
		API_polar::template xo <   16>(s,    30336+    0, 30336+   16,              30336+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30336+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30368+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30368+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30372+    0,     4);
		API_polar::template xo <    4>(s,    30368+    0, 30368+    4,              30368+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30368+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30376+    0,     8);
		API_polar::template xo <    8>(s,    30368+    0, 30368+    8,              30368+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30368+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30384+    0,    16);
		API_polar::template xo <   16>(s,    30368+    0, 30368+   16,              30368+    0,    16);
		API_polar::template xo <   32>(s,    30336+    0, 30336+   32,              30336+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 30336+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30400+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30400+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30404+    0,     4);
		API_polar::template xo <    4>(s,    30400+    0, 30400+    4,              30400+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30400+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30408+    0,     8);
		API_polar::template xo <    8>(s,    30400+    0, 30400+    8,              30400+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30400+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30416+    0,    16);
		API_polar::template xo <   16>(s,    30400+    0, 30400+   16,              30400+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30400+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           30432+    0,    32);
		API_polar::template xo <   32>(s,    30400+    0, 30400+   32,              30400+    0,    32);
		API_polar::template xo <   64>(s,    30336+    0, 30336+   64,              30336+    0,    64);
		API_polar::template xo <  128>(s,    30208+    0, 30208+  128,              30208+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 30208+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           30464+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 30464+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30472+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30472+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30476+    0,     4);
		API_polar::template xo <    4>(s,    30472+    0, 30472+    4,              30472+    0,     4);
		API_polar::template xo <    8>(s,    30464+    0, 30464+    8,              30464+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30464+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30480+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30480+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30484+    0,     4);
		API_polar::template xo <    4>(s,    30480+    0, 30480+    4,              30480+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30480+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30488+    0,     8);
		API_polar::template xo <    8>(s,    30480+    0, 30480+    8,              30480+    0,     8);
		API_polar::template xo <   16>(s,    30464+    0, 30464+   16,              30464+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30464+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30496+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30496+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30500+    0,     4);
		API_polar::template xo <    4>(s,    30496+    0, 30496+    4,              30496+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30496+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30504+    0,     8);
		API_polar::template xo <    8>(s,    30496+    0, 30496+    8,              30496+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30496+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30512+    0,    16);
		API_polar::template xo <   16>(s,    30496+    0, 30496+   16,              30496+    0,    16);
		API_polar::template xo <   32>(s,    30464+    0, 30464+   32,              30464+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 30464+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30528+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30528+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30532+    0,     4);
		API_polar::template xo <    4>(s,    30528+    0, 30528+    4,              30528+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30528+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30536+    0,     8);
		API_polar::template xo <    8>(s,    30528+    0, 30528+    8,              30528+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30528+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30544+    0,    16);
		API_polar::template xo <   16>(s,    30528+    0, 30528+   16,              30528+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30528+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           30560+    0,    32);
		API_polar::template xo <   32>(s,    30528+    0, 30528+   32,              30528+    0,    32);
		API_polar::template xo <   64>(s,    30464+    0, 30464+   64,              30464+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 30464+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30592+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30592+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30596+    0,     4);
		API_polar::template xo <    4>(s,    30592+    0, 30592+    4,              30592+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30592+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30600+    0,     8);
		API_polar::template xo <    8>(s,    30592+    0, 30592+    8,              30592+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30592+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30608+    0,    16);
		API_polar::template xo <   16>(s,    30592+    0, 30592+   16,              30592+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30592+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           30624+    0,    32);
		API_polar::template xo <   32>(s,    30592+    0, 30592+   32,              30592+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 30592+    0, 65280+  128,    64);
		API_polar::template spc<   64>(s, l, 65408+    0,                           30656+    0,    64);
		API_polar::template xo <   64>(s,    30592+    0, 30592+   64,              30592+    0,    64);
		API_polar::template xo <  128>(s,    30464+    0, 30464+  128,              30464+    0,   128);
		API_polar::template xo <  256>(s,    30208+    0, 30208+  256,              30208+    0,   256);
		API_polar::template xo <  512>(s,    29696+    0, 29696+  512,              29696+    0,   512);
		API_polar::template xo < 1024>(s,    28672+    0, 28672+ 1024,              28672+    0,  1024);
		API_polar::template g  < 2048>(s, l, 57344+    0, 57344+ 2048, 28672+    0, 57344+ 4096,  2048);
		API_polar::template f  < 1024>(   l, 61440+    0, 61440+ 1024,              61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template g0 <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           30784+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 30784+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           30816+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 30816+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           30832+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 30832+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30840+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30840+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30844+    0,     4);
		API_polar::template xo <    4>(s,    30840+    0, 30840+    4,              30840+    0,     4);
		API_polar::template xo <    8>(s,    30832+    0, 30832+    8,              30832+    0,     8);
		API_polar::template xo <   16>(s,    30816+    0, 30816+   16,              30816+    0,    16);
		API_polar::template xo <   32>(s,    30784+    0, 30784+   32,              30784+    0,    32);
		API_polar::template xo0<   64>(s,    30720+   64,                           30720+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 30720+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           30848+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 30848+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           30880+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 30880+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           30896+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 30896+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30904+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30904+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30908+    0,     4);
		API_polar::template xo <    4>(s,    30904+    0, 30904+    4,              30904+    0,     4);
		API_polar::template xo <    8>(s,    30896+    0, 30896+    8,              30896+    0,     8);
		API_polar::template xo <   16>(s,    30880+    0, 30880+   16,              30880+    0,    16);
		API_polar::template xo <   32>(s,    30848+    0, 30848+   32,              30848+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 30848+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           30912+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 30912+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30932+    0,     4);
		API_polar::template xo0<    4>(s,    30928+    4,                           30928+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30928+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30936+    0,     8);
		API_polar::template xo <    8>(s,    30928+    0, 30928+    8,              30928+    0,     8);
		API_polar::template xo <   16>(s,    30912+    0, 30912+   16,              30912+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 30912+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           30944+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 30944+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           30948+    0,     4);
		API_polar::template xo <    4>(s,    30944+    0, 30944+    4,              30944+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 30944+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           30952+    0,     8);
		API_polar::template xo <    8>(s,    30944+    0, 30944+    8,              30944+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 30944+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           30960+    0,    16);
		API_polar::template xo <   16>(s,    30944+    0, 30944+   16,              30944+    0,    16);
		API_polar::template xo <   32>(s,    30912+    0, 30912+   32,              30912+    0,    32);
		API_polar::template xo <   64>(s,    30848+    0, 30848+   64,              30848+    0,    64);
		API_polar::template xo <  128>(s,    30720+    0, 30720+  128,              30720+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 30720+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template rep<   32>(s, l, 65472+    0,                           30976+    0,    32);
		API_polar::template gr <   32>(s, l, 65408+    0, 65408+   32, 30976+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template g0 <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31020+    0,     4);
		API_polar::template xo0<    4>(s,    31016+    4,                           31016+    0,     4);
		API_polar::template xo0<    8>(s,    31008+    8,                           31008+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31008+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31024+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31024+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31028+    0,     4);
		API_polar::template xo <    4>(s,    31024+    0, 31024+    4,              31024+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31024+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31032+    0,     8);
		API_polar::template xo <    8>(s,    31024+    0, 31024+    8,              31024+    0,     8);
		API_polar::template xo <   16>(s,    31008+    0, 31008+   16,              31008+    0,    16);
		API_polar::template xo <   32>(s,    30976+    0, 30976+   32,              30976+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 30976+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template g0 <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31048+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31048+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31052+    0,     4);
		API_polar::template xo <    4>(s,    31048+    0, 31048+    4,              31048+    0,     4);
		API_polar::template xo0<    8>(s,    31040+    8,                           31040+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31040+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31056+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31056+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31060+    0,     4);
		API_polar::template xo <    4>(s,    31056+    0, 31056+    4,              31056+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31056+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31064+    0,     8);
		API_polar::template xo <    8>(s,    31056+    0, 31056+    8,              31056+    0,     8);
		API_polar::template xo <   16>(s,    31040+    0, 31040+   16,              31040+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31040+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31072+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31072+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31076+    0,     4);
		API_polar::template xo <    4>(s,    31072+    0, 31072+    4,              31072+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31072+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31080+    0,     8);
		API_polar::template xo <    8>(s,    31072+    0, 31072+    8,              31072+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31072+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           31088+    0,    16);
		API_polar::template xo <   16>(s,    31072+    0, 31072+   16,              31072+    0,    16);
		API_polar::template xo <   32>(s,    31040+    0, 31040+   32,              31040+    0,    32);
		API_polar::template xo <   64>(s,    30976+    0, 30976+   64,              30976+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 30976+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31104+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31104+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31112+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31112+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31116+    0,     4);
		API_polar::template xo <    4>(s,    31112+    0, 31112+    4,              31112+    0,     4);
		API_polar::template xo <    8>(s,    31104+    0, 31104+    8,              31104+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31104+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31120+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31120+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31124+    0,     4);
		API_polar::template xo <    4>(s,    31120+    0, 31120+    4,              31120+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31120+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31128+    0,     8);
		API_polar::template xo <    8>(s,    31120+    0, 31120+    8,              31120+    0,     8);
		API_polar::template xo <   16>(s,    31104+    0, 31104+   16,              31104+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31104+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31136+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31136+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31140+    0,     4);
		API_polar::template xo <    4>(s,    31136+    0, 31136+    4,              31136+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31136+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31144+    0,     8);
		API_polar::template xo <    8>(s,    31136+    0, 31136+    8,              31136+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31136+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           31152+    0,    16);
		API_polar::template xo <   16>(s,    31136+    0, 31136+   16,              31136+    0,    16);
		API_polar::template xo <   32>(s,    31104+    0, 31104+   32,              31104+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 31104+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31168+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31168+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31172+    0,     4);
		API_polar::template xo <    4>(s,    31168+    0, 31168+    4,              31168+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31168+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31176+    0,     8);
		API_polar::template xo <    8>(s,    31168+    0, 31168+    8,              31168+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31168+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           31184+    0,    16);
		API_polar::template xo <   16>(s,    31168+    0, 31168+   16,              31168+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31168+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           31200+    0,    32);
		API_polar::template xo <   32>(s,    31168+    0, 31168+   32,              31168+    0,    32);
		API_polar::template xo <   64>(s,    31104+    0, 31104+   64,              31104+    0,    64);
		API_polar::template xo <  128>(s,    30976+    0, 30976+  128,              30976+    0,   128);
		API_polar::template xo <  256>(s,    30720+    0, 30720+  256,              30720+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 30720+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template g0 <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31248+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31248+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31256+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31256+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31260+    0,     4);
		API_polar::template xo <    4>(s,    31256+    0, 31256+    4,              31256+    0,     4);
		API_polar::template xo <    8>(s,    31248+    0, 31248+    8,              31248+    0,     8);
		API_polar::template xo0<   16>(s,    31232+   16,                           31232+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31232+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31264+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31264+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31272+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31272+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31276+    0,     4);
		API_polar::template xo <    4>(s,    31272+    0, 31272+    4,              31272+    0,     4);
		API_polar::template xo <    8>(s,    31264+    0, 31264+    8,              31264+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31264+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31280+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31280+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31284+    0,     4);
		API_polar::template xo <    4>(s,    31280+    0, 31280+    4,              31280+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31280+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31288+    0,     8);
		API_polar::template xo <    8>(s,    31280+    0, 31280+    8,              31280+    0,     8);
		API_polar::template xo <   16>(s,    31264+    0, 31264+   16,              31264+    0,    16);
		API_polar::template xo <   32>(s,    31232+    0, 31232+   32,              31232+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 31232+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31296+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31296+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31304+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31304+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31308+    0,     4);
		API_polar::template xo <    4>(s,    31304+    0, 31304+    4,              31304+    0,     4);
		API_polar::template xo <    8>(s,    31296+    0, 31296+    8,              31296+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31296+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31312+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31312+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31316+    0,     4);
		API_polar::template xo <    4>(s,    31312+    0, 31312+    4,              31312+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31312+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31320+    0,     8);
		API_polar::template xo <    8>(s,    31312+    0, 31312+    8,              31312+    0,     8);
		API_polar::template xo <   16>(s,    31296+    0, 31296+   16,              31296+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31296+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31328+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31328+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31332+    0,     4);
		API_polar::template xo <    4>(s,    31328+    0, 31328+    4,              31328+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31328+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31336+    0,     8);
		API_polar::template xo <    8>(s,    31328+    0, 31328+    8,              31328+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31328+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           31344+    0,    16);
		API_polar::template xo <   16>(s,    31328+    0, 31328+   16,              31328+    0,    16);
		API_polar::template xo <   32>(s,    31296+    0, 31296+   32,              31296+    0,    32);
		API_polar::template xo <   64>(s,    31232+    0, 31232+   64,              31232+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 31232+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31360+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31360+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31368+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31368+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31372+    0,     4);
		API_polar::template xo <    4>(s,    31368+    0, 31368+    4,              31368+    0,     4);
		API_polar::template xo <    8>(s,    31360+    0, 31360+    8,              31360+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31360+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31376+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31376+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31380+    0,     4);
		API_polar::template xo <    4>(s,    31376+    0, 31376+    4,              31376+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31376+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31384+    0,     8);
		API_polar::template xo <    8>(s,    31376+    0, 31376+    8,              31376+    0,     8);
		API_polar::template xo <   16>(s,    31360+    0, 31360+   16,              31360+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31360+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31392+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31392+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31396+    0,     4);
		API_polar::template xo <    4>(s,    31392+    0, 31392+    4,              31392+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31392+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31400+    0,     8);
		API_polar::template xo <    8>(s,    31392+    0, 31392+    8,              31392+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31392+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           31408+    0,    16);
		API_polar::template xo <   16>(s,    31392+    0, 31392+   16,              31392+    0,    16);
		API_polar::template xo <   32>(s,    31360+    0, 31360+   32,              31360+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 31360+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31424+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31424+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31428+    0,     4);
		API_polar::template xo <    4>(s,    31424+    0, 31424+    4,              31424+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31424+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31432+    0,     8);
		API_polar::template xo <    8>(s,    31424+    0, 31424+    8,              31424+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31424+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           31440+    0,    16);
		API_polar::template xo <   16>(s,    31424+    0, 31424+   16,              31424+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31424+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           31456+    0,    32);
		API_polar::template xo <   32>(s,    31424+    0, 31424+   32,              31424+    0,    32);
		API_polar::template xo <   64>(s,    31360+    0, 31360+   64,              31360+    0,    64);
		API_polar::template xo <  128>(s,    31232+    0, 31232+  128,              31232+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 31232+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31488+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31488+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31496+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31496+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31500+    0,     4);
		API_polar::template xo <    4>(s,    31496+    0, 31496+    4,              31496+    0,     4);
		API_polar::template xo <    8>(s,    31488+    0, 31488+    8,              31488+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31488+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31504+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31504+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31508+    0,     4);
		API_polar::template xo <    4>(s,    31504+    0, 31504+    4,              31504+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31504+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31512+    0,     8);
		API_polar::template xo <    8>(s,    31504+    0, 31504+    8,              31504+    0,     8);
		API_polar::template xo <   16>(s,    31488+    0, 31488+   16,              31488+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31488+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31520+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31520+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31524+    0,     4);
		API_polar::template xo <    4>(s,    31520+    0, 31520+    4,              31520+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31520+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31528+    0,     8);
		API_polar::template xo <    8>(s,    31520+    0, 31520+    8,              31520+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31520+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           31536+    0,    16);
		API_polar::template xo <   16>(s,    31520+    0, 31520+   16,              31520+    0,    16);
		API_polar::template xo <   32>(s,    31488+    0, 31488+   32,              31488+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 31488+    0, 65280+  128,    64);
		API_polar::template spc<   64>(s, l, 65408+    0,                           31552+    0,    64);
		API_polar::template xo <   64>(s,    31488+    0, 31488+   64,              31488+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 31488+    0, 65024+  256,   128);
		API_polar::template spc<  128>(s, l, 65280+    0,                           31616+    0,   128);
		API_polar::template xo <  128>(s,    31488+    0, 31488+  128,              31488+    0,   128);
		API_polar::template xo <  256>(s,    31232+    0, 31232+  256,              31232+    0,   256);
		API_polar::template xo <  512>(s,    30720+    0, 30720+  512,              30720+    0,   512);
		API_polar::template g  < 1024>(s, l, 61440+    0, 61440+ 1024, 30720+    0, 61440+ 2048,  1024);
		API_polar::template f  <  512>(   l, 63488+    0, 63488+  512,              63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template rep<   16>(s, l, 65504+    0,                           31744+    0,    16);
		API_polar::template gr <   16>(s, l, 65472+    0, 65472+   16, 31744+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31760+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31760+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31768+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31768+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31772+    0,     4);
		API_polar::template xo <    4>(s,    31768+    0, 31768+    4,              31768+    0,     4);
		API_polar::template xo <    8>(s,    31760+    0, 31760+    8,              31760+    0,     8);
		API_polar::template xo <   16>(s,    31744+    0, 31744+   16,              31744+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31744+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31776+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31776+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31784+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31784+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31788+    0,     4);
		API_polar::template xo <    4>(s,    31784+    0, 31784+    4,              31784+    0,     4);
		API_polar::template xo <    8>(s,    31776+    0, 31776+    8,              31776+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31776+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31792+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31792+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31796+    0,     4);
		API_polar::template xo <    4>(s,    31792+    0, 31792+    4,              31792+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31792+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31800+    0,     8);
		API_polar::template xo <    8>(s,    31792+    0, 31792+    8,              31792+    0,     8);
		API_polar::template xo <   16>(s,    31776+    0, 31776+   16,              31776+    0,    16);
		API_polar::template xo <   32>(s,    31744+    0, 31744+   32,              31744+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 31744+    0, 65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31808+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31808+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31816+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31816+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31820+    0,     4);
		API_polar::template xo <    4>(s,    31816+    0, 31816+    4,              31816+    0,     4);
		API_polar::template xo <    8>(s,    31808+    0, 31808+    8,              31808+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31808+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31824+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31824+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31828+    0,     4);
		API_polar::template xo <    4>(s,    31824+    0, 31824+    4,              31824+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31824+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31832+    0,     8);
		API_polar::template xo <    8>(s,    31824+    0, 31824+    8,              31824+    0,     8);
		API_polar::template xo <   16>(s,    31808+    0, 31808+   16,              31808+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31808+    0, 65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31840+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31840+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31844+    0,     4);
		API_polar::template xo <    4>(s,    31840+    0, 31840+    4,              31840+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31840+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           31848+    0,     8);
		API_polar::template xo <    8>(s,    31840+    0, 31840+    8,              31840+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31840+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           31856+    0,    16);
		API_polar::template xo <   16>(s,    31840+    0, 31840+   16,              31840+    0,    16);
		API_polar::template xo <   32>(s,    31808+    0, 31808+   32,              31808+    0,    32);
		API_polar::template xo <   64>(s,    31744+    0, 31744+   64,              31744+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 31744+    0, 65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           31872+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 31872+    0, 65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           31880+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 31880+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           31884+    0,     4);
		API_polar::template xo <    4>(s,    31880+    0, 31880+    4,              31880+    0,     4);
		API_polar::template xo <    8>(s,    31872+    0, 31872+    8,              31872+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 31872+    0, 65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template g0 <    2>(   l, 65528+    0, 65528+    2,              65528+    4,     2);
		API_polar::template h  <    2>(s, l, 65532+    0,                           31890+    0,     2);
		API_polar::template xo0<    2>(s,    31888+    2,                           31888+    0,     2);
		API_polar::template g  <    4>(s, l, 65520+    0, 65520+    4, 31888+    0, 65520+    8,     4);
		API_polar::template h  <    4>(s, l, 65528+    0,                           31892+    0,     4);
		API_polar::template xo <    4>(s,    31888+    0, 31888+    4,              31888+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 31888+    0, 65504+   16,     8);
		API_polar::template h  <    8>(s, l, 65520+    0,                           31896+    0,     8);
		API_polar::template xo <    8>(s,    31888+    0, 31888+    8,              31888+    0,     8);
		API_polar::template xo <   16>(s,    31872+    0, 31872+   16,              31872+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 31872+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           31904+    0,    32);
		API_polar::template xo <   32>(s,    31872+    0, 31872+   32,              31872+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 31872+    0, 65280+  128,    64);
		API_polar::template spc<   64>(s, l, 65408+    0,                           31936+    0,    64);
		API_polar::template xo <   64>(s,    31872+    0, 31872+   64,              31872+    0,    64);
		API_polar::template xo <  128>(s,    31744+    0, 31744+  128,              31744+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 31744+    0, 64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template rep<    8>(s, l, 65520+    0,                           32000+    0,     8);
		API_polar::template gr <    8>(s, l, 65504+    0, 65504+    8, 32000+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           32008+    0,     8);
		API_polar::template xo <    8>(s,    32000+    0, 32000+    8,              32000+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 32000+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           32016+    0,    16);
		API_polar::template xo <   16>(s,    32000+    0, 32000+   16,              32000+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 32000+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           32032+    0,    32);
		API_polar::template xo <   32>(s,    32000+    0, 32000+   32,              32000+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 32000+    0, 65280+  128,    64);
		API_polar::template spc<   64>(s, l, 65408+    0,                           32064+    0,    64);
		API_polar::template xo <   64>(s,    32000+    0, 32000+   64,              32000+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 32000+    0, 65024+  256,   128);
		API_polar::template spc<  128>(s, l, 65280+    0,                           32128+    0,   128);
		API_polar::template xo <  128>(s,    32000+    0, 32000+  128,              32000+    0,   128);
		API_polar::template xo <  256>(s,    31744+    0, 31744+  256,              31744+    0,   256);
		API_polar::template g  <  512>(s, l, 63488+    0, 63488+  512, 31744+    0, 63488+ 1024,   512);
		API_polar::template f  <  256>(   l, 64512+    0, 64512+  256,              64512+  512,   256);
		API_polar::template f  <  128>(   l, 65024+    0, 65024+  128,              65024+  256,   128);
		API_polar::template f  <   64>(   l, 65280+    0, 65280+   64,              65280+  128,    64);
		API_polar::template f  <   32>(   l, 65408+    0, 65408+   32,              65408+   64,    32);
		API_polar::template f  <   16>(   l, 65472+    0, 65472+   16,              65472+   32,    16);
		API_polar::template f  <    8>(   l, 65504+    0, 65504+    8,              65504+   16,     8);
		API_polar::template f  <    4>(   l, 65520+    0, 65520+    4,              65520+    8,     4);
		API_polar::template rep<    4>(s, l, 65528+    0,                           32256+    0,     4);
		API_polar::template gr <    4>(s, l, 65520+    0, 65520+    4, 32256+    0, 65520+    8,     4);
		API_polar::template spc<    4>(s, l, 65528+    0,                           32260+    0,     4);
		API_polar::template xo <    4>(s,    32256+    0, 32256+    4,              32256+    0,     4);
		API_polar::template g  <    8>(s, l, 65504+    0, 65504+    8, 32256+    0, 65504+   16,     8);
		API_polar::template spc<    8>(s, l, 65520+    0,                           32264+    0,     8);
		API_polar::template xo <    8>(s,    32256+    0, 32256+    8,              32256+    0,     8);
		API_polar::template g  <   16>(s, l, 65472+    0, 65472+   16, 32256+    0, 65472+   32,    16);
		API_polar::template spc<   16>(s, l, 65504+    0,                           32272+    0,    16);
		API_polar::template xo <   16>(s,    32256+    0, 32256+   16,              32256+    0,    16);
		API_polar::template g  <   32>(s, l, 65408+    0, 65408+   32, 32256+    0, 65408+   64,    32);
		API_polar::template spc<   32>(s, l, 65472+    0,                           32288+    0,    32);
		API_polar::template xo <   32>(s,    32256+    0, 32256+   32,              32256+    0,    32);
		API_polar::template g  <   64>(s, l, 65280+    0, 65280+   64, 32256+    0, 65280+  128,    64);
		API_polar::template spc<   64>(s, l, 65408+    0,                           32320+    0,    64);
		API_polar::template xo <   64>(s,    32256+    0, 32256+   64,              32256+    0,    64);
		API_polar::template g  <  128>(s, l, 65024+    0, 65024+  128, 32256+    0, 65024+  256,   128);
		API_polar::template spc<  128>(s, l, 65280+    0,                           32384+    0,   128);
		API_polar::template xo <  128>(s,    32256+    0, 32256+  128,              32256+    0,   128);
		API_polar::template g  <  256>(s, l, 64512+    0, 64512+  256, 32256+    0, 64512+  512,   256);
		API_polar::template spc<  256>(s, l, 65024+    0,                           32512+    0,   256);
		API_polar::template xo <  256>(s,    32256+    0, 32256+  256,              32256+    0,   256);
		API_polar::template xo <  512>(s,    31744+    0, 31744+  512,              31744+    0,   512);
		API_polar::template xo < 1024>(s,    30720+    0, 30720+ 1024,              30720+    0,  1024);
		API_polar::template xo < 2048>(s,    28672+    0, 28672+ 2048,              28672+    0,  2048);
		API_polar::template xo < 4096>(s,    24576+    0, 24576+ 4096,              24576+    0,  4096);
		API_polar::template xo < 8192>(s,    16384+    0, 16384+ 8192,              16384+    0,  8192);
		API_polar::template xo <16384>(s,        0+    0,     0+16384,                  0+    0, 16384);
	}
};
}
}
#endif
