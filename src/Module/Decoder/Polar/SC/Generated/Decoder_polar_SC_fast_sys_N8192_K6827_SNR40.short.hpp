#ifndef DECODER_POLAR_SC_FAST_SYS_N8192_K6827_SNR40_HPP_
#define DECODER_POLAR_SC_FAST_SYS_N8192_K6827_SNR40_HPP_

#include <cassert>

#include "../Decoder_polar_SC_fast_sys.hpp"

namespace aff3ct
{
namespace module
{
static const char Frozen_bits_8192_6827_40[8192] = {
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

template <typename B, typename R, class API_polar>
class Decoder_polar_SC_fast_sys_N8192_K6827_SNR40 : public Decoder_polar_SC_fast_sys<B, R, API_polar>
{
public:
	Decoder_polar_SC_fast_sys_N8192_K6827_SNR40(const int& K, const int& N, const mipp::vector<B>& frozen_bits, const int n_frames = 1)
	: Decoder_polar_SC_fast_sys<B, R, API_polar>(K, N, frozen_bits, n_frames)
	{
		assert(N == 8192);
		assert(K == 6827);
		
		auto i = 0;
		while (i < 8192 && Frozen_bits_8192_6827_40[i] == frozen_bits[i]) i++;
		assert(i == 8192);
	}

	virtual ~Decoder_polar_SC_fast_sys_N8192_K6827_SNR40()
	{
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 3
	inline void r07(const int off_l, const int off_s)
	{
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void r08(const int off_l, const int off_s)
	{
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 6
	inline void r09(const int off_l, const int off_s)
	{
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 6
	__attribute__((always_inline))
	inline void r010(const int off_l, const int off_s)
	{
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 10
	__attribute__((always_inline))
	inline void r011(const int off_l, const int off_s)
	{
	}

	// depth = 12, reverse depth = 1, size = 2, calls = 10
	__attribute__((always_inline))
	inline void r012(const int off_l, const int off_s)
	{
	}

	// depth = 12, reverse depth = 1, size = 2, calls = 10
	__attribute__((always_inline))
	inline void r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   2>(s, l, off_l+    0,                           off_s+    0,    2);
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 10
	__attribute__((always_inline))
	inline void r012r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r012(off_l+4, off_s+0);
		API_polar::template g0 <   2>(   l, off_l+    0, off_l+    2,              off_l+    4,    2);
		r112(off_l+4, off_s+2);
		API_polar::template xo0<   2>(s,    off_s+    2,                           off_s+    0,    2);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 3
	__attribute__((always_inline))
	inline void r011r012r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+8, off_s+0);
		API_polar::template g0 <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		r012r112(off_l+8, off_s+4);
		API_polar::template xo0<   4>(s,    off_s+    4,                           off_s+    0,    4);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 23
	__attribute__((always_inline))
	inline void re10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 49
	__attribute__((always_inline))
	inline void re11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 51
	__attribute__((always_inline))
	inline void s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 44
	__attribute__((always_inline))
	inline void re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		re11(off_l+8, off_s+0);
		API_polar::template gr <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		s11(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 15
	inline void re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re10(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		re11s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void r09re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10re11s11(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void r08r09re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r08(off_l+64, off_s+0);
		API_polar::template g0 <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r09re10re11s11(off_l+64, off_s+32);
		API_polar::template xo0<  32>(s,    off_s+   32,                           off_s+    0,   32);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 4
	inline void re8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 8
	inline void re9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void re9re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re9(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re10re11s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 31
	__attribute__((always_inline))
	inline void s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 2
	inline void r011r012r112s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r011r012r112(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s10(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 24
	inline void re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11s11(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s10(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 19
	inline void s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 12
	inline void re11s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11s11s10(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s9(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 11, reverse depth = 2, size = 4, calls = 12
	__attribute__((always_inline))
	inline void r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 7
	__attribute__((always_inline))
	inline void r012r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		r012r112(off_l+8, off_s+0);
		API_polar::template g  <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		r111(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 3
	inline void re10r012r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re10(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r012r112r111(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 7
	__attribute__((always_inline))
	inline void r011s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+8, off_s+0);
		API_polar::template g0 <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		s11(off_l+8, off_s+4);
		API_polar::template xo0<   4>(s,    off_s+    4,                           off_s+    0,    4);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 4
	inline void r010r011s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r011s11(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void r010r011s11re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r010r011s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11s11s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 6
	inline void re10re11s11re11s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10re11s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11s11s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re10re11s11re11s11s10re11s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11s11re11s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11s11s10s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 5
	__attribute__((always_inline))
	inline void re11r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		re11(off_l+8, off_s+0);
		API_polar::template gr <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		r111(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 10, reverse depth = 3, size = 8, calls = 10
	__attribute__((always_inline))
	inline void r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 2
	inline void re11r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11r111(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r110(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 4
	inline void r012r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012r112r111(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r110(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 9
	inline void r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void r012r112r111r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r012r112r111r110(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r19(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void re10r012r112r111s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10r012r112r111(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s9(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 10
	inline void s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 7
	inline void s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 4
	inline void re11s11r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11s11(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r110(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void re10re11s11re11s11r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10re11s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11s11r110(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 3
	inline void re10re11r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re10(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		re11r111(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void re10re11r111s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10re11r111(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s9(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 3
	inline void r011s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r011s11(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s10(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void r011s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011s11s10(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s9(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 5
	inline void re11s11s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11s11s10s9(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s8(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 2
	inline void re11s11s10s9s8s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re11s11s10s9s8(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		s7(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 6
	inline void r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 4
	inline void r17(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 3
	inline void re11s11s10r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11s11s10(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r19(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re11s11s10r19r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11s11s10r19(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r18(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 2
	inline void re11s11s10r19r18r17(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re11s11s10r19r18(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		r17(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 9, reverse depth = 4, size = 16, calls = 2
	inline void re10s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re10(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s10(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void re9re10s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re9(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re10s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void r010r011s11re11s11s10re11s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r010r011s11re11s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11s11s10s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 5, size = 32, calls = 2
	inline void re11s11r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11s11r110(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r19(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 7, reverse depth = 6, size = 64, calls = 2
	inline void re11s11r110r19r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11s11r110r19(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r18(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 5, reverse depth = 8, size = 256, calls = 5
	inline void s5(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 256>(s, l, off_l+    0,                           off_s+    0,  256);
	}

	// depth = 6, reverse depth = 7, size = 128, calls = 5
	inline void s6(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 128>(s, l, off_l+    0,                           off_s+    0,  128);
	}

	// depth = 4, reverse depth = 9, size = 512, calls = 2
	inline void s4(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 512>(s, l, off_l+    0,                           off_s+    0,  512);
	}

	void decode()
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <4096>(   l,     0+    0,     0+ 4096,                  0+ 8192, 4096);
		API_polar::template f  <2048>(   l,  8192+    0,  8192+ 2048,               8192+ 4096, 2048);
		API_polar::template f  <1024>(   l, 12288+    0, 12288+ 1024,              12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template g0 < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		r07(16256, 128);
		API_polar::template g0 <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r08(16320, 192);
		API_polar::template g0 <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r09(16352, 224);
		API_polar::template g0 <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		r010(16368, 240);
		API_polar::template g0 <   8>(   l, 16352+    0, 16352+    8,              16352+   16,    8);
		r011r012r112(16368, 248);
		API_polar::template xo0<   8>(s,      240+    8,                             240+    0,    8);
		API_polar::template xo0<  16>(s,      224+   16,                             224+    0,   16);
		API_polar::template xo0<  32>(s,      192+   32,                             192+    0,   32);
		API_polar::template xo0<  64>(s,      128+   64,                             128+    0,   64);
		API_polar::template xo0< 128>(s,        0+  128,                               0+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,     0+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		r07(16256, 256);
		API_polar::template g0 <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r08r09re10re11s11(16256, 320);
		API_polar::template xo0<  64>(s,      256+   64,                             256+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,   256+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re8(16320, 384);
		API_polar::template gr <  32>(s, l, 16256+    0, 16256+   32,   384+    0, 16256+   64,   32);
		re9re10re11s11(16320, 416);
		API_polar::template xo <  32>(s,      384+    0,   384+   32,                384+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,   384+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re9(16352, 448);
		API_polar::template gr <  16>(s, l, 16320+    0, 16320+   16,   448+    0, 16320+   32,   16);
		r011r012r112s10(16352, 464);
		API_polar::template xo <  16>(s,      448+    0,   448+   16,                448+    0,   16);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,   448+    0, 16256+   64,   32);
		re11s11s10s9(16320, 480);
		API_polar::template xo <  32>(s,      448+    0,   448+   32,                448+    0,   32);
		API_polar::template xo <  64>(s,      384+    0,   384+   64,                384+    0,   64);
		API_polar::template xo < 128>(s,      256+    0,   256+  128,                256+    0,  128);
		API_polar::template xo < 256>(s,        0+    0,     0+  256,                  0+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,     0+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		r07(16256, 512);
		API_polar::template g0 <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re8(16320, 576);
		API_polar::template gr <  32>(s, l, 16256+    0, 16256+   32,   576+    0, 16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re9(16352, 608);
		API_polar::template gr <  16>(s, l, 16320+    0, 16320+   16,   608+    0, 16320+   32,   16);
		re10r012r112r111(16352, 624);
		API_polar::template xo <  16>(s,      608+    0,   608+   16,                608+    0,   16);
		API_polar::template xo <  32>(s,      576+    0,   576+   32,                576+    0,   32);
		API_polar::template xo0<  64>(s,      512+   64,                             512+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,   512+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re8(16320, 640);
		API_polar::template gr <  32>(s, l, 16256+    0, 16256+   32,   640+    0, 16256+   64,   32);
		r010r011s11re11s11s10(16320, 672);
		API_polar::template xo <  32>(s,      640+    0,   640+   32,                640+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,   640+    0, 16128+  128,   64);
		re10re11s11re11s11s10re11s11s10s9(16256, 704);
		API_polar::template xo <  64>(s,      640+    0,   640+   64,                640+    0,   64);
		API_polar::template xo < 128>(s,      512+    0,   512+  128,                512+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,   512+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r09(16352, 768);
		API_polar::template g0 <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		r010(16368, 784);
		API_polar::template g0 <   8>(   l, 16352+    0, 16352+    8,              16352+   16,    8);
		re11s11(16368, 792);
		API_polar::template xo0<   8>(s,      784+    8,                             784+    0,    8);
		API_polar::template xo0<  16>(s,      768+   16,                             768+    0,   16);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,   768+    0, 16256+   64,   32);
		re10re11s11re11s11s10(16320, 800);
		API_polar::template xo <  32>(s,      768+    0,   768+   32,                768+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,   768+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re10re11s11(16352, 832);
		API_polar::template g  <  16>(s, l, 16320+    0, 16320+   16,   832+    0, 16320+   32,   16);
		re11r111r110(16352, 848);
		API_polar::template xo <  16>(s,      832+    0,   832+   16,                832+    0,   16);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,   832+    0, 16256+   64,   32);
		r012r112r111r110r19(16320, 864);
		API_polar::template xo <  32>(s,      832+    0,   832+   32,                832+    0,   32);
		API_polar::template xo <  64>(s,      768+    0,   768+   64,                768+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,   768+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re10r012r112r111s9(16320, 896);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,   896+    0, 16256+   64,   32);
		s8(16320, 928);
		API_polar::template xo <  32>(s,      896+    0,   896+   32,                896+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,   896+    0, 16128+  128,   64);
		s7(16256, 960);
		API_polar::template xo <  64>(s,      896+    0,   896+   64,                896+    0,   64);
		API_polar::template xo < 128>(s,      768+    0,   768+  128,                768+    0,  128);
		API_polar::template xo < 256>(s,      512+    0,   512+  256,                512+    0,  256);
		API_polar::template xo < 512>(s,        0+    0,     0+  512,                  0+    0,  512);
		API_polar::template g  <1024>(s, l, 12288+    0, 12288+ 1024,     0+    0, 12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template rep<  64>(s, l, 16256+    0,                            1024+    0,   64);
		API_polar::template gr <  64>(s, l, 16128+    0, 16128+   64,  1024+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r09(16352, 1088);
		API_polar::template g0 <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		r010r011s11(16352, 1104);
		API_polar::template xo0<  16>(s,     1088+   16,                            1088+    0,   16);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  1088+    0, 16256+   64,   32);
		re10re11s11re11s11s10(16320, 1120);
		API_polar::template xo <  32>(s,     1088+    0,  1088+   32,               1088+    0,   32);
		API_polar::template xo <  64>(s,     1024+    0,  1024+   64,               1024+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  1024+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r09re10re11s11(16320, 1152);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  1152+    0, 16256+   64,   32);
		re10re11s11re11s11r110(16320, 1184);
		API_polar::template xo <  32>(s,     1152+    0,  1152+   32,               1152+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  1152+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re10re11r111s9(16320, 1216);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  1216+    0, 16256+   64,   32);
		s8(16320, 1248);
		API_polar::template xo <  32>(s,     1216+    0,  1216+   32,               1216+    0,   32);
		API_polar::template xo <  64>(s,     1152+    0,  1152+   64,               1152+    0,   64);
		API_polar::template xo < 128>(s,     1024+    0,  1024+  128,               1024+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  1024+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re9re10re11s11(16320, 1280);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  1280+    0, 16256+   64,   32);
		re10r012r112r111s9(16320, 1312);
		API_polar::template xo <  32>(s,     1280+    0,  1280+   32,               1280+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  1280+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r011s11s10s9(16320, 1344);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  1344+    0, 16256+   64,   32);
		s8(16320, 1376);
		API_polar::template xo <  32>(s,     1344+    0,  1344+   32,               1344+    0,   32);
		API_polar::template xo <  64>(s,     1280+    0,  1280+   64,               1280+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  1280+    0, 15872+  256,  128);
		re11s11s10s9s8s7(16128, 1408);
		API_polar::template xo < 128>(s,     1280+    0,  1280+  128,               1280+    0,  128);
		API_polar::template xo < 256>(s,     1024+    0,  1024+  256,               1024+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  1024+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re9(16352, 1536);
		API_polar::template gr <  16>(s, l, 16320+    0, 16320+   16,  1536+    0, 16320+   32,   16);
		r011s11s10(16352, 1552);
		API_polar::template xo <  16>(s,     1536+    0,  1536+   16,               1536+    0,   16);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  1536+    0, 16256+   64,   32);
		re11s11s10s9(16320, 1568);
		API_polar::template xo <  32>(s,     1536+    0,  1536+   32,               1536+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  1536+    0, 16128+  128,   64);
		re11s11s10s9s8(16256, 1600);
		API_polar::template xo <  64>(s,     1536+    0,  1536+   64,               1536+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  1536+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re11s11s10s9(16320, 1664);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  1664+    0, 16256+   64,   32);
		r18(16320, 1696);
		API_polar::template xo <  32>(s,     1664+    0,  1664+   32,               1664+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  1664+    0, 16128+  128,   64);
		r17(16256, 1728);
		API_polar::template xo <  64>(s,     1664+    0,  1664+   64,               1664+    0,   64);
		API_polar::template xo < 128>(s,     1536+    0,  1536+  128,               1536+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  1536+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		re11s11s10r19r18r17(16128, 1792);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  1792+    0, 15872+  256,  128);
		API_polar::template h  < 128>(s, l, 16128+    0,                            1920+    0,  128);
		API_polar::template xo < 128>(s,     1792+    0,  1792+  128,               1792+    0,  128);
		API_polar::template xo < 256>(s,     1536+    0,  1536+  256,               1536+    0,  256);
		API_polar::template xo < 512>(s,     1024+    0,  1024+  512,               1024+    0,  512);
		API_polar::template xo <1024>(s,        0+    0,     0+ 1024,                  0+    0, 1024);
		API_polar::template g  <2048>(s, l,  8192+    0,  8192+ 2048,     0+    0,  8192+ 4096, 2048);
		API_polar::template f  <1024>(   l, 12288+    0, 12288+ 1024,              12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r08r09re10re11s11(16256, 2048);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  2048+    0, 16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re9re10re11s11(16320, 2112);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  2112+    0, 16256+   64,   32);
		re10re11r111s9(16320, 2144);
		API_polar::template xo <  32>(s,     2112+    0,  2112+   32,               2112+    0,   32);
		API_polar::template xo <  64>(s,     2048+    0,  2048+   64,               2048+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  2048+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re9re10s10(16320, 2176);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  2176+    0, 16256+   64,   32);
		r011s11s10s9(16320, 2208);
		API_polar::template xo <  32>(s,     2176+    0,  2176+   32,               2176+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  2176+    0, 16128+  128,   64);
		re11s11s10s9s8(16256, 2240);
		API_polar::template xo <  64>(s,     2176+    0,  2176+   64,               2176+    0,   64);
		API_polar::template xo < 128>(s,     2048+    0,  2048+  128,               2048+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  2048+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		r010r011s11re11s11s10re11s11s10s9(16256, 2304);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  2304+    0, 16128+  128,   64);
		re11s11s10s9s8(16256, 2368);
		API_polar::template xo <  64>(s,     2304+    0,  2304+   64,               2304+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  2304+    0, 15872+  256,  128);
		re11s11s10r19r18r17(16128, 2432);
		API_polar::template xo < 128>(s,     2304+    0,  2304+  128,               2304+    0,  128);
		API_polar::template xo < 256>(s,     2048+    0,  2048+  256,               2048+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  2048+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re10re11s11re11s11s10(16320, 2560);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  2560+    0, 16256+   64,   32);
		re11s11s10r19(16320, 2592);
		API_polar::template xo <  32>(s,     2560+    0,  2560+   32,               2560+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  2560+    0, 16128+  128,   64);
		re11s11r110r19r18(16256, 2624);
		API_polar::template xo <  64>(s,     2560+    0,  2560+   64,               2560+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  2560+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		r012r112r111r110r19(16320, 2688);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  2688+    0, 16256+   64,   32);
		r18(16320, 2720);
		API_polar::template xo <  32>(s,     2688+    0,  2688+   32,               2688+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  2688+    0, 16128+  128,   64);
		r17(16256, 2752);
		API_polar::template xo <  64>(s,     2688+    0,  2688+   64,               2688+    0,   64);
		API_polar::template xo < 128>(s,     2560+    0,  2560+  128,               2560+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  2560+    0, 15360+  512,  256);
		s5(15872, 2816);
		API_polar::template xo < 256>(s,     2560+    0,  2560+  256,               2560+    0,  256);
		API_polar::template xo < 512>(s,     2048+    0,  2048+  512,               2048+    0,  512);
		API_polar::template g  <1024>(s, l, 12288+    0, 12288+ 1024,  2048+    0, 12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re10re11s11re11s11r110(16320, 3072);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  3072+    0, 16256+   64,   32);
		r012r112r111r110r19(16320, 3104);
		API_polar::template xo <  32>(s,     3072+    0,  3072+   32,               3072+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  3072+    0, 16128+  128,   64);
		s7(16256, 3136);
		API_polar::template xo <  64>(s,     3072+    0,  3072+   64,               3072+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  3072+    0, 15872+  256,  128);
		s6(16128, 3200);
		API_polar::template xo < 128>(s,     3072+    0,  3072+  128,               3072+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  3072+    0, 15360+  512,  256);
		s5(15872, 3328);
		API_polar::template xo < 256>(s,     3072+    0,  3072+  256,               3072+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  3072+    0, 14336+ 1024,  512);
		s4(15360, 3584);
		API_polar::template xo < 512>(s,     3072+    0,  3072+  512,               3072+    0,  512);
		API_polar::template xo <1024>(s,     2048+    0,  2048+ 1024,               2048+    0, 1024);
		API_polar::template xo <2048>(s,        0+    0,     0+ 2048,                  0+    0, 2048);
		API_polar::template g  <4096>(s, l,     0+    0,     0+ 4096,     0+    0,     0+ 8192, 4096);
		API_polar::template f  <2048>(   l,  8192+    0,  8192+ 2048,               8192+ 4096, 2048);
		API_polar::template f  <1024>(   l, 12288+    0, 12288+ 1024,              12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re8(16320, 4096);
		API_polar::template gr <  32>(s, l, 16256+    0, 16256+   32,  4096+    0, 16256+   64,   32);
		re9re10s10(16320, 4128);
		API_polar::template xo <  32>(s,     4096+    0,  4096+   32,               4096+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  4096+    0, 16128+  128,   64);
		r010r011s11re11s11s10re11s11s10s9(16256, 4160);
		API_polar::template xo <  64>(s,     4096+    0,  4096+   64,               4096+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  4096+    0, 15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		re10re11s11re11s11s10re11s11s10s9(16256, 4224);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  4224+    0, 16128+  128,   64);
		re11s11r110r19r18(16256, 4288);
		API_polar::template xo <  64>(s,     4224+    0,  4224+   64,               4224+    0,   64);
		API_polar::template xo < 128>(s,     4096+    0,  4096+  128,               4096+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  4096+    0, 15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		re10re11s11re11s11s10(16320, 4352);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  4352+    0, 16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re11r111r110(16352, 4384);
		API_polar::template g  <  16>(s, l, 16320+    0, 16320+   16,  4384+    0, 16320+   32,   16);
		r19(16352, 4400);
		API_polar::template xo <  16>(s,     4384+    0,  4384+   16,               4384+    0,   16);
		API_polar::template xo <  32>(s,     4352+    0,  4352+   32,               4352+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  4352+    0, 16128+  128,   64);
		s7(16256, 4416);
		API_polar::template xo <  64>(s,     4352+    0,  4352+   64,               4352+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  4352+    0, 15872+  256,  128);
		s6(16128, 4480);
		API_polar::template xo < 128>(s,     4352+    0,  4352+  128,               4352+    0,  128);
		API_polar::template xo < 256>(s,     4096+    0,  4096+  256,               4096+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  4096+    0, 14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		re10re11r111(16352, 4608);
		API_polar::template g  <  16>(s, l, 16320+    0, 16320+   16,  4608+    0, 16320+   32,   16);
		r012r112r111r110(16352, 4624);
		API_polar::template xo <  16>(s,     4608+    0,  4608+   16,               4608+    0,   16);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  4608+    0, 16256+   64,   32);
		s8(16320, 4640);
		API_polar::template xo <  32>(s,     4608+    0,  4608+   32,               4608+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  4608+    0, 16128+  128,   64);
		s7(16256, 4672);
		API_polar::template xo <  64>(s,     4608+    0,  4608+   64,               4608+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  4608+    0, 15872+  256,  128);
		s6(16128, 4736);
		API_polar::template xo < 128>(s,     4608+    0,  4608+  128,               4608+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  4608+    0, 15360+  512,  256);
		s5(15872, 4864);
		API_polar::template xo < 256>(s,     4608+    0,  4608+  256,               4608+    0,  256);
		API_polar::template xo < 512>(s,     4096+    0,  4096+  512,               4096+    0,  512);
		API_polar::template g  <1024>(s, l, 12288+    0, 12288+ 1024,  4096+    0, 12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		API_polar::template f  <  64>(   l, 16128+    0, 16128+   64,              16128+  128,   64);
		API_polar::template f  <  32>(   l, 16256+    0, 16256+   32,              16256+   64,   32);
		API_polar::template f  <  16>(   l, 16320+    0, 16320+   16,              16320+   32,   16);
		r011r012r112s10(16352, 5120);
		API_polar::template g  <  16>(s, l, 16320+    0, 16320+   16,  5120+    0, 16320+   32,   16);
		s9(16352, 5136);
		API_polar::template xo <  16>(s,     5120+    0,  5120+   16,               5120+    0,   16);
		API_polar::template g  <  32>(s, l, 16256+    0, 16256+   32,  5120+    0, 16256+   64,   32);
		s8(16320, 5152);
		API_polar::template xo <  32>(s,     5120+    0,  5120+   32,               5120+    0,   32);
		API_polar::template g  <  64>(s, l, 16128+    0, 16128+   64,  5120+    0, 16128+  128,   64);
		s7(16256, 5184);
		API_polar::template xo <  64>(s,     5120+    0,  5120+   64,               5120+    0,   64);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  5120+    0, 15872+  256,  128);
		s6(16128, 5248);
		API_polar::template xo < 128>(s,     5120+    0,  5120+  128,               5120+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  5120+    0, 15360+  512,  256);
		s5(15872, 5376);
		API_polar::template xo < 256>(s,     5120+    0,  5120+  256,               5120+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  5120+    0, 14336+ 1024,  512);
		s4(15360, 5632);
		API_polar::template xo < 512>(s,     5120+    0,  5120+  512,               5120+    0,  512);
		API_polar::template xo <1024>(s,     4096+    0,  4096+ 1024,               4096+    0, 1024);
		API_polar::template g  <2048>(s, l,  8192+    0,  8192+ 2048,  4096+    0,  8192+ 4096, 2048);
		API_polar::template f  <1024>(   l, 12288+    0, 12288+ 1024,              12288+ 2048, 1024);
		API_polar::template f  < 512>(   l, 14336+    0, 14336+  512,              14336+ 1024,  512);
		API_polar::template f  < 256>(   l, 15360+    0, 15360+  256,              15360+  512,  256);
		API_polar::template f  < 128>(   l, 15872+    0, 15872+  128,              15872+  256,  128);
		re11s11s10s9s8s7(16128, 6144);
		API_polar::template g  < 128>(s, l, 15872+    0, 15872+  128,  6144+    0, 15872+  256,  128);
		s6(16128, 6272);
		API_polar::template xo < 128>(s,     6144+    0,  6144+  128,               6144+    0,  128);
		API_polar::template g  < 256>(s, l, 15360+    0, 15360+  256,  6144+    0, 15360+  512,  256);
		s5(15872, 6400);
		API_polar::template xo < 256>(s,     6144+    0,  6144+  256,               6144+    0,  256);
		API_polar::template g  < 512>(s, l, 14336+    0, 14336+  512,  6144+    0, 14336+ 1024,  512);
		API_polar::template h  < 512>(s, l, 15360+    0,                            6656+    0,  512);
		API_polar::template xo < 512>(s,     6144+    0,  6144+  512,               6144+    0,  512);
		API_polar::template g  <1024>(s, l, 12288+    0, 12288+ 1024,  6144+    0, 12288+ 2048, 1024);
		API_polar::template h  <1024>(s, l, 14336+    0,                            7168+    0, 1024);
		API_polar::template xo <1024>(s,     6144+    0,  6144+ 1024,               6144+    0, 1024);
		API_polar::template xo <2048>(s,     4096+    0,  4096+ 2048,               4096+    0, 2048);
		API_polar::template xo <4096>(s,        0+    0,     0+ 4096,                  0+    0, 4096);
	}
};
}
}
#endif
