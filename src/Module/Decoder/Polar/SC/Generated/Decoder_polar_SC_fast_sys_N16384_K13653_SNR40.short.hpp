#ifndef DECODER_POLAR_SC_FAST_SYS_N16384_K13653_SNR40_HPP_
#define DECODER_POLAR_SC_FAST_SYS_N16384_K13653_SNR40_HPP_

#include <cassert>

#include "../Decoder_polar_SC_fast_sys.hpp"

namespace aff3ct
{
namespace module
{
static const char Frozen_bits_16384_13653_40[16384] = {
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

template <typename B, typename R, class API_polar>
class Decoder_polar_SC_fast_sys_N16384_K13653_SNR40 : public Decoder_polar_SC_fast_sys<B, R, API_polar>
{
public:
	Decoder_polar_SC_fast_sys_N16384_K13653_SNR40(const int& K, const int& N, const mipp::vector<B>& frozen_bits, const int n_frames = 1)
	: Decoder_polar_SC_fast_sys<B, R, API_polar>(K, N, frozen_bits, n_frames)
	{
		assert(N == 16384);
		assert(K == 13653);
		
		auto i = 0;
		while (i < 16384 && Frozen_bits_16384_13653_40[i] == frozen_bits[i]) i++;
		assert(i == 16384);
	}

	virtual ~Decoder_polar_SC_fast_sys_N16384_K13653_SNR40()
	{
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r07(const int off_l, const int off_s)
	{
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void r08(const int off_l, const int off_s)
	{
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 5
	inline void r09(const int off_l, const int off_s)
	{
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 15
	inline void re10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 39
	__attribute__((always_inline))
	inline void re11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 100
	__attribute__((always_inline))
	inline void re12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 91
	__attribute__((always_inline))
	inline void s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 84
	__attribute__((always_inline))
	inline void re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		re12(off_l+8, off_s+0);
		API_polar::template gr <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		s12(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 28
	inline void re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		re12s12(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 6
	inline void re10re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11re12s12(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void r09re10re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r09(off_l+64, off_s+0);
		API_polar::template g0 <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11re12s12(off_l+64, off_s+32);
		API_polar::template xo0<  32>(s,    off_s+   32,                           off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void re8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 6
	inline void re9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template rep<  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 15
	__attribute__((always_inline))
	inline void r012(const int off_l, const int off_s)
	{
	}

	// depth = 13, reverse depth = 1, size = 2, calls = 14
	__attribute__((always_inline))
	inline void r013(const int off_l, const int off_s)
	{
	}

	// depth = 13, reverse depth = 1, size = 2, calls = 14
	__attribute__((always_inline))
	inline void r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   2>(s, l, off_l+    0,                           off_s+    0,    2);
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 14
	__attribute__((always_inline))
	inline void r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r013(off_l+4, off_s+0);
		API_polar::template g0 <   2>(   l, off_l+    0, off_l+    2,              off_l+    4,    2);
		r113(off_l+4, off_s+2);
		API_polar::template xo0<   2>(s,    off_s+    2,                           off_s+    0,    2);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 8
	__attribute__((always_inline))
	inline void r012r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r012(off_l+8, off_s+0);
		API_polar::template g0 <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		r013r113(off_l+8, off_s+4);
		API_polar::template xo0<   4>(s,    off_s+    4,                           off_s+    0,    4);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 61
	__attribute__((always_inline))
	inline void s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 5
	inline void r012r013r113s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012r013r113(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void re10r012r013r113s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r012r013r113s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 9
	inline void r010(const int off_l, const int off_s)
	{
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 12
	__attribute__((always_inline))
	inline void r011(const int off_l, const int off_s)
	{
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 3
	inline void r011r012r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012r013r113(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void r010r011r012r013r113(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011r012r013r113(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 6
	inline void r011re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re12s12(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 49
	inline void re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re12s12(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void r011re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011re12s12(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re12s12s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void r010re11re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11re12s12(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 13
	inline void re11re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11re12s12(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re12s12s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void r010re11re12s12re11re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r010re11re12s12(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 12, reverse depth = 2, size = 4, calls = 22
	__attribute__((always_inline))
	inline void r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   4>(s, l, off_l+    0,                           off_s+    0,    4);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 16
	__attribute__((always_inline))
	inline void re12r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		re12(off_l+8, off_s+0);
		API_polar::template gr <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		r112(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 15
	__attribute__((always_inline))
	inline void r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <   8>(s, l, off_l+    0,                           off_s+    0,    8);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 11
	inline void re12r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re12r112(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r111(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 6
	inline void re11re12s12re12r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11re12s12(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re12r112r111(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 22
	inline void s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void re11re12s12re12r112r111s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11re12s12re12r112r111(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r010re11re12s12re11re12s12re12s12s11re11re12s12re12r112r111s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		r010re11re12s12re11re12s12re12s12s11(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re11re12s12re12r112r111s9(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 4
	inline void r010r011re12s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r010(off_l+32, off_s+0);
		API_polar::template g0 <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011re12s12(off_l+32, off_s+16);
		API_polar::template xo0<  16>(s,    off_s+   16,                           off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void r010r011re12s12re11re12s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r010r011re12s12(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void re10re11re12s12re11re12s12re12r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11re12s12(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re11re12s12re12r112r111(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 5
	inline void re11re12r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		re12r112(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void re10re11re12r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11re12r112(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 36
	inline void s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void r012r013r113s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r012r013r113s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void re10re11re12r112r012r013r113s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re10re11re12r112(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r012r013r113s11s10(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 27
	inline void re12s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re12s12s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 12
	inline void re12s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re12s12s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void re10re11re12r112r012r013r113s11s10re12s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re10re11re12r112r012r013r113s11s10(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re12s12s11s10s9(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 7
	__attribute__((always_inline))
	inline void r012s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r012(off_l+8, off_s+0);
		API_polar::template g0 <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		s12(off_l+8, off_s+4);
		API_polar::template xo0<   4>(s,    off_s+    4,                           off_s+    0,    4);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 3
	inline void r011r012s12(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		r011(off_l+16, off_s+0);
		API_polar::template g0 <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012s12(off_l+16, off_s+8);
		API_polar::template xo0<   8>(s,    off_s+    8,                           off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void r011r012s12re12s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r011r012s12(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re12s12s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void r011r012s12re12s12s11re12s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r011r012s12re12s12s11(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re12s12s11s10(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r011r012s12re12s12s11re12s12s11s10re12s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		r011r012s12re12s12s11re12s12s11s10(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re12s12s11s10s9(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 5
	inline void re11re12s12re12s12s11re12s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re12s12s11s10(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 10
	inline void r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  16>(s, l, off_l+    0,                           off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void re12s12s11r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re12s12s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r110(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 12
	inline void r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  32>(s, l, off_l+    0,                           off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re12s12s11r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re12s12s11r110(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r19(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 5
	inline void re12r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re12r112r111(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r110(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 3
	inline void re12r112r111r110r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re12r112r111r110(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r19(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 8
	inline void r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  <  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void re12r112r111r110r19r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re12r112r111r110r19(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		r18(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 3
	inline void re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re10(off_l+32, off_s+0);
		API_polar::template gr <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		re11s11(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re9re10re11s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re9(off_l+64, off_s+0);
		API_polar::template gr <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re10re11s11(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 5
	inline void re12s12s11s10r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re12s12s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		r19(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void re11re12s12re12s12s11re12s12s11s10re12s12s11s10r19(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re12s12s11s10r19(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re11re12s12re12s12s11re12r112r111r110(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11re12s12re12s12s11(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		re12r112r111r110(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 13
	inline void s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<  64>(s, l, off_l+    0,                           off_s+    0,   64);
	}

	// depth = 11, reverse depth = 3, size = 8, calls = 6
	__attribute__((always_inline))
	inline void r013r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   4>(   l, off_l+    0, off_l+    4,              off_l+    8,    4);
		r013r113(off_l+8, off_s+0);
		API_polar::template g  <   4>(s, l, off_l+    0, off_l+    4, off_s+    0, off_l+    8,    4);
		r112(off_l+8, off_s+4);
		API_polar::template xo <   4>(s,    off_s+    0, off_s+    4,              off_s+    0,    4);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 3
	inline void r013r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r013r113r112(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r111(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void re11re12r112r013r113r112r111(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11re12r112(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		r013r113r112r111(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re11re12r112r013r113r112r111s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11re12r112r013r113r112r111(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void re11re12r112r013r113r112r111s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re11re12r112r013r113r112r111s9(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		s8(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 6
	inline void s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 128>(s, l, off_l+    0,                           off_s+    0,  128);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 4
	inline void r012s12s11(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		r012s12(off_l+16, off_s+0);
		API_polar::template g  <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		s11(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 3
	inline void r012s12s11s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		r012s12s11(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void r012s12s11s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		r012s12s11s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void r012s12s11s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		r012s12s11s10s9(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		s8(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 6
	inline void re12s12s11s10s9s8(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re12s12s11s10s9(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		s8(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 6, reverse depth = 8, size = 256, calls = 2
	inline void re12s12s11s10s9s8s7(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  < 128>(   l, off_l+    0, off_l+  128,              off_l+  256,  128);
		re12s12s11s10s9s8(off_l+256, off_s+0);
		API_polar::template g  < 128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,  128);
		s7(off_l+256, off_s+128);
		API_polar::template xo < 128>(s,    off_s+    0, off_s+  128,              off_s+    0,  128);
	}

	// depth = 6, reverse depth = 8, size = 256, calls = 3
	inline void s6(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 256>(s, l, off_l+    0,                           off_s+    0,  256);
	}

	// depth = 10, reverse depth = 4, size = 16, calls = 3
	inline void re11r013r113r112(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <   8>(   l, off_l+    0, off_l+    8,              off_l+   16,    8);
		re11(off_l+16, off_s+0);
		API_polar::template gr <   8>(s, l, off_l+    0, off_l+    8, off_s+    0, off_l+   16,    8);
		r013r113r112(off_l+16, off_s+8);
		API_polar::template xo <   8>(s,    off_s+    0, off_s+    8,              off_s+    0,    8);
	}

	// depth = 9, reverse depth = 5, size = 32, calls = 2
	inline void re11r013r113r112s10(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  16>(   l, off_l+    0, off_l+   16,              off_l+   32,   16);
		re11r013r113r112(off_l+32, off_s+0);
		API_polar::template g  <  16>(s, l, off_l+    0, off_l+   16, off_s+    0, off_l+   32,   16);
		s10(off_l+32, off_s+16);
		API_polar::template xo <  16>(s,    off_s+    0, off_s+   16,              off_s+    0,   16);
	}

	// depth = 8, reverse depth = 6, size = 64, calls = 2
	inline void re11r013r113r112s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  32>(   l, off_l+    0, off_l+   32,              off_l+   64,   32);
		re11r013r113r112s10(off_l+64, off_s+0);
		API_polar::template g  <  32>(s, l, off_l+    0, off_l+   32, off_s+    0, off_l+   64,   32);
		s9(off_l+64, off_s+32);
		API_polar::template xo <  32>(s,    off_s+    0, off_s+   32,              off_s+    0,   32);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 2
	inline void re10re11re12s12re11re12s12re12r112r111re11r013r113r112s10s9(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re10re11re12s12re11re12s12re12r112r111(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		re11r013r113r112s10s9(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 6
	inline void r17(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  < 128>(s, l, off_l+    0,                           off_s+    0,  128);
	}

	// depth = 7, reverse depth = 7, size = 128, calls = 3
	inline void re12s12s11s10r19r18(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <  64>(   l, off_l+    0, off_l+   64,              off_l+  128,   64);
		re12s12s11s10r19(off_l+128, off_s+0);
		API_polar::template g  <  64>(s, l, off_l+    0, off_l+   64, off_s+    0, off_l+  128,   64);
		r18(off_l+128, off_s+64);
		API_polar::template xo <  64>(s,    off_s+    0, off_s+   64,              off_s+    0,   64);
	}

	// depth = 6, reverse depth = 8, size = 256, calls = 2
	inline void re12s12s11s10r19r18r17(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  < 128>(   l, off_l+    0, off_l+  128,              off_l+  256,  128);
		re12s12s11s10r19r18(off_l+256, off_s+0);
		API_polar::template g  < 128>(s, l, off_l+    0, off_l+  128, off_s+    0, off_l+  256,  128);
		r17(off_l+256, off_s+128);
		API_polar::template xo < 128>(s,    off_s+    0, off_s+  128,              off_s+    0,  128);
	}

	// depth = 6, reverse depth = 8, size = 256, calls = 2
	inline void r16(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template h  < 256>(s, l, off_l+    0,                           off_s+    0,  256);
	}

	// depth = 4, reverse depth = 10, size = 1024, calls = 3
	inline void s4(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc<1024>(s, l, off_l+    0,                           off_s+    0, 1024);
	}

	// depth = 5, reverse depth = 9, size = 512, calls = 3
	inline void s5(const int off_l, const int off_s)
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template spc< 512>(s, l, off_l+    0,                           off_s+    0,  512);
	}

	void decode()
	{
		auto &l = this->l;
		auto &s = this->s;

		API_polar::template f  <8192>(   l,     0+    0,     0+ 8192,                  0+16384, 8192);
		API_polar::template f  <4096>(   l, 16384+    0, 16384+ 4096,              16384+ 8192, 4096);
		API_polar::template f  <2048>(   l, 24576+    0, 24576+ 2048,              24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template g0 < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		r07(32512, 256);
		API_polar::template g0 < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r08(32640, 384);
		API_polar::template g0 <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r09re10re11re12s12(32640, 448);
		API_polar::template xo0<  64>(s,      384+   64,                             384+    0,   64);
		API_polar::template xo0< 128>(s,      256+  128,                             256+    0,  128);
		API_polar::template xo0< 256>(s,        0+  256,                               0+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,     0+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		r07(32512, 512);
		API_polar::template g0 < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re8(32640, 640);
		API_polar::template gr <  64>(s, l, 32512+    0, 32512+   64,   640+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re9(32704, 704);
		API_polar::template gr <  32>(s, l, 32640+    0, 32640+   32,   704+    0, 32640+   64,   32);
		re10r012r013r113s11(32704, 736);
		API_polar::template xo <  32>(s,      704+    0,   704+   32,                704+    0,   32);
		API_polar::template xo <  64>(s,      640+    0,   640+   64,                640+    0,   64);
		API_polar::template xo0< 128>(s,      512+  128,                             512+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,   512+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re8(32640, 768);
		API_polar::template gr <  64>(s, l, 32512+    0, 32512+   64,   768+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		r010r011r012r013r113(32704, 832);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,   832+    0, 32640+   64,   32);
		r011re12s12re12s12s11(32704, 864);
		API_polar::template xo <  32>(s,      832+    0,   832+   32,                832+    0,   32);
		API_polar::template xo <  64>(s,      768+    0,   768+   64,                768+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,   768+    0, 32256+  256,  128);
		r010re11re12s12re11re12s12re12s12s11re11re12s12re12r112r111s9(32512, 896);
		API_polar::template xo < 128>(s,      768+    0,   768+  128,                768+    0,  128);
		API_polar::template xo < 256>(s,      512+    0,   512+  256,                512+    0,  256);
		API_polar::template xo < 512>(s,        0+    0,     0+  512,                  0+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024,     0+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template rep< 128>(s, l, 32512+    0,                            1024+    0,  128);
		API_polar::template gr < 128>(s, l, 32256+    0, 32256+  128,  1024+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re8(32640, 1152);
		API_polar::template gr <  64>(s, l, 32512+    0, 32512+   64,  1152+    0, 32512+  128,   64);
		r010r011re12s12re11re12s12re12s12s11(32640, 1216);
		API_polar::template xo <  64>(s,     1152+    0,  1152+   64,               1152+    0,   64);
		API_polar::template xo < 128>(s,     1024+    0,  1024+  128,               1024+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  1024+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r09(32704, 1280);
		API_polar::template g0 <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		r010re11re12s12(32704, 1312);
		API_polar::template xo0<  32>(s,     1280+   32,                            1280+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  1280+    0, 32512+  128,   64);
		re10re11re12s12re11re12s12re12r112r111(32640, 1344);
		API_polar::template xo <  64>(s,     1280+    0,  1280+   64,               1280+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  1280+    0, 32256+  256,  128);
		re10re11re12r112r012r013r113s11s10re12s12s11s10s9(32512, 1408);
		API_polar::template xo < 128>(s,     1280+    0,  1280+  128,               1280+    0,  128);
		API_polar::template xo < 256>(s,     1024+    0,  1024+  256,               1024+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  1024+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re9(32704, 1536);
		API_polar::template gr <  32>(s, l, 32640+    0, 32640+   32,  1536+    0, 32640+   64,   32);
		re10re11re12s12(32704, 1568);
		API_polar::template xo <  32>(s,     1536+    0,  1536+   32,               1536+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  1536+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re10r012r013r113s11(32704, 1600);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  1600+    0, 32640+   64,   32);
		re12s12s11s10(32704, 1632);
		API_polar::template xo <  32>(s,     1600+    0,  1600+   32,               1600+    0,   32);
		API_polar::template xo <  64>(s,     1536+    0,  1536+   64,               1536+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  1536+    0, 32256+  256,  128);
		r011r012s12re12s12s11re12s12s11s10re12s12s11s10s9(32512, 1664);
		API_polar::template xo < 128>(s,     1536+    0,  1536+  128,               1536+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  1536+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(32640, 1792);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  1792+    0, 32512+  128,   64);
		re12s12s11r110r19(32640, 1856);
		API_polar::template xo <  64>(s,     1792+    0,  1792+   64,               1792+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  1792+    0, 32256+  256,  128);
		re12r112r111r110r19r18(32512, 1920);
		API_polar::template xo < 128>(s,     1792+    0,  1792+  128,               1792+    0,  128);
		API_polar::template xo < 256>(s,     1536+    0,  1536+  256,               1536+    0,  256);
		API_polar::template xo < 512>(s,     1024+    0,  1024+  512,               1024+    0,  512);
		API_polar::template xo <1024>(s,        0+    0,     0+ 1024,                  0+    0, 1024);
		API_polar::template g  <2048>(s, l, 24576+    0, 24576+ 2048,     0+    0, 24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r08(32640, 2048);
		API_polar::template g0 <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r09(32704, 2112);
		API_polar::template g0 <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		r010r011re12s12(32704, 2144);
		API_polar::template xo0<  32>(s,     2112+   32,                            2112+    0,   32);
		API_polar::template xo0<  64>(s,     2048+   64,                            2048+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  2048+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r09re10re11re12s12(32640, 2176);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  2176+    0, 32512+  128,   64);
		re10re11re12r112r012r013r113s11s10(32640, 2240);
		API_polar::template xo <  64>(s,     2176+    0,  2176+   64,               2176+    0,   64);
		API_polar::template xo < 128>(s,     2048+    0,  2048+  128,               2048+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  2048+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re9re10re11s11(32640, 2304);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  2304+    0, 32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		r011r012r013r113(32736, 2368);
		API_polar::template g  <  16>(s, l, 32704+    0, 32704+   16,  2368+    0, 32704+   32,   16);
		re12s12s11(32736, 2384);
		API_polar::template xo <  16>(s,     2368+    0,  2368+   16,               2368+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  2368+    0, 32640+   64,   32);
		re12s12s11s10(32704, 2400);
		API_polar::template xo <  32>(s,     2368+    0,  2368+   32,               2368+    0,   32);
		API_polar::template xo <  64>(s,     2304+    0,  2304+   64,               2304+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  2304+    0, 32256+  256,  128);
		re11re12s12re12s12s11re12s12s11s10re12s12s11s10r19(32512, 2432);
		API_polar::template xo < 128>(s,     2304+    0,  2304+  128,               2304+    0,  128);
		API_polar::template xo < 256>(s,     2048+    0,  2048+  256,               2048+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  2048+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re9(32704, 2560);
		API_polar::template gr <  32>(s, l, 32640+    0, 32640+   32,  2560+    0, 32640+   64,   32);
		r011re12s12re12s12s11(32704, 2592);
		API_polar::template xo <  32>(s,     2560+    0,  2560+   32,               2560+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  2560+    0, 32512+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(32640, 2624);
		API_polar::template xo <  64>(s,     2560+    0,  2560+   64,               2560+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  2560+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re11re12s12re12s12s11re12r112r111r110(32640, 2688);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  2688+    0, 32512+  128,   64);
		s8(32640, 2752);
		API_polar::template xo <  64>(s,     2688+    0,  2688+   64,               2688+    0,   64);
		API_polar::template xo < 128>(s,     2560+    0,  2560+  128,               2560+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  2560+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re11re12r112r013r113r112r111s9s8(32512, 2816);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  2816+    0, 32256+  256,  128);
		s7(32512, 2944);
		API_polar::template xo < 128>(s,     2816+    0,  2816+  128,               2816+    0,  128);
		API_polar::template xo < 256>(s,     2560+    0,  2560+  256,               2560+    0,  256);
		API_polar::template xo < 512>(s,     2048+    0,  2048+  512,               2048+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024,  2048+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r010re11re12s12re11re12s12re12s12s11re11re12s12re12r112r111s9(32512, 3072);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  3072+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		re11s11(32736, 3200);
		API_polar::template g  <  16>(s, l, 32704+    0, 32704+   16,  3200+    0, 32704+   32,   16);
		s10(32736, 3216);
		API_polar::template xo <  16>(s,     3200+    0,  3200+   16,               3200+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  3200+    0, 32640+   64,   32);
		s9(32704, 3232);
		API_polar::template xo <  32>(s,     3200+    0,  3200+   32,               3200+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  3200+    0, 32512+  128,   64);
		s8(32640, 3264);
		API_polar::template xo <  64>(s,     3200+    0,  3200+   64,               3200+    0,   64);
		API_polar::template xo < 128>(s,     3072+    0,  3072+  128,               3072+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  3072+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r012s12s11s10s9s8(32512, 3328);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  3328+    0, 32256+  256,  128);
		s7(32512, 3456);
		API_polar::template xo < 128>(s,     3328+    0,  3328+  128,               3328+    0,  128);
		API_polar::template xo < 256>(s,     3072+    0,  3072+  256,               3072+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  3072+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		re12s12s11s10s9s8s7(32256, 3584);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  3584+    0, 31744+  512,  256);
		s6(32256, 3840);
		API_polar::template xo < 256>(s,     3584+    0,  3584+  256,               3584+    0,  256);
		API_polar::template xo < 512>(s,     3072+    0,  3072+  512,               3072+    0,  512);
		API_polar::template xo <1024>(s,     2048+    0,  2048+ 1024,               2048+    0, 1024);
		API_polar::template xo <2048>(s,        0+    0,     0+ 2048,                  0+    0, 2048);
		API_polar::template g  <4096>(s, l, 16384+    0, 16384+ 4096,     0+    0, 16384+ 8192, 4096);
		API_polar::template f  <2048>(   l, 24576+    0, 24576+ 2048,              24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r08(32640, 4096);
		API_polar::template g0 <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re9re10re11s11(32640, 4160);
		API_polar::template xo0<  64>(s,     4096+   64,                            4096+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  4096+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re9(32704, 4224);
		API_polar::template gr <  32>(s, l, 32640+    0, 32640+   32,  4224+    0, 32640+   64,   32);
		r011r012s12re12s12s11(32704, 4256);
		API_polar::template xo <  32>(s,     4224+    0,  4224+   32,               4224+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  4224+    0, 32512+  128,   64);
		re11re12s12re12s12s11re12s12s11s10(32640, 4288);
		API_polar::template xo <  64>(s,     4224+    0,  4224+   64,               4224+    0,   64);
		API_polar::template xo < 128>(s,     4096+    0,  4096+  128,               4096+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  4096+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r010r011re12s12re11re12s12re12s12s11(32640, 4352);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  4352+    0, 32512+  128,   64);
		re11re12s12re12s12s11re12r112r111r110(32640, 4416);
		API_polar::template xo <  64>(s,     4352+    0,  4352+   64,               4352+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  4352+    0, 32256+  256,  128);
		re11re12r112r013r113r112r111s9s8(32512, 4480);
		API_polar::template xo < 128>(s,     4352+    0,  4352+  128,               4352+    0,  128);
		API_polar::template xo < 256>(s,     4096+    0,  4096+  256,               4096+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  4096+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re10re11re12s12re11re12s12re12r112r111re11r013r113r112s10s9(32512, 4608);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  4608+    0, 32256+  256,  128);
		r012s12s11s10s9s8(32512, 4736);
		API_polar::template xo < 128>(s,     4608+    0,  4608+  128,               4608+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  4608+    0, 31744+  512,  256);
		re12s12s11s10s9s8s7(32256, 4864);
		API_polar::template xo < 256>(s,     4608+    0,  4608+  256,               4608+    0,  256);
		API_polar::template xo < 512>(s,     4096+    0,  4096+  512,               4096+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024,  4096+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		re10(32736, 5120);
		API_polar::template gr <  16>(s, l, 32704+    0, 32704+   16,  5120+    0, 32704+   32,   16);
		re11r013r113r112(32736, 5136);
		API_polar::template xo <  16>(s,     5120+    0,  5120+   16,               5120+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  5120+    0, 32640+   64,   32);
		r012s12s11s10(32704, 5152);
		API_polar::template xo <  32>(s,     5120+    0,  5120+   32,               5120+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  5120+    0, 32512+  128,   64);
		re12s12s11s10s9(32640, 5184);
		API_polar::template xo <  64>(s,     5120+    0,  5120+   64,               5120+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  5120+    0, 32256+  256,  128);
		re12s12s11s10s9s8(32512, 5248);
		API_polar::template xo < 128>(s,     5120+    0,  5120+  128,               5120+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  5120+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re12s12s11s10s9s8(32512, 5376);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  5376+    0, 32256+  256,  128);
		r17(32512, 5504);
		API_polar::template xo < 128>(s,     5376+    0,  5376+  128,               5376+    0,  128);
		API_polar::template xo < 256>(s,     5120+    0,  5120+  256,               5120+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  5120+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		re12s12s11s10r19r18r17(32256, 5632);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  5632+    0, 31744+  512,  256);
		r16(32256, 5888);
		API_polar::template xo < 256>(s,     5632+    0,  5632+  256,               5632+    0,  256);
		API_polar::template xo < 512>(s,     5120+    0,  5120+  512,               5120+    0,  512);
		API_polar::template xo <1024>(s,     4096+    0,  4096+ 1024,               4096+    0, 1024);
		API_polar::template g  <2048>(s, l, 24576+    0, 24576+ 2048,  4096+    0, 24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		r011r012s12re12s12s11re12s12s11s10re12s12s11s10s9(32512, 6144);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  6144+    0, 32256+  256,  128);
		re12s12s11s10r19r18(32512, 6272);
		API_polar::template xo < 128>(s,     6144+    0,  6144+  128,               6144+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  6144+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re12s12s11r110r19(32640, 6400);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  6400+    0, 32512+  128,   64);
		r18(32640, 6464);
		API_polar::template xo <  64>(s,     6400+    0,  6400+   64,               6400+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  6400+    0, 32256+  256,  128);
		r17(32512, 6528);
		API_polar::template xo < 128>(s,     6400+    0,  6400+  128,               6400+    0,  128);
		API_polar::template xo < 256>(s,     6144+    0,  6144+  256,               6144+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  6144+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re12r112r111r110r19r18(32512, 6656);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  6656+    0, 32256+  256,  128);
		r17(32512, 6784);
		API_polar::template xo < 128>(s,     6656+    0,  6656+  128,               6656+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  6656+    0, 31744+  512,  256);
		r16(32256, 6912);
		API_polar::template xo < 256>(s,     6656+    0,  6656+  256,               6656+    0,  256);
		API_polar::template xo < 512>(s,     6144+    0,  6144+  512,               6144+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024,  6144+    0, 28672+ 2048, 1024);
		s4(30720, 7168);
		API_polar::template xo <1024>(s,     6144+    0,  6144+ 1024,               6144+    0, 1024);
		API_polar::template xo <2048>(s,     4096+    0,  4096+ 2048,               4096+    0, 2048);
		API_polar::template xo <4096>(s,        0+    0,     0+ 4096,                  0+    0, 4096);
		API_polar::template g  <8192>(s, l,     0+    0,     0+ 8192,     0+    0,     0+16384, 8192);
		API_polar::template f  <4096>(   l, 16384+    0, 16384+ 4096,              16384+ 8192, 4096);
		API_polar::template f  <2048>(   l, 24576+    0, 24576+ 2048,              24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		r09(32704, 8192);
		API_polar::template g0 <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		r010r011r012r013r113(32704, 8224);
		API_polar::template xo0<  32>(s,     8192+   32,                            8192+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  8192+    0, 32512+  128,   64);
		r010r011re12s12re11re12s12re12s12s11(32640, 8256);
		API_polar::template xo <  64>(s,     8192+    0,  8192+   64,               8192+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  8192+    0, 32256+  256,  128);
		re10re11re12s12re11re12s12re12r112r111re11r013r113r112s10s9(32512, 8320);
		API_polar::template xo < 128>(s,     8192+    0,  8192+  128,               8192+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  8192+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re10re11re12r112r012r013r113s11s10re12s12s11s10s9(32512, 8448);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  8448+    0, 32256+  256,  128);
		re12s12s11s10s9s8(32512, 8576);
		API_polar::template xo < 128>(s,     8448+    0,  8448+  128,               8448+    0,  128);
		API_polar::template xo < 256>(s,     8192+    0,  8192+  256,               8192+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  8192+    0, 30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		re10(32736, 8704);
		API_polar::template gr <  16>(s, l, 32704+    0, 32704+   16,  8704+    0, 32704+   32,   16);
		r012s12s11(32736, 8720);
		API_polar::template xo <  16>(s,     8704+    0,  8704+   16,               8704+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  8704+    0, 32640+   64,   32);
		re12s12s11s10(32704, 8736);
		API_polar::template xo <  32>(s,     8704+    0,  8704+   32,               8704+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  8704+    0, 32512+  128,   64);
		re12s12s11s10s9(32640, 8768);
		API_polar::template xo <  64>(s,     8704+    0,  8704+   64,               8704+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  8704+    0, 32256+  256,  128);
		re12s12s11s10s9s8(32512, 8832);
		API_polar::template xo < 128>(s,     8704+    0,  8704+  128,               8704+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  8704+    0, 31744+  512,  256);
		re12s12s11s10r19r18r17(32256, 8960);
		API_polar::template xo < 256>(s,     8704+    0,  8704+  256,               8704+    0,  256);
		API_polar::template xo < 512>(s,     8192+    0,  8192+  512,               8192+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024,  8192+    0, 28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		re11re12s12re12s12s11re12s12s11s10re12s12s11s10r19(32512, 9216);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  9216+    0, 32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		API_polar::template f  <   8>(   l, 32736+    0, 32736+    8,              32736+   16,    8);
		re12s12(32752, 9344);
		API_polar::template g  <   8>(s, l, 32736+    0, 32736+    8,  9344+    0, 32736+   16,    8);
		r111(32752, 9352);
		API_polar::template xo <   8>(s,     9344+    0,  9344+    8,               9344+    0,    8);
		API_polar::template g  <  16>(s, l, 32704+    0, 32704+   16,  9344+    0, 32704+   32,   16);
		r110(32736, 9360);
		API_polar::template xo <  16>(s,     9344+    0,  9344+   16,               9344+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  9344+    0, 32640+   64,   32);
		r19(32704, 9376);
		API_polar::template xo <  32>(s,     9344+    0,  9344+   32,               9344+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  9344+    0, 32512+  128,   64);
		r18(32640, 9408);
		API_polar::template xo <  64>(s,     9344+    0,  9344+   64,               9344+    0,   64);
		API_polar::template xo < 128>(s,     9216+    0,  9216+  128,               9216+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256,  9216+    0, 31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		API_polar::template f  <  16>(   l, 32704+    0, 32704+   16,              32704+   32,   16);
		r013r113r112r111(32736, 9472);
		API_polar::template g  <  16>(s, l, 32704+    0, 32704+   16,  9472+    0, 32704+   32,   16);
		r110(32736, 9488);
		API_polar::template xo <  16>(s,     9472+    0,  9472+   16,               9472+    0,   16);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32,  9472+    0, 32640+   64,   32);
		r19(32704, 9504);
		API_polar::template xo <  32>(s,     9472+    0,  9472+   32,               9472+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64,  9472+    0, 32512+  128,   64);
		r18(32640, 9536);
		API_polar::template xo <  64>(s,     9472+    0,  9472+   64,               9472+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128,  9472+    0, 32256+  256,  128);
		r17(32512, 9600);
		API_polar::template xo < 128>(s,     9472+    0,  9472+  128,               9472+    0,  128);
		API_polar::template xo < 256>(s,     9216+    0,  9216+  256,               9216+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512,  9216+    0, 30720+ 1024,  512);
		s5(31744, 9728);
		API_polar::template xo < 512>(s,     9216+    0,  9216+  512,               9216+    0,  512);
		API_polar::template xo <1024>(s,     8192+    0,  8192+ 1024,               8192+    0, 1024);
		API_polar::template g  <2048>(s, l, 24576+    0, 24576+ 2048,  8192+    0, 24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		API_polar::template f  <  32>(   l, 32640+    0, 32640+   32,              32640+   64,   32);
		re11re12s12re12s12s11(32704, 10240);
		API_polar::template g  <  32>(s, l, 32640+    0, 32640+   32, 10240+    0, 32640+   64,   32);
		re12s12s11r110(32704, 10272);
		API_polar::template xo <  32>(s,    10240+    0, 10240+   32,              10240+    0,   32);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 10240+    0, 32512+  128,   64);
		re12r112r111r110r19(32640, 10304);
		API_polar::template xo <  64>(s,    10240+    0, 10240+   64,              10240+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 10240+    0, 32256+  256,  128);
		s7(32512, 10368);
		API_polar::template xo < 128>(s,    10240+    0, 10240+  128,              10240+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 10240+    0, 31744+  512,  256);
		s6(32256, 10496);
		API_polar::template xo < 256>(s,    10240+    0, 10240+  256,              10240+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512, 10240+    0, 30720+ 1024,  512);
		s5(31744, 10752);
		API_polar::template xo < 512>(s,    10240+    0, 10240+  512,              10240+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024, 10240+    0, 28672+ 2048, 1024);
		s4(30720, 11264);
		API_polar::template xo <1024>(s,    10240+    0, 10240+ 1024,              10240+    0, 1024);
		API_polar::template xo <2048>(s,     8192+    0,  8192+ 2048,               8192+    0, 2048);
		API_polar::template g  <4096>(s, l, 16384+    0, 16384+ 4096,  8192+    0, 16384+ 8192, 4096);
		API_polar::template f  <2048>(   l, 24576+    0, 24576+ 2048,              24576+ 4096, 2048);
		API_polar::template f  <1024>(   l, 28672+    0, 28672+ 1024,              28672+ 2048, 1024);
		API_polar::template f  < 512>(   l, 30720+    0, 30720+  512,              30720+ 1024,  512);
		API_polar::template f  < 256>(   l, 31744+    0, 31744+  256,              31744+  512,  256);
		API_polar::template f  < 128>(   l, 32256+    0, 32256+  128,              32256+  256,  128);
		API_polar::template f  <  64>(   l, 32512+    0, 32512+   64,              32512+  128,   64);
		re11re12s12re12r112r111s9(32640, 12288);
		API_polar::template g  <  64>(s, l, 32512+    0, 32512+   64, 12288+    0, 32512+  128,   64);
		s8(32640, 12352);
		API_polar::template xo <  64>(s,    12288+    0, 12288+   64,              12288+    0,   64);
		API_polar::template g  < 128>(s, l, 32256+    0, 32256+  128, 12288+    0, 32256+  256,  128);
		s7(32512, 12416);
		API_polar::template xo < 128>(s,    12288+    0, 12288+  128,              12288+    0,  128);
		API_polar::template g  < 256>(s, l, 31744+    0, 31744+  256, 12288+    0, 31744+  512,  256);
		s6(32256, 12544);
		API_polar::template xo < 256>(s,    12288+    0, 12288+  256,              12288+    0,  256);
		API_polar::template g  < 512>(s, l, 30720+    0, 30720+  512, 12288+    0, 30720+ 1024,  512);
		s5(31744, 12800);
		API_polar::template xo < 512>(s,    12288+    0, 12288+  512,              12288+    0,  512);
		API_polar::template g  <1024>(s, l, 28672+    0, 28672+ 1024, 12288+    0, 28672+ 2048, 1024);
		s4(30720, 13312);
		API_polar::template xo <1024>(s,    12288+    0, 12288+ 1024,              12288+    0, 1024);
		API_polar::template g  <2048>(s, l, 24576+    0, 24576+ 2048, 12288+    0, 24576+ 4096, 2048);
		API_polar::template spc<2048>(s, l, 28672+    0,                           14336+    0, 2048);
		API_polar::template xo <2048>(s,    12288+    0, 12288+ 2048,              12288+    0, 2048);
		API_polar::template xo <4096>(s,     8192+    0,  8192+ 4096,               8192+    0, 4096);
		API_polar::template xo <8192>(s,        0+    0,     0+ 8192,                  0+    0, 8192);
	}
};
}
}
#endif
